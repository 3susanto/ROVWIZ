
NUCLEO-F722ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f450  0800a0cc  0800a0cc  0001a0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801951c  0801951c  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801951c  0801951c  0002951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019524  08019524  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019524  08019524  00029524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019528  08019528  00029528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0801952c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021dc  200000a0  080195cc  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00018004  2000227c  080195cc  0003227c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016700  00000000  00000000  00030113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be8  00000000  00000000  00046813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0004a400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104f  00000000  00000000  0004b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002463f  00000000  00000000  0004c977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b124  00000000  00000000  00070fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fad36  00000000  00000000  0008c0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006370  00000000  00000000  00186e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0018d180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a0b4 	.word	0x0800a0b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	0800a0b4 	.word	0x0800a0b4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFF);
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	23ff      	movs	r3, #255	; 0xff
 80005f8:	2201      	movs	r2, #1
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <__io_putchar+0x20>)
 80005fc:	f004 f8f2 	bl	80047e4 <HAL_UART_Transmit>

  return ch;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20001708 	.word	0x20001708

08000610 <make_json_dio>:
//    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
//    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
}

void make_json_dio(uint8_t * buf, uint16_t * len, uint8_t pin)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	4613      	mov	r3, r2
 800061c:	71fb      	strb	r3, [r7, #7]
	printf("[DEBUG2]");
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <make_json_dio+0x34>)
 8000620:	f008 fc2a 	bl	8008e78 <iprintf>
	//uint8_t pin_state 	= Chip_GPIO_GetPinState(LPC_GPIO, dio_ports[pin], dio_pins[pin]);
	//uint8_t pin_dir 	= Chip_GPIO_GetPinDIR(LPC_GPIO, dio_ports[pin], dio_pins[pin]);

	*len = sprintf((char *)buf, "DioCallback({\"dio_p\":\"%d\",\
 8000624:	2303      	movs	r3, #3
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2302      	movs	r3, #2
 800062a:	2201      	movs	r2, #1
 800062c:	4906      	ldr	r1, [pc, #24]	; (8000648 <make_json_dio+0x38>)
 800062e:	68f8      	ldr	r0, [r7, #12]
 8000630:	f008 fc90 	bl	8008f54 <siprintf>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	801a      	strh	r2, [r3, #0]
											});",
											1,					// Digital io pin number
											2,				// Digital io status
											3					// Digital io directions
											);
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	0800a0d8 	.word	0x0800a0d8
 8000648:	0800a0e4 	.word	0x0800a0e4

0800064c <make_json_ain>:

void make_json_ain(uint8_t * buf, uint16_t * len, uint8_t pin)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	4613      	mov	r3, r2
 8000658:	71fb      	strb	r3, [r7, #7]
	printf("[DEBUG3]");
 800065a:	4809      	ldr	r0, [pc, #36]	; (8000680 <make_json_ain+0x34>)
 800065c:	f008 fc0c 	bl	8008e78 <iprintf>
	*len = sprintf((char *)buf, "AinCallback({\"ain_p\":\"%d\",\
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <make_json_ain+0x38>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	4908      	ldr	r1, [pc, #32]	; (8000688 <make_json_ain+0x3c>)
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f008 fc73 	bl	8008f54 <siprintf>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	801a      	strh	r2, [r3, #0]
											\"ain_v\":\"%d\"\
											});",
											0,					// ADC input pin number
											raw1//get_ADC_val(pin)		// ADC input value
											);
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	0800a13c 	.word	0x0800a13c
 8000684:	20002028 	.word	0x20002028
 8000688:	0800a148 	.word	0x0800a148

0800068c <make_json_netinfo>:

void make_json_netinfo(uint8_t * buf, uint16_t * len)
{
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	b0ad      	sub	sp, #180	; 0xb4
 8000690:	af16      	add	r7, sp, #88	; 0x58
 8000692:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000694:	63b9      	str	r1, [r7, #56]	; 0x38
	printf("[DEBUG4]");
 8000696:	483f      	ldr	r0, [pc, #252]	; (8000794 <make_json_netinfo+0x108>)
 8000698:	f008 fbee 	bl	8008e78 <iprintf>
	wiz_NetInfo netinfo;
	ctlnetwork(CN_GET_NETINFO, (void*) &netinfo);
 800069c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006a0:	4619      	mov	r1, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	f006 f86a 	bl	800677c <ctlnetwork>
											\"gw\":\"%d.%d.%d.%d\",\
											\"sn\":\"%d.%d.%d.%d\",\
											\"dns\":\"%d.%d.%d.%d\",\
											\"dhcp\":\"%d\"\
											});",
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 80006a8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006ac:	469c      	mov	ip, r3
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 80006ae:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006b2:	469e      	mov	lr, r3
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 80006b4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 80006ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 80006c0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
											netinfo.mac[0], netinfo.mac[1], netinfo.mac[2], netinfo.mac[3], netinfo.mac[4], netinfo.mac[5],
 80006c6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 80006cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 80006d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006d6:	623b      	str	r3, [r7, #32]
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 80006d8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006dc:	61fb      	str	r3, [r7, #28]
											netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3],
 80006de:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006e2:	61bb      	str	r3, [r7, #24]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 80006e4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006e8:	617b      	str	r3, [r7, #20]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 80006ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006ee:	613b      	str	r3, [r7, #16]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 80006f0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006f4:	60fb      	str	r3, [r7, #12]
											netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3],
 80006f6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 80006fa:	60bb      	str	r3, [r7, #8]
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 80006fc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000700:	607b      	str	r3, [r7, #4]
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 8000702:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000706:	603b      	str	r3, [r7, #0]
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 8000708:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800070c:	461e      	mov	r6, r3
											netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3],
 800070e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000712:	461d      	mov	r5, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 8000714:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000718:	461c      	mov	r4, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 800071a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800071e:	4618      	mov	r0, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 8000720:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000724:	4619      	mov	r1, r3
											netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3],
 8000726:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 800072a:	461a      	mov	r2, r3
											netinfo.dhcp
 800072c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
	*len = sprintf((char *)buf, "NetinfoCallback({\"mac\":\"%.2X:%.2X:%.2X:%.2X:%.2X:%.2X\",\
 8000730:	9314      	str	r3, [sp, #80]	; 0x50
 8000732:	9213      	str	r2, [sp, #76]	; 0x4c
 8000734:	9112      	str	r1, [sp, #72]	; 0x48
 8000736:	9011      	str	r0, [sp, #68]	; 0x44
 8000738:	9410      	str	r4, [sp, #64]	; 0x40
 800073a:	950f      	str	r5, [sp, #60]	; 0x3c
 800073c:	960e      	str	r6, [sp, #56]	; 0x38
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	920d      	str	r2, [sp, #52]	; 0x34
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	920c      	str	r2, [sp, #48]	; 0x30
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	920b      	str	r2, [sp, #44]	; 0x2c
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	920a      	str	r2, [sp, #40]	; 0x28
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	9209      	str	r2, [sp, #36]	; 0x24
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	9208      	str	r2, [sp, #32]
 8000756:	69ba      	ldr	r2, [r7, #24]
 8000758:	9207      	str	r2, [sp, #28]
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	9206      	str	r2, [sp, #24]
 800075e:	6a3a      	ldr	r2, [r7, #32]
 8000760:	9205      	str	r2, [sp, #20]
 8000762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000764:	9204      	str	r2, [sp, #16]
 8000766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000768:	9203      	str	r2, [sp, #12]
 800076a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800076c:	9202      	str	r2, [sp, #8]
 800076e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000770:	9201      	str	r2, [sp, #4]
 8000772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	4673      	mov	r3, lr
 8000778:	4662      	mov	r2, ip
 800077a:	4907      	ldr	r1, [pc, #28]	; (8000798 <make_json_netinfo+0x10c>)
 800077c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800077e:	f008 fbe9 	bl	8008f54 <siprintf>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000788:	801a      	strh	r2, [r3, #0]
											);
}
 800078a:	bf00      	nop
 800078c:	375c      	adds	r7, #92	; 0x5c
 800078e:	46bd      	mov	sp, r7
 8000790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000792:	bf00      	nop
 8000794:	0800a188 	.word	0x0800a188
 8000798:	0800a194 	.word	0x0800a194

0800079c <predefined_get_cgi_processor>:

uint8_t predefined_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
	printf("[DEBUG5]");
 80007a8:	484e      	ldr	r0, [pc, #312]	; (80008e4 <predefined_get_cgi_processor+0x148>)
 80007aa:	f008 fb65 	bl	8008e78 <iprintf>
	uint8_t ret = 1;	// ret = 1 means 'uri_name' matched
 80007ae:	2301      	movs	r3, #1
 80007b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t cgibuf[14] = {0, };
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	811a      	strh	r2, [r3, #8]
	int8_t cgi_dio = -1;
 80007c4:	23ff      	movs	r3, #255	; 0xff
 80007c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int8_t cgi_ain = -1;
 80007ca:	23ff      	movs	r3, #255	; 0xff
 80007cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	uint8_t i;

	if(strcmp((const char *)uri_name, "todo.cgi") == 0)
 80007d0:	4945      	ldr	r1, [pc, #276]	; (80008e8 <predefined_get_cgi_processor+0x14c>)
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f7ff fd24 	bl	8000220 <strcmp>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d07c      	beq.n	80008d8 <predefined_get_cgi_processor+0x13c>
	{
		// to do
		;//make_json_todo(buf, len);
	}
	else if(strcmp((const char *)uri_name, "get_netinfo.cgi") == 0)
 80007de:	4943      	ldr	r1, [pc, #268]	; (80008ec <predefined_get_cgi_processor+0x150>)
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f7ff fd1d 	bl	8000220 <strcmp>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d104      	bne.n	80007f6 <predefined_get_cgi_processor+0x5a>
	{
		make_json_netinfo(buf, len);
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	68b8      	ldr	r0, [r7, #8]
 80007f0:	f7ff ff4c 	bl	800068c <make_json_netinfo>
 80007f4:	e070      	b.n	80008d8 <predefined_get_cgi_processor+0x13c>
	else
	{
		// get_dio0.cgi ~ get_dio15.cgi
#if 1
		//for(i = 0; i < DIOn; i++)
		for(i = 0; i < 16; i++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80007fc:	e028      	b.n	8000850 <predefined_get_cgi_processor+0xb4>
		{
			memset(cgibuf, 0x00, 14);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	220e      	movs	r2, #14
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f008 fcb6 	bl	8009178 <memset>
			sprintf((char *)cgibuf, "get_dio%d.cgi", i);
 800080c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4936      	ldr	r1, [pc, #216]	; (80008f0 <predefined_get_cgi_processor+0x154>)
 8000816:	4618      	mov	r0, r3
 8000818:	f008 fb9c 	bl	8008f54 <siprintf>
			if(strcmp((const char *)uri_name, (const char *)cgibuf) == 0)
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff fcfc 	bl	8000220 <strcmp>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10b      	bne.n	8000846 <predefined_get_cgi_processor+0xaa>
			{
				make_json_dio(buf, len, i);
 800082e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000832:	461a      	mov	r2, r3
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	68b8      	ldr	r0, [r7, #8]
 8000838:	f7ff feea 	bl	8000610 <make_json_dio>
				cgi_dio = i;
 800083c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000840:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8000844:	e008      	b.n	8000858 <predefined_get_cgi_processor+0xbc>
		for(i = 0; i < 16; i++)
 8000846:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800084a:	3301      	adds	r3, #1
 800084c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000850:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d9d2      	bls.n	80007fe <predefined_get_cgi_processor+0x62>
			}
		}
#endif
		if(cgi_dio < 0)
 8000858:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800085c:	2b00      	cmp	r3, #0
 800085e:	da30      	bge.n	80008c2 <predefined_get_cgi_processor+0x126>
		{
			// get_ain0.cgi ~ get_ain5.cgi (A0 - A5), get_ain6.cgi for on-board potentiometer / Temp.Sensor
			for(i = 0; i < 7; i++)
 8000860:	2300      	movs	r3, #0
 8000862:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000866:	e028      	b.n	80008ba <predefined_get_cgi_processor+0x11e>
			{
				memset(cgibuf, 0x00, 14);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	220e      	movs	r2, #14
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f008 fc81 	bl	8009178 <memset>
				sprintf((char *)cgibuf, "get_ain%d.cgi", i);
 8000876:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	491d      	ldr	r1, [pc, #116]	; (80008f4 <predefined_get_cgi_processor+0x158>)
 8000880:	4618      	mov	r0, r3
 8000882:	f008 fb67 	bl	8008f54 <siprintf>
				if(strcmp((const char *)uri_name, (const char *)cgibuf) == 0)
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	f7ff fcc7 	bl	8000220 <strcmp>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10b      	bne.n	80008b0 <predefined_get_cgi_processor+0x114>
				{
					make_json_ain(buf, len, i);
 8000898:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800089c:	461a      	mov	r2, r3
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	68b8      	ldr	r0, [r7, #8]
 80008a2:	f7ff fed3 	bl	800064c <make_json_ain>
					cgi_ain = i;
 80008a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					break;
 80008ae:	e008      	b.n	80008c2 <predefined_get_cgi_processor+0x126>
			for(i = 0; i < 7; i++)
 80008b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008b4:	3301      	adds	r3, #1
 80008b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80008ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d9d2      	bls.n	8000868 <predefined_get_cgi_processor+0xcc>
				}
			}
		}

		if((cgi_dio < 0) && (cgi_ain < 0)) ret = 0;
 80008c2:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da06      	bge.n	80008d8 <predefined_get_cgi_processor+0x13c>
 80008ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da02      	bge.n	80008d8 <predefined_get_cgi_processor+0x13c>
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return ret;
 80008d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0800a26c 	.word	0x0800a26c
 80008e8:	0800a278 	.word	0x0800a278
 80008ec:	0800a284 	.word	0x0800a284
 80008f0:	0800a294 	.word	0x0800a294
 80008f4:	0800a2a4 	.word	0x0800a2a4

080008f8 <set_diostate>:

	return pin;
}

int8_t set_diostate(uint8_t * uri)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	printf("[DEBUG6]");
 8000900:	4877      	ldr	r0, [pc, #476]	; (8000ae0 <set_diostate+0x1e8>)
 8000902:	f008 fab9 	bl	8008e78 <iprintf>
	uint8_t * param;
	uint8_t pin = 0, val = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

	if((param = get_http_param_value((char *)uri, "pin"))) // GPIO; D0 ~ D15
 8000922:	4970      	ldr	r1, [pc, #448]	; (8000ae4 <set_diostate+0x1ec>)
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f006 fe27 	bl	8007578 <get_http_param_value>
 800092a:	4603      	mov	r3, r0
 800092c:	623b      	str	r3, [r7, #32]
 800092e:	6a3b      	ldr	r3, [r7, #32]
 8000930:	2b00      	cmp	r3, #0
 8000932:	f000 80cf 	beq.w	8000ad4 <set_diostate+0x1dc>
	{
		pin = (uint8_t)ATOI(param, 10);
 8000936:	210a      	movs	r1, #10
 8000938:	6a38      	ldr	r0, [r7, #32]
 800093a:	f006 fecd 	bl	80076d8 <ATOI>
 800093e:	4603      	mov	r3, r0
 8000940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(pin > 15) return -1;
 8000944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d902      	bls.n	8000952 <set_diostate+0x5a>
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	e0c2      	b.n	8000ad8 <set_diostate+0x1e0>

		if((param = get_http_param_value((char *)uri, "val")))  // State; high(on)/low(off)
 8000952:	4965      	ldr	r1, [pc, #404]	; (8000ae8 <set_diostate+0x1f0>)
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f006 fe0f 	bl	8007578 <get_http_param_value>
 800095a:	4603      	mov	r3, r0
 800095c:	623b      	str	r3, [r7, #32]
 800095e:	6a3b      	ldr	r3, [r7, #32]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d010      	beq.n	8000986 <set_diostate+0x8e>
		{
			printf("[DEBUG6-1]");
 8000964:	4861      	ldr	r0, [pc, #388]	; (8000aec <set_diostate+0x1f4>)
 8000966:	f008 fa87 	bl	8008e78 <iprintf>
			val = (uint8_t)ATOI(param, 10);
 800096a:	210a      	movs	r1, #10
 800096c:	6a38      	ldr	r0, [r7, #32]
 800096e:	f006 feb3 	bl	80076d8 <ATOI>
 8000972:	4603      	mov	r3, r0
 8000974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(val > On) val = On;
 8000978:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800097c:	2b01      	cmp	r3, #1
 800097e:	d902      	bls.n	8000986 <set_diostate+0x8e>
 8000980:	2301      	movs	r3, #1
 8000982:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}
		printf("[DEBUG]set_diostatue pin= %d, val = %d\r\n", pin, val);
 8000986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800098a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800098e:	4619      	mov	r1, r3
 8000990:	4857      	ldr	r0, [pc, #348]	; (8000af0 <set_diostate+0x1f8>)
 8000992:	f008 fa71 	bl	8008e78 <iprintf>
		if(val == 0)
 8000996:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800099a:	2b00      	cmp	r3, #0
 800099c:	d14a      	bne.n	8000a34 <set_diostate+0x13c>
		{
			if(pin == 11 )	// LED RED PB14
 800099e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a2:	2b0b      	cmp	r3, #11
 80009a4:	d10c      	bne.n	80009c0 <set_diostate+0xc8>
			{
				TIM2->CCR1=75;
 80009a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009aa:	224b      	movs	r2, #75	; 0x4b
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2=75;
 80009ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009b2:	224b      	movs	r2, #75	; 0x4b
 80009b4:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3=75;
 80009b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ba:	224b      	movs	r2, #75	; 0x4b
 80009bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80009be:	e089      	b.n	8000ad4 <set_diostate+0x1dc>
			}
			else if(pin == 8 )	// LED RED PB14
 80009c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009c4:	2b08      	cmp	r3, #8
 80009c6:	d111      	bne.n	80009ec <set_diostate+0xf4>
			{
				HAL_GPIO_WritePin(GPIOB, ledRED_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ce:	4849      	ldr	r0, [pc, #292]	; (8000af4 <set_diostate+0x1fc>)
 80009d0:	f001 fc98 	bl	8002304 <HAL_GPIO_WritePin>
				TIM2->CCR1=75;
 80009d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d8:	224b      	movs	r2, #75	; 0x4b
 80009da:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(100);
 80009dc:	2064      	movs	r0, #100	; 0x64
 80009de:	f000 ff0d 	bl	80017fc <HAL_Delay>
				TIM2->CCR1=65;
 80009e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e6:	2241      	movs	r2, #65	; 0x41
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ea:	e073      	b.n	8000ad4 <set_diostate+0x1dc>
			}
			else if(pin == 9) //LED BLUE PB4
 80009ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009f0:	2b09      	cmp	r3, #9
 80009f2:	d10d      	bne.n	8000a10 <set_diostate+0x118>
			{
				HAL_GPIO_WritePin(GPIOB, ledGREEN_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2101      	movs	r1, #1
 80009f8:	483e      	ldr	r0, [pc, #248]	; (8000af4 <set_diostate+0x1fc>)
 80009fa:	f001 fc83 	bl	8002304 <HAL_GPIO_WritePin>
				TIM2->CCR2=80;
 80009fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a02:	2250      	movs	r2, #80	; 0x50
 8000a04:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3=70;
 8000a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a0a:	2246      	movs	r2, #70	; 0x46
 8000a0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a0e:	e061      	b.n	8000ad4 <set_diostate+0x1dc>

			}
			else if(pin == 10)
 8000a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a14:	2b0a      	cmp	r3, #10
 8000a16:	d15d      	bne.n	8000ad4 <set_diostate+0x1dc>
			{
				HAL_GPIO_WritePin(GPIOB, ledBLUE_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2180      	movs	r1, #128	; 0x80
 8000a1c:	4835      	ldr	r0, [pc, #212]	; (8000af4 <set_diostate+0x1fc>)
 8000a1e:	f001 fc71 	bl	8002304 <HAL_GPIO_WritePin>
				TIM2->CCR2=80;
 8000a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a26:	2250      	movs	r2, #80	; 0x50
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3=75;
 8000a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a2e:	224b      	movs	r2, #75	; 0x4b
 8000a30:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a32:	e04f      	b.n	8000ad4 <set_diostate+0x1dc>

		//Chip_GPIO_SetPinState(LPC_GPIO, dio_ports[pin], dio_pins[pin], true); 	// High
		}
		else
		{
			if(pin == 11 )	// LED RED PB14
 8000a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a38:	2b0b      	cmp	r3, #11
 8000a3a:	d112      	bne.n	8000a62 <set_diostate+0x16a>
			{
				HAL_GPIO_WritePin(GPIOB, ledRED_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a42:	482c      	ldr	r0, [pc, #176]	; (8000af4 <set_diostate+0x1fc>)
 8000a44:	f001 fc5e 	bl	8002304 <HAL_GPIO_WritePin>
				TIM2->CCR1=75;
 8000a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a4c:	224b      	movs	r2, #75	; 0x4b
 8000a4e:	635a      	str	r2, [r3, #52]	; 0x34
				TIM2->CCR2=75;
 8000a50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a54:	224b      	movs	r2, #75	; 0x4b
 8000a56:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3=75;
 8000a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a5c:	224b      	movs	r2, #75	; 0x4b
 8000a5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a60:	e038      	b.n	8000ad4 <set_diostate+0x1dc>
			}
			else if(pin == 8 )	// LED RED PB14
 8000a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a66:	2b08      	cmp	r3, #8
 8000a68:	d111      	bne.n	8000a8e <set_diostate+0x196>
			{
				HAL_GPIO_WritePin(GPIOB, ledRED_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a70:	4820      	ldr	r0, [pc, #128]	; (8000af4 <set_diostate+0x1fc>)
 8000a72:	f001 fc47 	bl	8002304 <HAL_GPIO_WritePin>
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
				TIM2->CCR1=75;
 8000a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a7a:	224b      	movs	r2, #75	; 0x4b
 8000a7c:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(100);
 8000a7e:	2064      	movs	r0, #100	; 0x64
 8000a80:	f000 febc 	bl	80017fc <HAL_Delay>
				TIM2->CCR1=85;
 8000a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a88:	2255      	movs	r2, #85	; 0x55
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8c:	e022      	b.n	8000ad4 <set_diostate+0x1dc>


			}
			else if(pin == 9) //LED BLUE PB4
 8000a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a92:	2b09      	cmp	r3, #9
 8000a94:	d10d      	bne.n	8000ab2 <set_diostate+0x1ba>
			{
				HAL_GPIO_WritePin(GPIOB, ledGREEN_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <set_diostate+0x1fc>)
 8000a9c:	f001 fc32 	bl	8002304 <HAL_GPIO_WritePin>
				TIM2->CCR2=70;
 8000aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa4:	2246      	movs	r2, #70	; 0x46
 8000aa6:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3=80;
 8000aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aac:	2250      	movs	r2, #80	; 0x50
 8000aae:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab0:	e010      	b.n	8000ad4 <set_diostate+0x1dc>

			}
			else if(pin == 10)
 8000ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ab6:	2b0a      	cmp	r3, #10
 8000ab8:	d10c      	bne.n	8000ad4 <set_diostate+0x1dc>
			{
				HAL_GPIO_WritePin(GPIOB, ledBLUE_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2180      	movs	r1, #128	; 0x80
 8000abe:	480d      	ldr	r0, [pc, #52]	; (8000af4 <set_diostate+0x1fc>)
 8000ac0:	f001 fc20 	bl	8002304 <HAL_GPIO_WritePin>
				TIM2->CCR2=75;
 8000ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac8:	224b      	movs	r2, #75	; 0x4b
 8000aca:	639a      	str	r2, [r3, #56]	; 0x38
				TIM2->CCR3=70;
 8000acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ad0:	2246      	movs	r2, #70	; 0x46
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
		//Chip_GPIO_SetPinState(LPC_GPIO, dio_ports[pin], dio_pins[pin], false);	// Low
		}

	}

	return pin;
 8000ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	0800a2bc 	.word	0x0800a2bc
 8000ae4:	0800a2b4 	.word	0x0800a2b4
 8000ae8:	0800a2b8 	.word	0x0800a2b8
 8000aec:	0800a2c8 	.word	0x0800a2c8
 8000af0:	0800a2d4 	.word	0x0800a2d4
 8000af4:	40020400 	.word	0x40020400

08000af8 <predefined_set_cgi_processor>:
#endif
uint8_t predefined_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	603b      	str	r3, [r7, #0]
	printf("[DEBUG7]");
 8000b06:	4829      	ldr	r0, [pc, #164]	; (8000bac <predefined_set_cgi_processor+0xb4>)
 8000b08:	f008 f9b6 	bl	8008e78 <iprintf>
	uint8_t ret = 1;	// ret = '1' means 'uri_name' matched
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	75fb      	strb	r3, [r7, #23]
	uint8_t val = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	75bb      	strb	r3, [r7, #22]

	if(strcmp((const char *)uri_name, "todo.cgi") == 0)
 8000b14:	4926      	ldr	r1, [pc, #152]	; (8000bb0 <predefined_set_cgi_processor+0xb8>)
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff fb82 	bl	8000220 <strcmp>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d103      	bne.n	8000b2a <predefined_set_cgi_processor+0x32>
	{
		printf("[DEBUG7-A]");
 8000b22:	4824      	ldr	r0, [pc, #144]	; (8000bb4 <predefined_set_cgi_processor+0xbc>)
 8000b24:	f008 f9a8 	bl	8008e78 <iprintf>
 8000b28:	e03b      	b.n	8000ba2 <predefined_set_cgi_processor+0xaa>
		// to do
		;//val = todo(uri);
		//*len = sprintf((char *)buf, "%d", val);
	}
	// Digital I/O; dio_s, dio_d
	else if(strcmp((const char *)uri_name, "set_diodir.cgi") == 0)
 8000b2a:	4923      	ldr	r1, [pc, #140]	; (8000bb8 <predefined_set_cgi_processor+0xc0>)
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff fb77 	bl	8000220 <strcmp>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10f      	bne.n	8000b58 <predefined_set_cgi_processor+0x60>
	{
		printf("[DEBUG7-B]");
 8000b38:	4820      	ldr	r0, [pc, #128]	; (8000bbc <predefined_set_cgi_processor+0xc4>)
 8000b3a:	f008 f99d 	bl	8008e78 <iprintf>
		//val = set_diodir(uri);
		val = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	75bb      	strb	r3, [r7, #22]
		*len = sprintf((char *)buf, "%d", val);
 8000b42:	7dbb      	ldrb	r3, [r7, #22]
 8000b44:	461a      	mov	r2, r3
 8000b46:	491e      	ldr	r1, [pc, #120]	; (8000bc0 <predefined_set_cgi_processor+0xc8>)
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f008 fa03 	bl	8008f54 <siprintf>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	801a      	strh	r2, [r3, #0]
 8000b56:	e024      	b.n	8000ba2 <predefined_set_cgi_processor+0xaa>
	}
	else if(strcmp((const char *)uri_name, "set_diostate.cgi") == 0)
 8000b58:	491a      	ldr	r1, [pc, #104]	; (8000bc4 <predefined_set_cgi_processor+0xcc>)
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f7ff fb60 	bl	8000220 <strcmp>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d118      	bne.n	8000b98 <predefined_set_cgi_processor+0xa0>
	{
		printf("[DEBUG7-C]");
 8000b66:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <predefined_set_cgi_processor+0xd0>)
 8000b68:	f008 f986 	bl	8008e78 <iprintf>
		val = set_diostate(uri);
 8000b6c:	68b8      	ldr	r0, [r7, #8]
 8000b6e:	f7ff fec3 	bl	80008f8 <set_diostate>
 8000b72:	4603      	mov	r3, r0
 8000b74:	75bb      	strb	r3, [r7, #22]
		//val = 0;
		*len = sprintf((char *)buf, "%d", val);
 8000b76:	7dbb      	ldrb	r3, [r7, #22]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4911      	ldr	r1, [pc, #68]	; (8000bc0 <predefined_set_cgi_processor+0xc8>)
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f008 f9e9 	bl	8008f54 <siprintf>
 8000b82:	4603      	mov	r3, r0
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	801a      	strh	r2, [r3, #0]
		printf((char *)buf,"%d", val);
 8000b8a:	7dbb      	ldrb	r3, [r7, #22]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <predefined_set_cgi_processor+0xc8>)
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f008 f971 	bl	8008e78 <iprintf>
 8000b96:	e004      	b.n	8000ba2 <predefined_set_cgi_processor+0xaa>
	}
	else
	{
		printf("[DEBUG7-D]");
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <predefined_set_cgi_processor+0xd4>)
 8000b9a:	f008 f96d 	bl	8008e78 <iprintf>
		ret = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8000ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	0800a300 	.word	0x0800a300
 8000bb0:	0800a278 	.word	0x0800a278
 8000bb4:	0800a30c 	.word	0x0800a30c
 8000bb8:	0800a318 	.word	0x0800a318
 8000bbc:	0800a328 	.word	0x0800a328
 8000bc0:	0800a334 	.word	0x0800a334
 8000bc4:	0800a338 	.word	0x0800a338
 8000bc8:	0800a34c 	.word	0x0800a34c
 8000bcc:	0800a358 	.word	0x0800a358

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i;
	uint16_t len = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	83fb      	strh	r3, [r7, #30]
  wiz_NetInfo net_info =
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <main+0x8c>)
 8000bdc:	1d3c      	adds	r4, r7, #4
 8000bde:	461d      	mov	r5, r3
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000be8:	6020      	str	r0, [r4, #0]
 8000bea:	3404      	adds	r4, #4
 8000bec:	8021      	strh	r1, [r4, #0]
 8000bee:	3402      	adds	r4, #2
 8000bf0:	0c0b      	lsrs	r3, r1, #16
 8000bf2:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf4:	f000 fda4 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf8:	f000 f838 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfc:	f000 fa30 	bl	8001060 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c00:	f000 f982 	bl	8000f08 <MX_USART3_UART_Init>
  MX_FMC_Init();
 8000c04:	f000 f9b0 	bl	8000f68 <MX_FMC_Init>
  MX_ADC1_Init();
 8000c08:	f000 f89e 	bl	8000d48 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c0c:	f000 f8ee 	bl	8000dec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c10:	2100      	movs	r1, #0
 8000c12:	4813      	ldr	r0, [pc, #76]	; (8000c60 <main+0x90>)
 8000c14:	f002 fd04 	bl	8003620 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4811      	ldr	r0, [pc, #68]	; (8000c60 <main+0x90>)
 8000c1c:	f002 fd00 	bl	8003620 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c20:	2108      	movs	r1, #8
 8000c22:	480f      	ldr	r0, [pc, #60]	; (8000c60 <main+0x90>)
 8000c24:	f002 fcfc 	bl	8003620 <HAL_TIM_PWM_Start>
#endif /* APP_DHCP */
#ifdef APP_DNS
  dns_demo(&net_info);
#endif /* APP_DNS */
#ifdef APP_HTTP_SERVER
  http_server_demo(&net_info);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 fb7a 	bl	8005324 <http_server_demo>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC,buttonUSER_Pin))
 8000c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <main+0x94>)
 8000c36:	f001 fb4d 	bl	80022d4 <HAL_GPIO_ReadPin>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <main+0x7e>
	  {
		  HAL_GPIO_WritePin(GPIOB, ledGREEN_Pin|ledRED_Pin, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <main+0x98>)
 8000c48:	f001 fb5c 	bl	8002304 <HAL_GPIO_WritePin>
 8000c4c:	e7f0      	b.n	8000c30 <main+0x60>
//	  HAL_Delay(1000);
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, ledGREEN_Pin|ledRED_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <main+0x98>)
 8000c56:	f001 fb55 	bl	8002304 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOC,buttonUSER_Pin))
 8000c5a:	e7e9      	b.n	8000c30 <main+0x60>
 8000c5c:	0800a364 	.word	0x0800a364
 8000c60:	2000202c 	.word	0x2000202c
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020400 	.word	0x40020400

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	; 0x50
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	2230      	movs	r2, #48	; 0x30
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f008 fa7c 	bl	8009178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c90:	f001 fb52 	bl	8002338 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <SystemClock_Config+0xd4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	4a29      	ldr	r2, [pc, #164]	; (8000d40 <SystemClock_Config+0xd4>)
 8000c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <SystemClock_Config+0xd4>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <SystemClock_Config+0xd8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a24      	ldr	r2, [pc, #144]	; (8000d44 <SystemClock_Config+0xd8>)
 8000cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <SystemClock_Config+0xd8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cdc:	23d8      	movs	r3, #216	; 0xd8
 8000cde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ce4:	2309      	movs	r3, #9
 8000ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 fb83 	bl	80023f8 <HAL_RCC_OscConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cf8:	f000 fa60 	bl	80011bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cfc:	f001 fb2c 	bl	8002358 <HAL_PWREx_EnableOverDrive>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d06:	f000 fa59 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2107      	movs	r1, #7
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fe09 	bl	8002940 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d34:	f000 fa42 	bl	80011bc <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	; 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4e:	463b      	mov	r3, r7
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d5c:	4a21      	ldr	r2, [pc, #132]	; (8000de4 <MX_ADC1_Init+0x9c>)
 8000d5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <MX_ADC1_Init+0xa0>)
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000daa:	f000 fd4b 	bl	8001844 <HAL_ADC_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000db4:	f000 fa02 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000db8:	2303      	movs	r3, #3
 8000dba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_ADC1_Init+0x98>)
 8000dca:	f000 fd7f 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dd4:	f000 f9f2 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20001fe0 	.word	0x20001fe0
 8000de4:	40012000 	.word	0x40012000
 8000de8:	0f000001 	.word	0x0f000001

08000dec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2160-1;
 8000e26:	4b37      	ldr	r3, [pc, #220]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000e28:	f640 026f 	movw	r2, #2159	; 0x86f
 8000e2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e34:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000e36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3c:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e48:	482e      	ldr	r0, [pc, #184]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000e4a:	f002 fb31 	bl	80034b0 <HAL_TIM_Base_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000e54:	f000 f9b2 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4827      	ldr	r0, [pc, #156]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000e66:	f002 ff09 	bl	8003c7c <HAL_TIM_ConfigClockSource>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000e70:	f000 f9a4 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e74:	4823      	ldr	r0, [pc, #140]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000e76:	f002 fb72 	bl	800355e <HAL_TIM_PWM_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e80:	f000 f99c 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	481c      	ldr	r0, [pc, #112]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000e94:	f003 fbac 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e9e:	f000 f98d 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea2:	2360      	movs	r3, #96	; 0x60
 8000ea4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4812      	ldr	r0, [pc, #72]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000eba:	f002 fdcb 	bl	8003a54 <HAL_TIM_PWM_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ec4:	f000 f97a 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2204      	movs	r2, #4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000ed0:	f002 fdc0 	bl	8003a54 <HAL_TIM_PWM_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000eda:	f000 f96f 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000ee6:	f002 fdb5 	bl	8003a54 <HAL_TIM_PWM_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000ef0:	f000 f964 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <MX_TIM2_Init+0x118>)
 8000ef6:	f000 f9ef 	bl	80012d8 <HAL_TIM_MspPostInit>

}
 8000efa:	bf00      	nop
 8000efc:	3738      	adds	r7, #56	; 0x38
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000202c 	.word	0x2000202c

08000f08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <MX_USART3_UART_Init+0x5c>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_USART3_UART_Init+0x58>)
 8000f4c:	f003 fbfc 	bl	8004748 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f56:	f000 f931 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20001708 	.word	0x20001708
 8000f64:	40004800 	.word	0x40004800

08000f68 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	615a      	str	r2, [r3, #20]
 8000f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <MX_FMC_Init+0xf0>)
 8000f82:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f86:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <MX_FMC_Init+0xf0>)
 8000f8a:	4a34      	ldr	r2, [pc, #208]	; (800105c <MX_FMC_Init+0xf4>)
 8000f8c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <MX_FMC_Init+0xf0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f94:	4b30      	ldr	r3, [pc, #192]	; (8001058 <MX_FMC_Init+0xf0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_FMC_Init+0xf0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_FMC_Init+0xf0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fea:	230f      	movs	r3, #15
 8000fec:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000ff2:	23ff      	movs	r3, #255	; 0xff
 8000ff4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000ffe:	2311      	movs	r3, #17
 8001000:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	4812      	ldr	r0, [pc, #72]	; (8001058 <MX_FMC_Init+0xf0>)
 800100e:	f002 fa07 	bl	8003420 <HAL_SRAM_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8001018:	f000 f8d0 	bl	80011bc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  // overwrite
  Timing.AddressSetupTime = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 7;
 8001024:	2307      	movs	r3, #7
 8001026:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 2;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_FMC_Init+0xf0>)
 8001040:	f002 f9ee 	bl	8003420 <HAL_SRAM_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_FMC_Init+0xe6>
  {
    Error_Handler();
 800104a:	f000 f8b7 	bl	80011bc <Error_Handler>
  }
  /* USER CODE END FMC_Init 2 */
}
 800104e:	bf00      	nop
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20001f94 	.word	0x20001f94
 800105c:	a0000104 	.word	0xa0000104

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001076:	4b4d      	ldr	r3, [pc, #308]	; (80011ac <MX_GPIO_Init+0x14c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <MX_GPIO_Init+0x14c>)
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <MX_GPIO_Init+0x14c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b47      	ldr	r3, [pc, #284]	; (80011ac <MX_GPIO_Init+0x14c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a46      	ldr	r2, [pc, #280]	; (80011ac <MX_GPIO_Init+0x14c>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b44      	ldr	r3, [pc, #272]	; (80011ac <MX_GPIO_Init+0x14c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a40      	ldr	r2, [pc, #256]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a3a      	ldr	r2, [pc, #232]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b35      	ldr	r3, [pc, #212]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a34      	ldr	r2, [pc, #208]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b32      	ldr	r3, [pc, #200]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <MX_GPIO_Init+0x14c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <MX_GPIO_Init+0x14c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a28      	ldr	r2, [pc, #160]	; (80011ac <MX_GPIO_Init+0x14c>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MX_GPIO_Init+0x14c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ledGREEN_Pin|ledRED_Pin|ledBLUE_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f244 0181 	movw	r1, #16513	; 0x4081
 8001124:	4822      	ldr	r0, [pc, #136]	; (80011b0 <MX_GPIO_Init+0x150>)
 8001126:	f001 f8ed 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5x00_RST_GPIO_Port, W5x00_RST_Pin, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	4820      	ldr	r0, [pc, #128]	; (80011b4 <MX_GPIO_Init+0x154>)
 8001132:	f001 f8e7 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : W5x00_BRDY0_Pin W5x00_BRDY1_Pin W5x00_BRDY2_Pin W5x00_BRDY3_Pin */
  GPIO_InitStruct.Pin = W5x00_BRDY0_Pin|W5x00_BRDY1_Pin|W5x00_BRDY2_Pin|W5x00_BRDY3_Pin;
 8001136:	233c      	movs	r3, #60	; 0x3c
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	481b      	ldr	r0, [pc, #108]	; (80011b8 <MX_GPIO_Init+0x158>)
 800114a:	f000 ff27 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : buttonUSER_Pin W5x00_INT_Pin */
  GPIO_InitStruct.Pin = buttonUSER_Pin|W5x00_INT_Pin;
 800114e:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <MX_GPIO_Init+0x154>)
 8001164:	f000 ff1a 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ledGREEN_Pin ledRED_Pin ledBLUE_Pin */
  GPIO_InitStruct.Pin = ledGREEN_Pin|ledRED_Pin|ledBLUE_Pin;
 8001168:	f244 0381 	movw	r3, #16513	; 0x4081
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <MX_GPIO_Init+0x150>)
 8001182:	f000 ff0b 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_RST_Pin */
  GPIO_InitStruct.Pin = W5x00_RST_Pin;
 8001186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5x00_RST_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_GPIO_Init+0x154>)
 80011a0:	f000 fefc 	bl	8001f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a4:	bf00      	nop
 80011a6:	3730      	adds	r7, #48	; 0x30
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40021000 	.word	0x40021000

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x44>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x44>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x44>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x44>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x44>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x44>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a15      	ldr	r2, [pc, #84]	; (8001284 <HAL_ADC_MspInit+0x74>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d123      	bne.n	800127a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_ADC_MspInit+0x78>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_ADC_MspInit+0x78>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_ADC_MspInit+0x78>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_ADC_MspInit+0x78>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_ADC_MspInit+0x78>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_ADC_MspInit+0x78>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001262:	2308      	movs	r3, #8
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001266:	2303      	movs	r3, #3
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_ADC_MspInit+0x7c>)
 8001276:	f000 fe91 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40012000 	.word	0x40012000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a0:	d113      	bne.n	80012ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_TIM_Base_MspInit+0x44>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <HAL_TIM_Base_MspInit+0x44>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_TIM_Base_MspInit+0x44>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	201c      	movs	r0, #28
 80012c0:	f000 fe2f 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012c4:	201c      	movs	r0, #28
 80012c6:	f000 fe48 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f8:	d11b      	bne.n	8001332 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_TIM_MspPostInit+0x64>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_TIM_MspPostInit+0x64>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_TIM_MspPostInit+0x64>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001312:	2307      	movs	r3, #7
 8001314:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001322:	2301      	movs	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	4619      	mov	r1, r3
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <HAL_TIM_MspPostInit+0x68>)
 800132e:	f000 fe35 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0aa      	sub	sp, #168	; 0xa8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f007 ff07 	bl	8009178 <memset>
  if(huart->Instance==USART3)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <HAL_UART_MspInit+0xb4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d13c      	bne.n	80013ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800137a:	2300      	movs	r3, #0
 800137c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fd02 	bl	8002d8c <HAL_RCCEx_PeriphCLKConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800138e:	f7ff ff15 	bl	80011bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_UART_MspInit+0xb8>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_UART_MspInit+0xb8>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_UART_MspInit+0xb8>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_UART_MspInit+0xb8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a13      	ldr	r2, [pc, #76]	; (80013fc <HAL_UART_MspInit+0xb8>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_UART_MspInit+0xb8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013dc:	2307      	movs	r3, #7
 80013de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_UART_MspInit+0xbc>)
 80013ea:	f000 fdd7 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	37a8      	adds	r7, #168	; 0xa8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40004800 	.word	0x40004800
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800

08001404 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_FMC_MspInit+0xa4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d13f      	bne.n	80014a0 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_FMC_MspInit+0xa4>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_FMC_MspInit+0xa8>)
 8001428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142a:	4a20      	ldr	r2, [pc, #128]	; (80014ac <HAL_FMC_MspInit+0xa8>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6393      	str	r3, [r2, #56]	; 0x38
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_FMC_MspInit+0xa8>)
 8001434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800143e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001442:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001450:	230c      	movs	r3, #12
 8001452:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4815      	ldr	r0, [pc, #84]	; (80014b0 <HAL_FMC_MspInit+0xac>)
 800145a:	f000 fd9f 	bl	8001f9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800145e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001462:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001470:	230c      	movs	r3, #12
 8001472:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	480e      	ldr	r0, [pc, #56]	; (80014b4 <HAL_FMC_MspInit+0xb0>)
 800147a:	f000 fd8f 	bl	8001f9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800147e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001482:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001490:	230c      	movs	r3, #12
 8001492:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <HAL_FMC_MspInit+0xb4>)
 800149a:	f000 fd7f 	bl	8001f9c <HAL_GPIO_Init>
 800149e:	e000      	b.n	80014a2 <HAL_FMC_MspInit+0x9e>
    return;
 80014a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200000bc 	.word	0x200000bc
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40020c00 	.word	0x40020c00

080014bc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014c4:	f7ff ff9e 	bl	8001404 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 f94e 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001520:	f000 fd35 	bl	8001f8e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <TIM2_IRQHandler+0x10>)
 800152e:	f002 f971 	bl	8003814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000202c 	.word	0x2000202c

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001556:	f007 ff0f 	bl	8009378 <__errno>
 800155a:	4603      	mov	r3, r0
 800155c:	2216      	movs	r2, #22
 800155e:	601a      	str	r2, [r3, #0]
  return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_exit>:

void _exit (int status)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffe7 	bl	800154c <_kill>
  while (1) {}    /* Make sure we hang here */
 800157e:	e7fe      	b.n	800157e <_exit+0x12>

08001580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e00a      	b.n	80015a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001592:	f3af 8000 	nop.w
 8001596:	4601      	mov	r1, r0
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	b2ca      	uxtb	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf0      	blt.n	8001592 <_read+0x12>
  }

  return len;
 80015b0:	687b      	ldr	r3, [r7, #4]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e009      	b.n	80015e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff f809 	bl	80005ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf1      	blt.n	80015cc <_write+0x12>
  }
  return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_close>:

int _close(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	605a      	str	r2, [r3, #4]
  return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_isatty>:

int _isatty(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f007 fe74 	bl	8009378 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20040000 	.word	0x20040000
 80016bc:	00008000 	.word	0x00008000
 80016c0:	200000c0 	.word	0x200000c0
 80016c4:	20002280 	.word	0x20002280

080016c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e4:	4c0b      	ldr	r4, [pc, #44]	; (8001714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016f2:	f000 f813 	bl	800171c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f007 fe45 	bl	8009384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fa:	f7ff fa69 	bl	8000bd0 <main>
  bx  lr    
 80016fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001700:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800170c:	0801952c 	.word	0x0801952c
  ldr r2, =_sbss
 8001710:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001714:	2000227c 	.word	0x2000227c

08001718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC_IRQHandler>
	...

0800171c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <SystemInit+0x20>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <SystemInit+0x20>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001744:	2003      	movs	r0, #3
 8001746:	f000 fbe1 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174a:	2000      	movs	r0, #0
 800174c:	f000 f806 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001750:	f7ff fd3a 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fbfb 	bl	8001f76 <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 fbc3 	bl	8001f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008
 80017e0:	20002078 	.word	0x20002078

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20002078 	.word	0x20002078

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_Delay+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008

08001844 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e031      	b.n	80018be <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fcd4 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	d116      	bne.n	80018b0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_ADC_Init+0x84>)
 8001888:	4013      	ands	r3, r2
 800188a:	f043 0202 	orr.w	r2, r3, #2
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f970 	bl	8001b78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f023 0303 	bic.w	r3, r3, #3
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
 80018ae:	e001      	b.n	80018b4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	ffffeefd 	.word	0xffffeefd

080018cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x1c>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e136      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x28a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	d93a      	bls.n	800196e <HAL_ADC_ConfigChannel+0xa2>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001900:	d035      	beq.n	800196e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68d9      	ldr	r1, [r3, #12]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	3b1e      	subs	r3, #30
 8001918:	2207      	movs	r2, #7
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	400a      	ands	r2, r1
 8001926:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a8d      	ldr	r2, [pc, #564]	; (8001b64 <HAL_ADC_ConfigChannel+0x298>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d10a      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68d9      	ldr	r1, [r3, #12]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	061a      	lsls	r2, r3, #24
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001946:	e035      	b.n	80019b4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68d9      	ldr	r1, [r3, #12]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	4603      	mov	r3, r0
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4403      	add	r3, r0
 8001960:	3b1e      	subs	r3, #30
 8001962:	409a      	lsls	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196c:	e022      	b.n	80019b4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6919      	ldr	r1, [r3, #16]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	2207      	movs	r2, #7
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43da      	mvns	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	400a      	ands	r2, r1
 8001990:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6919      	ldr	r1, [r3, #16]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	4603      	mov	r3, r0
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4403      	add	r3, r0
 80019aa:	409a      	lsls	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b06      	cmp	r3, #6
 80019ba:	d824      	bhi.n	8001a06 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3b05      	subs	r3, #5
 80019ce:	221f      	movs	r2, #31
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43da      	mvns	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	400a      	ands	r2, r1
 80019dc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3b05      	subs	r3, #5
 80019f8:	fa00 f203 	lsl.w	r2, r0, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34
 8001a04:	e04c      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d824      	bhi.n	8001a58 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b23      	subs	r3, #35	; 0x23
 8001a20:	221f      	movs	r2, #31
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	3b23      	subs	r3, #35	; 0x23
 8001a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
 8001a56:	e023      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b41      	subs	r3, #65	; 0x41
 8001a6a:	221f      	movs	r2, #31
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43da      	mvns	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	400a      	ands	r2, r1
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	3b41      	subs	r3, #65	; 0x41
 8001a94:	fa00 f203 	lsl.w	r2, r0, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a30      	ldr	r2, [pc, #192]	; (8001b68 <HAL_ADC_ConfigChannel+0x29c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10a      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1f4>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001aba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001abe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a28      	ldr	r2, [pc, #160]	; (8001b68 <HAL_ADC_ConfigChannel+0x29c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10f      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d10b      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ad8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001adc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ae4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ae8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_ADC_ConfigChannel+0x29c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d12b      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x280>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1a      	ldr	r2, [pc, #104]	; (8001b64 <HAL_ADC_ConfigChannel+0x298>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d003      	beq.n	8001b06 <HAL_ADC_ConfigChannel+0x23a>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b11      	cmp	r3, #17
 8001b04:	d122      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001b0c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b10:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001b18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b1c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_ADC_ConfigChannel+0x298>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d111      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_ADC_ConfigChannel+0x2a4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a11      	ldr	r2, [pc, #68]	; (8001b74 <HAL_ADC_ConfigChannel+0x2a8>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9a      	lsrs	r2, r3, #18
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b3e:	e002      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f9      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	10000012 	.word	0x10000012
 8001b68:	40012000 	.word	0x40012000
 8001b6c:	40012300 	.word	0x40012300
 8001b70:	20000000 	.word	0x20000000
 8001b74:	431bde83 	.word	0x431bde83

08001b78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b80:	4b78      	ldr	r3, [pc, #480]	; (8001d64 <ADC_Init+0x1ec>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a77      	ldr	r2, [pc, #476]	; (8001d64 <ADC_Init+0x1ec>)
 8001b86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b8a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b8c:	4b75      	ldr	r3, [pc, #468]	; (8001d64 <ADC_Init+0x1ec>)
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4973      	ldr	r1, [pc, #460]	; (8001d64 <ADC_Init+0x1ec>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	021a      	lsls	r2, r3, #8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6899      	ldr	r1, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <ADC_Init+0x1f0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d022      	beq.n	8001c52 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6899      	ldr	r1, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6899      	ldr	r1, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	e00f      	b.n	8001c72 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0202 	bic.w	r2, r2, #2
 8001c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6899      	ldr	r1, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	005a      	lsls	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01b      	beq.n	8001cd8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	035a      	lsls	r2, r3, #13
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	e007      	b.n	8001ce8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	051a      	lsls	r2, r3, #20
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d2a:	025a      	lsls	r2, r3, #9
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6899      	ldr	r1, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	029a      	lsls	r2, r3, #10
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40012300 	.word	0x40012300
 8001d68:	0f000001 	.word	0x0f000001

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <__NVIC_SetPriorityGrouping+0x40>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	; (8001dac <__NVIC_SetPriorityGrouping+0x40>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00
 8001db0:	05fa0000 	.word	0x05fa0000

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4907      	ldr	r1, [pc, #28]	; (8001e08 <__NVIC_EnableIRQ+0x38>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f7ff ff8e 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff29 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff3e 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5d 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff31 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffa2 	bl	8001ec8 <SysTick_Config>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f92:	f006 fdc5 	bl	8008b20 <HAL_SYSTICK_Callback>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e169      	b.n	8002290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 8158 	bne.w	800228a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d005      	beq.n	8001ff2 <HAL_GPIO_Init+0x56>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d130      	bne.n	8002054 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 0201 	and.w	r2, r3, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b03      	cmp	r3, #3
 800205e:	d017      	beq.n	8002090 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d123      	bne.n	80020e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b2 	beq.w	800228a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	4b60      	ldr	r3, [pc, #384]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_GPIO_Init+0x30c>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800213e:	4a5b      	ldr	r2, [pc, #364]	; (80022ac <HAL_GPIO_Init+0x310>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_GPIO_Init+0x314>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x226>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_GPIO_Init+0x318>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x222>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x31c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x21e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_GPIO_Init+0x320>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x21a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x216>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4d      	ldr	r2, [pc, #308]	; (80022c4 <HAL_GPIO_Init+0x328>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x212>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_GPIO_Init+0x32c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x20e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <HAL_GPIO_Init+0x330>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x20a>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00e      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021a6:	2308      	movs	r3, #8
 80021a8:	e00c      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e00a      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021ae:	2305      	movs	r3, #5
 80021b0:	e008      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021b2:	2304      	movs	r3, #4
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e004      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_GPIO_Init+0x228>
 80021c2:	2300      	movs	r3, #0
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f002 0203 	and.w	r2, r2, #3
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	4093      	lsls	r3, r2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021d4:	4935      	ldr	r1, [pc, #212]	; (80022ac <HAL_GPIO_Init+0x310>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_GPIO_Init+0x334>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002206:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	f67f ae92 	bls.w	8001fbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40007000 	.word	0x40007000

08002358 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1d      	ldr	r2, [pc, #116]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002386:	f7ff fa2d 	bl	80017e4 <HAL_GetTick>
 800238a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800238c:	e009      	b.n	80023a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800238e:	f7ff fa29 	bl	80017e4 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239c:	d901      	bls.n	80023a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e022      	b.n	80023e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ae:	d1ee      	bne.n	800238e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023b0:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023bc:	f7ff fa12 	bl	80017e4 <HAL_GetTick>
 80023c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023c2:	e009      	b.n	80023d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023c4:	f7ff fa0e 	bl	80017e4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d2:	d901      	bls.n	80023d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e007      	b.n	80023e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023e4:	d1ee      	bne.n	80023c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40007000 	.word	0x40007000

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002400:	2300      	movs	r3, #0
 8002402:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e291      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8087 	beq.w	800252a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800241c:	4b96      	ldr	r3, [pc, #600]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b04      	cmp	r3, #4
 8002426:	d00c      	beq.n	8002442 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002428:	4b93      	ldr	r3, [pc, #588]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d112      	bne.n	800245a <HAL_RCC_OscConfig+0x62>
 8002434:	4b90      	ldr	r3, [pc, #576]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002440:	d10b      	bne.n	800245a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002442:	4b8d      	ldr	r3, [pc, #564]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d06c      	beq.n	8002528 <HAL_RCC_OscConfig+0x130>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d168      	bne.n	8002528 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e26b      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x7a>
 8002464:	4b84      	ldr	r3, [pc, #528]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a83      	ldr	r2, [pc, #524]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e02e      	b.n	80024d0 <HAL_RCC_OscConfig+0xd8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x9c>
 800247a:	4b7f      	ldr	r3, [pc, #508]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a7e      	ldr	r2, [pc, #504]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b7c      	ldr	r3, [pc, #496]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7b      	ldr	r2, [pc, #492]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 800248c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e01d      	b.n	80024d0 <HAL_RCC_OscConfig+0xd8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0xc0>
 800249e:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a75      	ldr	r2, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b73      	ldr	r3, [pc, #460]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a72      	ldr	r2, [pc, #456]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xd8>
 80024b8:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80024be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b6c      	ldr	r3, [pc, #432]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a6b      	ldr	r2, [pc, #428]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7ff f984 	bl	80017e4 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff f980 	bl	80017e4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e21f      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b61      	ldr	r3, [pc, #388]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xe8>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7ff f970 	bl	80017e4 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff f96c 	bl	80017e4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e20b      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x110>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d069      	beq.n	800260a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002536:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b4d      	ldr	r3, [pc, #308]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b08      	cmp	r3, #8
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x190>
 800254e:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x17a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1df      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	493d      	ldr	r1, [pc, #244]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	e040      	b.n	800260a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d023      	beq.n	80025d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a38      	ldr	r2, [pc, #224]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7ff f922 	bl	80017e4 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a4:	f7ff f91e 	bl	80017e4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1bd      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4929      	ldr	r1, [pc, #164]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
 80025d6:	e018      	b.n	800260a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a26      	ldr	r2, [pc, #152]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7ff f8fe 	bl	80017e4 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ec:	f7ff f8fa 	bl	80017e4 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e199      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d038      	beq.n	8002688 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d019      	beq.n	8002652 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002622:	4a15      	ldr	r2, [pc, #84]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7ff f8db 	bl	80017e4 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002632:	f7ff f8d7 	bl	80017e4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e176      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x23a>
 8002650:	e01a      	b.n	8002688 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <HAL_RCC_OscConfig+0x280>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7ff f8c1 	bl	80017e4 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002666:	f7ff f8bd 	bl	80017e4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d903      	bls.n	800267c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e15c      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
 8002678:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	4b91      	ldr	r3, [pc, #580]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 800267e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ee      	bne.n	8002666 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80a4 	beq.w	80027de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b8b      	ldr	r3, [pc, #556]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a87      	ldr	r2, [pc, #540]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026be:	4b82      	ldr	r3, [pc, #520]	; (80028c8 <HAL_RCC_OscConfig+0x4d0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <HAL_RCC_OscConfig+0x4d0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7e      	ldr	r2, [pc, #504]	; (80028c8 <HAL_RCC_OscConfig+0x4d0>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7ff f885 	bl	80017e4 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7ff f881 	bl	80017e4 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b64      	cmp	r3, #100	; 0x64
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e120      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f0:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x4d0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x31a>
 8002704:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a6e      	ldr	r2, [pc, #440]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	e02d      	b.n	800276e <HAL_RCC_OscConfig+0x376>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x33c>
 800271a:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a66      	ldr	r2, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	e01c      	b.n	800276e <HAL_RCC_OscConfig+0x376>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_OscConfig+0x35e>
 800273c:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a60      	ldr	r2, [pc, #384]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	4b5e      	ldr	r3, [pc, #376]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	4a5d      	ldr	r2, [pc, #372]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6713      	str	r3, [r2, #112]	; 0x70
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0x376>
 8002756:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a5a      	ldr	r2, [pc, #360]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
 8002762:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d015      	beq.n	80027a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7ff f835 	bl	80017e4 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7ff f831 	bl	80017e4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0ce      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002794:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ee      	beq.n	800277e <HAL_RCC_OscConfig+0x386>
 80027a0:	e014      	b.n	80027cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a2:	f7ff f81f 	bl	80017e4 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7ff f81b 	bl	80017e4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e0b8      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1ee      	bne.n	80027aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a3b      	ldr	r2, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80a4 	beq.w	8002930 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e8:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d06b      	beq.n	80028cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d149      	bne.n	8002890 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fc:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a30      	ldr	r2, [pc, #192]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe ffec 	bl	80017e4 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe ffe8 	bl	80017e4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e087      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	3b01      	subs	r3, #1
 8002848:	041b      	lsls	r3, r3, #16
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	4313      	orrs	r3, r2
 8002854:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002856:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800285a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe ffbc 	bl	80017e4 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe ffb8 	bl	80017e4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e057      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x478>
 800288e:	e04f      	b.n	8002930 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe ffa2 	bl	80017e4 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe ff9e 	bl	80017e4 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e03d      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b6:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_RCC_OscConfig+0x4cc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4ac>
 80028c2:	e035      	b.n	8002930 <HAL_RCC_OscConfig+0x538>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x544>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d028      	beq.n	800292c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d121      	bne.n	800292c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d11a      	bne.n	800292c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002902:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002904:	4293      	cmp	r3, r2
 8002906:	d111      	bne.n	800292c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d107      	bne.n	800292c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0d0      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d910      	bls.n	8002988 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b67      	ldr	r3, [pc, #412]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 020f 	bic.w	r2, r3, #15
 800296e:	4965      	ldr	r1, [pc, #404]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b63      	ldr	r3, [pc, #396]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0b8      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a0:	4b59      	ldr	r3, [pc, #356]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4a58      	ldr	r2, [pc, #352]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 80029a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b8:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 80029be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	494d      	ldr	r1, [pc, #308]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d040      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d115      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e07f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e073      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e06b      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4936      	ldr	r1, [pc, #216]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a34:	f7fe fed6 	bl	80017e4 <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fe fed2 	bl	80017e4 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e053      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d210      	bcs.n	8002a94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 020f 	bic.w	r2, r3, #15
 8002a7a:	4922      	ldr	r1, [pc, #136]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e032      	b.n	8002afa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa0:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4916      	ldr	r1, [pc, #88]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	490e      	ldr	r1, [pc, #56]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ad2:	f000 f821 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	490a      	ldr	r1, [pc, #40]	; (8002b0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ae4:	5ccb      	ldrb	r3, [r1, r3]
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <HAL_RCC_ClockConfig+0x1d0>)
 8002aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_RCC_ClockConfig+0x1d4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fe32 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	08019310 	.word	0x08019310
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000004 	.word	0x20000004

08002b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b1c:	b094      	sub	sp, #80	; 0x50
 8002b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	647b      	str	r3, [r7, #68]	; 0x44
 8002b24:	2300      	movs	r3, #0
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b28:	2300      	movs	r3, #0
 8002b2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b30:	4b79      	ldr	r3, [pc, #484]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d00d      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x40>
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	f200 80e1 	bhi.w	8002d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x34>
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b4a:	e0db      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b4c:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b50:	e0db      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b52:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b56:	e0d8      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b58:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b60:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b62:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d063      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	2200      	movs	r2, #0
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
 8002b82:	2300      	movs	r3, #0
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
 8002b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	462b      	mov	r3, r5
 8002b8e:	f04f 0000 	mov.w	r0, #0
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	0159      	lsls	r1, r3, #5
 8002b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b9c:	0150      	lsls	r0, r2, #5
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	1a51      	subs	r1, r2, r1
 8002ba6:	6139      	str	r1, [r7, #16]
 8002ba8:	4629      	mov	r1, r5
 8002baa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	018b      	lsls	r3, r1, #6
 8002bc0:	4651      	mov	r1, sl
 8002bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	018a      	lsls	r2, r1, #6
 8002bca:	4651      	mov	r1, sl
 8002bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8002bd0:	4659      	mov	r1, fp
 8002bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bea:	4690      	mov	r8, r2
 8002bec:	4699      	mov	r9, r3
 8002bee:	4623      	mov	r3, r4
 8002bf0:	eb18 0303 	adds.w	r3, r8, r3
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	462b      	mov	r3, r5
 8002bf8:	eb49 0303 	adc.w	r3, r9, r3
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	024b      	lsls	r3, r1, #9
 8002c0e:	4621      	mov	r1, r4
 8002c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c14:	4621      	mov	r1, r4
 8002c16:	024a      	lsls	r2, r1, #9
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1e:	2200      	movs	r2, #0
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c28:	f7fd fb62 	bl	80002f0 <__aeabi_uldivmod>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4613      	mov	r3, r2
 8002c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c34:	e058      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c36:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	4611      	mov	r1, r2
 8002c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c46:	623b      	str	r3, [r7, #32]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c50:	4642      	mov	r2, r8
 8002c52:	464b      	mov	r3, r9
 8002c54:	f04f 0000 	mov.w	r0, #0
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	0159      	lsls	r1, r3, #5
 8002c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c62:	0150      	lsls	r0, r2, #5
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4641      	mov	r1, r8
 8002c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c6e:	4649      	mov	r1, r9
 8002c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c88:	ebb2 040a 	subs.w	r4, r2, sl
 8002c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	00eb      	lsls	r3, r5, #3
 8002c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9e:	00e2      	lsls	r2, r4, #3
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	461d      	mov	r5, r3
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	18e3      	adds	r3, r4, r3
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	464b      	mov	r3, r9
 8002cac:	eb45 0303 	adc.w	r3, r5, r3
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	028b      	lsls	r3, r1, #10
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc8:	4621      	mov	r1, r4
 8002cca:	028a      	lsls	r2, r1, #10
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	61fa      	str	r2, [r7, #28]
 8002cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cdc:	f7fd fb08 	bl	80002f0 <__aeabi_uldivmod>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d02:	e002      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3750      	adds	r7, #80	; 0x50
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	00f42400 	.word	0x00f42400
 8002d20:	007a1200 	.word	0x007a1200

08002d24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000000 	.word	0x20000000

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d40:	f7ff fff0 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	0a9b      	lsrs	r3, r3, #10
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	; (8002d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	08019320 	.word	0x08019320

08002d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d68:	f7ff ffdc 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0b5b      	lsrs	r3, r3, #13
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	; (8002d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	08019320 	.word	0x08019320

08002d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d012      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002db0:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a64      	ldr	r2, [pc, #400]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002db6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dba:	6093      	str	r3, [r2, #8]
 8002dbc:	4b62      	ldr	r3, [pc, #392]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4960      	ldr	r1, [pc, #384]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d017      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de2:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	4955      	ldr	r1, [pc, #340]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e00:	d101      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d017      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	4946      	ldr	r1, [pc, #280]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 808b 	beq.w	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	4a39      	ldr	r2, [pc, #228]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e66:	6413      	str	r3, [r2, #64]	; 0x40
 8002e68:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a34      	ldr	r2, [pc, #208]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e80:	f7fe fcb0 	bl	80017e4 <HAL_GetTick>
 8002e84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7fe fcac 	bl	80017e4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e2bc      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ea6:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d035      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d02e      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ecc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ee6:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d114      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fc74 	bl	80017e4 <HAL_GetTick>
 8002efc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	f7fe fc70 	bl	80017e4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e27e      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0ee      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f2e:	d111      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f3e:	400b      	ands	r3, r1
 8002f40:	4901      	ldr	r1, [pc, #4]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	0ffffcff 	.word	0x0ffffcff
 8002f54:	4ba4      	ldr	r3, [pc, #656]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4aa3      	ldr	r2, [pc, #652]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f5e:	6093      	str	r3, [r2, #8]
 8002f60:	4ba1      	ldr	r3, [pc, #644]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	499e      	ldr	r1, [pc, #632]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f7e:	4b9a      	ldr	r3, [pc, #616]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f84:	4a98      	ldr	r2, [pc, #608]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f8e:	4b96      	ldr	r3, [pc, #600]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	4993      	ldr	r1, [pc, #588]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fac:	4b8e      	ldr	r3, [pc, #568]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	498b      	ldr	r1, [pc, #556]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fce:	4b86      	ldr	r3, [pc, #536]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fdc:	4982      	ldr	r1, [pc, #520]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ff0:	4b7d      	ldr	r3, [pc, #500]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ffe:	497a      	ldr	r1, [pc, #488]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003012:	4b75      	ldr	r3, [pc, #468]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f023 0203 	bic.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	4971      	ldr	r1, [pc, #452]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003034:	4b6c      	ldr	r3, [pc, #432]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f023 020c 	bic.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4969      	ldr	r1, [pc, #420]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003056:	4b64      	ldr	r3, [pc, #400]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	4960      	ldr	r1, [pc, #384]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003078:	4b5b      	ldr	r3, [pc, #364]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	4958      	ldr	r1, [pc, #352]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800309a:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	494f      	ldr	r1, [pc, #316]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	4947      	ldr	r1, [pc, #284]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030de:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	493e      	ldr	r1, [pc, #248]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003100:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	4936      	ldr	r1, [pc, #216]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d011      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	492d      	ldr	r1, [pc, #180]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003140:	d101      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003142:	2301      	movs	r3, #1
 8003144:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003152:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003158:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003160:	4921      	ldr	r1, [pc, #132]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003182:	4919      	ldr	r1, [pc, #100]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a4:	4910      	ldr	r1, [pc, #64]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d006      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 809d 	beq.w	80032fa <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031cc:	f7fe fb0a 	bl	80017e4 <HAL_GetTick>
 80031d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031d2:	e00b      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031d4:	f7fe fb06 	bl	80017e4 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d904      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e116      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031ec:	4b8b      	ldr	r3, [pc, #556]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1ed      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d017      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d113      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800320c:	4b83      	ldr	r3, [pc, #524]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800320e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003212:	0e1b      	lsrs	r3, r3, #24
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	019a      	lsls	r2, r3, #6
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	061b      	lsls	r3, r3, #24
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	071b      	lsls	r3, r3, #28
 800322c:	497b      	ldr	r1, [pc, #492]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003252:	2b00      	cmp	r3, #0
 8003254:	d024      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325e:	d11f      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003260:	4b6e      	ldr	r3, [pc, #440]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003266:	0f1b      	lsrs	r3, r3, #28
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	019a      	lsls	r2, r3, #6
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	431a      	orrs	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	071b      	lsls	r3, r3, #28
 8003280:	4966      	ldr	r1, [pc, #408]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003288:	4b64      	ldr	r3, [pc, #400]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800328a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328e:	f023 021f 	bic.w	r2, r3, #31
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	3b01      	subs	r3, #1
 8003298:	4960      	ldr	r1, [pc, #384]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	019a      	lsls	r2, r3, #6
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	071b      	lsls	r3, r3, #28
 80032c0:	4956      	ldr	r1, [pc, #344]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032c8:	4b54      	ldr	r3, [pc, #336]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a53      	ldr	r2, [pc, #332]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80032ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d4:	f7fe fa86 	bl	80017e4 <HAL_GetTick>
 80032d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032dc:	f7fe fa82 	bl	80017e4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	; 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e092      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ee:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	f040 8088 	bne.w	8003412 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003302:	4b46      	ldr	r3, [pc, #280]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a45      	ldr	r2, [pc, #276]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330e:	f7fe fa69 	bl	80017e4 <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003316:	f7fe fa65 	bl	80017e4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b64      	cmp	r3, #100	; 0x64
 8003322:	d901      	bls.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e075      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003328:	4b3c      	ldr	r3, [pc, #240]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003334:	d0ef      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003352:	2b00      	cmp	r3, #0
 8003354:	d024      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	2b00      	cmp	r3, #0
 800335c:	d120      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800335e:	4b2f      	ldr	r3, [pc, #188]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	019a      	lsls	r2, r3, #6
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	041b      	lsls	r3, r3, #16
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	4927      	ldr	r1, [pc, #156]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003386:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	3b01      	subs	r3, #1
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	4920      	ldr	r1, [pc, #128]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d018      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x652>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b4:	d113      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80033b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033bc:	0e1b      	lsrs	r3, r3, #24
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	019a      	lsls	r2, r3, #6
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	431a      	orrs	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	4911      	ldr	r1, [pc, #68]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a0e      	ldr	r2, [pc, #56]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80033e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ea:	f7fe f9fb 	bl	80017e4 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033f2:	f7fe f9f7 	bl	80017e4 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b64      	cmp	r3, #100	; 0x64
 80033fe:	d901      	bls.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e007      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800340c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003410:	d1ef      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800

08003420 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e038      	b.n	80034a8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7fe f836 	bl	80014bc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3308      	adds	r3, #8
 8003458:	4619      	mov	r1, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f001 fe4a 	bl	80050f4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	461a      	mov	r2, r3
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	f001 fed2 	bl	8005214 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6858      	ldr	r0, [r3, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	f001 ff19 	bl	80052b4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	6892      	ldr	r2, [r2, #8]
 800348a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	6892      	ldr	r2, [r2, #8]
 8003496:	f041 0101 	orr.w	r1, r1, #1
 800349a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e049      	b.n	8003556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd feda 	bl	8001290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f000 fcc0 	bl	8003e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e049      	b.n	8003604 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f841 	bl	800360c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f000 fc69 	bl	8003e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <HAL_TIM_PWM_Start+0x24>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	e03c      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b04      	cmp	r3, #4
 8003648:	d109      	bne.n	800365e <HAL_TIM_PWM_Start+0x3e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e02f      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d109      	bne.n	8003678 <HAL_TIM_PWM_Start+0x58>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	e022      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d109      	bne.n	8003692 <HAL_TIM_PWM_Start+0x72>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e015      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b10      	cmp	r3, #16
 8003696:	d109      	bne.n	80036ac <HAL_TIM_PWM_Start+0x8c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e008      	b.n	80036be <HAL_TIM_PWM_Start+0x9e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e092      	b.n	80037ec <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <HAL_TIM_PWM_Start+0xb6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d4:	e023      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_PWM_Start+0xc6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e4:	e01b      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start+0xd6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f4:	e013      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0xe6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003704:	e00b      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b10      	cmp	r3, #16
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0xf6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003714:	e003      	b.n	800371e <HAL_TIM_PWM_Start+0xfe>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2201      	movs	r2, #1
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 ff3c 	bl	80045a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a30      	ldr	r2, [pc, #192]	; (80037f4 <HAL_TIM_PWM_Start+0x1d4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_PWM_Start+0x120>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2f      	ldr	r2, [pc, #188]	; (80037f8 <HAL_TIM_PWM_Start+0x1d8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_TIM_PWM_Start+0x124>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_TIM_PWM_Start+0x126>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a25      	ldr	r2, [pc, #148]	; (80037f4 <HAL_TIM_PWM_Start+0x1d4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <HAL_TIM_PWM_Start+0x18a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376c:	d01d      	beq.n	80037aa <HAL_TIM_PWM_Start+0x18a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a22      	ldr	r2, [pc, #136]	; (80037fc <HAL_TIM_PWM_Start+0x1dc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d018      	beq.n	80037aa <HAL_TIM_PWM_Start+0x18a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a20      	ldr	r2, [pc, #128]	; (8003800 <HAL_TIM_PWM_Start+0x1e0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_TIM_PWM_Start+0x18a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a1f      	ldr	r2, [pc, #124]	; (8003804 <HAL_TIM_PWM_Start+0x1e4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00e      	beq.n	80037aa <HAL_TIM_PWM_Start+0x18a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <HAL_TIM_PWM_Start+0x1d8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d009      	beq.n	80037aa <HAL_TIM_PWM_Start+0x18a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <HAL_TIM_PWM_Start+0x1e8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d004      	beq.n	80037aa <HAL_TIM_PWM_Start+0x18a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a19      	ldr	r2, [pc, #100]	; (800380c <HAL_TIM_PWM_Start+0x1ec>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d115      	bne.n	80037d6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <HAL_TIM_PWM_Start+0x1f0>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b06      	cmp	r3, #6
 80037ba:	d015      	beq.n	80037e8 <HAL_TIM_PWM_Start+0x1c8>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c2:	d011      	beq.n	80037e8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d4:	e008      	b.n	80037e8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e000      	b.n	80037ea <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40010400 	.word	0x40010400
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800
 8003804:	40000c00 	.word	0x40000c00
 8003808:	40014000 	.word	0x40014000
 800380c:	40001800 	.word	0x40001800
 8003810:	00010007 	.word	0x00010007

08003814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	d122      	bne.n	8003870 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b02      	cmp	r3, #2
 8003836:	d11b      	bne.n	8003870 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0202 	mvn.w	r2, #2
 8003840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 faee 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fae0 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 faf1 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b04      	cmp	r3, #4
 800387c:	d122      	bne.n	80038c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b04      	cmp	r3, #4
 800388a:	d11b      	bne.n	80038c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0204 	mvn.w	r2, #4
 8003894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fac4 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fab6 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fac7 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d122      	bne.n	8003918 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d11b      	bne.n	8003918 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0208 	mvn.w	r2, #8
 80038e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2204      	movs	r2, #4
 80038ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa9a 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 8003904:	e005      	b.n	8003912 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa8c 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fa9d 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b10      	cmp	r3, #16
 8003924:	d122      	bne.n	800396c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b10      	cmp	r3, #16
 8003932:	d11b      	bne.n	800396c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0210 	mvn.w	r2, #16
 800393c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2208      	movs	r2, #8
 8003942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa70 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 8003958:	e005      	b.n	8003966 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa62 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa73 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10e      	bne.n	8003998 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d107      	bne.n	8003998 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0201 	mvn.w	r2, #1
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fa3c 	bl	8003e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b80      	cmp	r3, #128	; 0x80
 80039a4:	d10e      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	2b80      	cmp	r3, #128	; 0x80
 80039b2:	d107      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 feae 	bl	8004720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d2:	d10e      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d107      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fea1 	bl	8004734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d10e      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d107      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fa21 	bl	8003e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d10e      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d107      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f06f 0220 	mvn.w	r2, #32
 8003a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fe61 	bl	800470c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e0ff      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b14      	cmp	r3, #20
 8003a7e:	f200 80f0 	bhi.w	8003c62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a82:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003c63 	.word	0x08003c63
 8003a90:	08003c63 	.word	0x08003c63
 8003a94:	08003c63 	.word	0x08003c63
 8003a98:	08003b1d 	.word	0x08003b1d
 8003a9c:	08003c63 	.word	0x08003c63
 8003aa0:	08003c63 	.word	0x08003c63
 8003aa4:	08003c63 	.word	0x08003c63
 8003aa8:	08003b5f 	.word	0x08003b5f
 8003aac:	08003c63 	.word	0x08003c63
 8003ab0:	08003c63 	.word	0x08003c63
 8003ab4:	08003c63 	.word	0x08003c63
 8003ab8:	08003b9f 	.word	0x08003b9f
 8003abc:	08003c63 	.word	0x08003c63
 8003ac0:	08003c63 	.word	0x08003c63
 8003ac4:	08003c63 	.word	0x08003c63
 8003ac8:	08003be1 	.word	0x08003be1
 8003acc:	08003c63 	.word	0x08003c63
 8003ad0:	08003c63 	.word	0x08003c63
 8003ad4:	08003c63 	.word	0x08003c63
 8003ad8:	08003c21 	.word	0x08003c21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fa66 	bl	8003fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0208 	orr.w	r2, r2, #8
 8003af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0204 	bic.w	r2, r2, #4
 8003b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6999      	ldr	r1, [r3, #24]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	619a      	str	r2, [r3, #24]
      break;
 8003b1a:	e0a5      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fab8 	bl	8004098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6999      	ldr	r1, [r3, #24]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	021a      	lsls	r2, r3, #8
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	619a      	str	r2, [r3, #24]
      break;
 8003b5c:	e084      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fb0f 	bl	8004188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0208 	orr.w	r2, r2, #8
 8003b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0204 	bic.w	r2, r2, #4
 8003b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69d9      	ldr	r1, [r3, #28]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	61da      	str	r2, [r3, #28]
      break;
 8003b9c:	e064      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fb65 	bl	8004274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69d9      	ldr	r1, [r3, #28]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	021a      	lsls	r2, r3, #8
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	61da      	str	r2, [r3, #28]
      break;
 8003bde:	e043      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fb9c 	bl	8004324 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0208 	orr.w	r2, r2, #8
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0204 	bic.w	r2, r2, #4
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c1e:	e023      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fbce 	bl	80043c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	021a      	lsls	r2, r3, #8
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c60:	e002      	b.n	8003c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
      break;
 8003c66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop

08003c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIM_ConfigClockSource+0x1c>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e0b4      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x186>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	4b56      	ldr	r3, [pc, #344]	; (8003e0c <HAL_TIM_ConfigClockSource+0x190>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd0:	d03e      	beq.n	8003d50 <HAL_TIM_ConfigClockSource+0xd4>
 8003cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd6:	f200 8087 	bhi.w	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cde:	f000 8086 	beq.w	8003dee <HAL_TIM_ConfigClockSource+0x172>
 8003ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce6:	d87f      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b70      	cmp	r3, #112	; 0x70
 8003cea:	d01a      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0xa6>
 8003cec:	2b70      	cmp	r3, #112	; 0x70
 8003cee:	d87b      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf0:	2b60      	cmp	r3, #96	; 0x60
 8003cf2:	d050      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x11a>
 8003cf4:	2b60      	cmp	r3, #96	; 0x60
 8003cf6:	d877      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf8:	2b50      	cmp	r3, #80	; 0x50
 8003cfa:	d03c      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0xfa>
 8003cfc:	2b50      	cmp	r3, #80	; 0x50
 8003cfe:	d873      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d058      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x13a>
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d86f      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b30      	cmp	r3, #48	; 0x30
 8003d0a:	d064      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d0c:	2b30      	cmp	r3, #48	; 0x30
 8003d0e:	d86b      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d060      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d867      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d05c      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d05a      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d20:	e062      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d32:	f000 fc17 	bl	8004564 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	609a      	str	r2, [r3, #8]
      break;
 8003d4e:	e04f      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d60:	f000 fc00 	bl	8004564 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d72:	609a      	str	r2, [r3, #8]
      break;
 8003d74:	e03c      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 fb74 	bl	8004470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2150      	movs	r1, #80	; 0x50
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fbcd 	bl	800452e <TIM_ITRx_SetConfig>
      break;
 8003d94:	e02c      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da2:	461a      	mov	r2, r3
 8003da4:	f000 fb93 	bl	80044ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2160      	movs	r1, #96	; 0x60
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fbbd 	bl	800452e <TIM_ITRx_SetConfig>
      break;
 8003db4:	e01c      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f000 fb54 	bl	8004470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2140      	movs	r1, #64	; 0x40
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fbad 	bl	800452e <TIM_ITRx_SetConfig>
      break;
 8003dd4:	e00c      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f000 fba4 	bl	800452e <TIM_ITRx_SetConfig>
      break;
 8003de6:	e003      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      break;
 8003dec:	e000      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	fffeff88 	.word	0xfffeff88

08003e10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <TIM_Base_SetConfig+0x114>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e92:	d00f      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3d      	ldr	r2, [pc, #244]	; (8003f8c <TIM_Base_SetConfig+0x118>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3c      	ldr	r2, [pc, #240]	; (8003f90 <TIM_Base_SetConfig+0x11c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3b      	ldr	r2, [pc, #236]	; (8003f94 <TIM_Base_SetConfig+0x120>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3a      	ldr	r2, [pc, #232]	; (8003f98 <TIM_Base_SetConfig+0x124>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d108      	bne.n	8003ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2f      	ldr	r2, [pc, #188]	; (8003f88 <TIM_Base_SetConfig+0x114>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d02b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed4:	d027      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2c      	ldr	r2, [pc, #176]	; (8003f8c <TIM_Base_SetConfig+0x118>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d023      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <TIM_Base_SetConfig+0x11c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <TIM_Base_SetConfig+0x120>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a29      	ldr	r2, [pc, #164]	; (8003f98 <TIM_Base_SetConfig+0x124>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d017      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <TIM_Base_SetConfig+0x128>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <TIM_Base_SetConfig+0x12c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00f      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <TIM_Base_SetConfig+0x130>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a25      	ldr	r2, [pc, #148]	; (8003fa8 <TIM_Base_SetConfig+0x134>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a24      	ldr	r2, [pc, #144]	; (8003fac <TIM_Base_SetConfig+0x138>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <TIM_Base_SetConfig+0x13c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <TIM_Base_SetConfig+0x114>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_Base_SetConfig+0xf8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a0c      	ldr	r2, [pc, #48]	; (8003f98 <TIM_Base_SetConfig+0x124>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d103      	bne.n	8003f74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	615a      	str	r2, [r3, #20]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800
 8003fa8:	40001800 	.word	0x40001800
 8003fac:	40001c00 	.word	0x40001c00
 8003fb0:	40002000 	.word	0x40002000

08003fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0201 	bic.w	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <TIM_OC1_SetConfig+0xd8>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 0302 	bic.w	r3, r3, #2
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a21      	ldr	r2, [pc, #132]	; (8004090 <TIM_OC1_SetConfig+0xdc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_OC1_SetConfig+0x64>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a20      	ldr	r2, [pc, #128]	; (8004094 <TIM_OC1_SetConfig+0xe0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d10c      	bne.n	8004032 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f023 0308 	bic.w	r3, r3, #8
 800401e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a16      	ldr	r2, [pc, #88]	; (8004090 <TIM_OC1_SetConfig+0xdc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_OC1_SetConfig+0x8e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <TIM_OC1_SetConfig+0xe0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d111      	bne.n	8004066 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	fffeff8f 	.word	0xfffeff8f
 8004090:	40010000 	.word	0x40010000
 8004094:	40010400 	.word	0x40010400

08004098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f023 0210 	bic.w	r2, r3, #16
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4b2e      	ldr	r3, [pc, #184]	; (800417c <TIM_OC2_SetConfig+0xe4>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0320 	bic.w	r3, r3, #32
 80040e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a23      	ldr	r2, [pc, #140]	; (8004180 <TIM_OC2_SetConfig+0xe8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d003      	beq.n	8004100 <TIM_OC2_SetConfig+0x68>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a22      	ldr	r2, [pc, #136]	; (8004184 <TIM_OC2_SetConfig+0xec>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d10d      	bne.n	800411c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a18      	ldr	r2, [pc, #96]	; (8004180 <TIM_OC2_SetConfig+0xe8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_OC2_SetConfig+0x94>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a17      	ldr	r2, [pc, #92]	; (8004184 <TIM_OC2_SetConfig+0xec>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d113      	bne.n	8004154 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	feff8fff 	.word	0xfeff8fff
 8004180:	40010000 	.word	0x40010000
 8004184:	40010400 	.word	0x40010400

08004188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <TIM_OC3_SetConfig+0xe0>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a22      	ldr	r2, [pc, #136]	; (800426c <TIM_OC3_SetConfig+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_OC3_SetConfig+0x66>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a21      	ldr	r2, [pc, #132]	; (8004270 <TIM_OC3_SetConfig+0xe8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10d      	bne.n	800420a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a17      	ldr	r2, [pc, #92]	; (800426c <TIM_OC3_SetConfig+0xe4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_OC3_SetConfig+0x92>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a16      	ldr	r2, [pc, #88]	; (8004270 <TIM_OC3_SetConfig+0xe8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d113      	bne.n	8004242 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	621a      	str	r2, [r3, #32]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	fffeff8f 	.word	0xfffeff8f
 800426c:	40010000 	.word	0x40010000
 8004270:	40010400 	.word	0x40010400

08004274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <TIM_OC4_SetConfig+0xa4>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	031b      	lsls	r3, r3, #12
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <TIM_OC4_SetConfig+0xa8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_OC4_SetConfig+0x68>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a12      	ldr	r2, [pc, #72]	; (8004320 <TIM_OC4_SetConfig+0xac>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d109      	bne.n	80042f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	feff8fff 	.word	0xfeff8fff
 800431c:	40010000 	.word	0x40010000
 8004320:	40010400 	.word	0x40010400

08004324 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <TIM_OC5_SetConfig+0x98>)
 8004350:	4013      	ands	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004364:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <TIM_OC5_SetConfig+0x9c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <TIM_OC5_SetConfig+0x5e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <TIM_OC5_SetConfig+0xa0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d109      	bne.n	8004396 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004388:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	fffeff8f 	.word	0xfffeff8f
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40010400 	.word	0x40010400

080043c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <TIM_OC6_SetConfig+0x9c>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800440a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	051b      	lsls	r3, r3, #20
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a13      	ldr	r2, [pc, #76]	; (8004468 <TIM_OC6_SetConfig+0xa0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC6_SetConfig+0x60>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <TIM_OC6_SetConfig+0xa4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d109      	bne.n	800443c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800442e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	029b      	lsls	r3, r3, #10
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	feff8fff 	.word	0xfeff8fff
 8004468:	40010000 	.word	0x40010000
 800446c:	40010400 	.word	0x40010400

08004470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f023 0201 	bic.w	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800449a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f023 030a 	bic.w	r3, r3, #10
 80044ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	621a      	str	r2, [r3, #32]
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b087      	sub	sp, #28
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f023 0210 	bic.w	r2, r3, #16
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800450a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800452e:	b480      	push	{r7}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	f043 0307 	orr.w	r3, r3, #7
 8004550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	609a      	str	r2, [r3, #8]
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	021a      	lsls	r2, r3, #8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	431a      	orrs	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4313      	orrs	r3, r2
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	609a      	str	r2, [r3, #8]
}
 8004598:	bf00      	nop
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	2201      	movs	r2, #1
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1a      	ldr	r2, [r3, #32]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	401a      	ands	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1a      	ldr	r2, [r3, #32]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	fa01 f303 	lsl.w	r3, r1, r3
 80045dc:	431a      	orrs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004604:	2302      	movs	r3, #2
 8004606:	e06d      	b.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a30      	ldr	r2, [pc, #192]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2f      	ldr	r2, [pc, #188]	; (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d108      	bne.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a20      	ldr	r2, [pc, #128]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d022      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467a:	d01d      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d018      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1a      	ldr	r2, [pc, #104]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00e      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a16      	ldr	r2, [pc, #88]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a15      	ldr	r2, [pc, #84]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10c      	bne.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	40010000 	.word	0x40010000
 80046f4:	40010400 	.word	0x40010400
 80046f8:	40000400 	.word	0x40000400
 80046fc:	40000800 	.word	0x40000800
 8004700:	40000c00 	.word	0x40000c00
 8004704:	40014000 	.word	0x40014000
 8004708:	40001800 	.word	0x40001800

0800470c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e040      	b.n	80047dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc fdea 	bl	8001344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2224      	movs	r2, #36	; 0x24
 8004774:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8b0 	bl	80048ec <UART_SetConfig>
 800478c:	4603      	mov	r3, r0
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e022      	b.n	80047dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fb08 	bl	8004db4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fb8f 	bl	8004ef8 <UART_CheckIdleState>
 80047da:	4603      	mov	r3, r0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	; 0x28
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	4613      	mov	r3, r2
 80047f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d171      	bne.n	80048e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_UART_Transmit+0x24>
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e06a      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2221      	movs	r2, #33	; 0x21
 8004818:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800481a:	f7fc ffe3 	bl	80017e4 <HAL_GetTick>
 800481e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	88fa      	ldrh	r2, [r7, #6]
 8004824:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004838:	d108      	bne.n	800484c <HAL_UART_Transmit+0x68>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d104      	bne.n	800484c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	e003      	b.n	8004854 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004850:	2300      	movs	r3, #0
 8004852:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004854:	e02c      	b.n	80048b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fb80 	bl	8004f66 <UART_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e038      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	3302      	adds	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e007      	b.n	800489e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3301      	adds	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1cc      	bne.n	8004856 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2200      	movs	r2, #0
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 fb4d 	bl	8004f66 <UART_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e005      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4ba6      	ldr	r3, [pc, #664]	; (8004bb0 <UART_SetConfig+0x2c4>)
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	6979      	ldr	r1, [r7, #20]
 8004920:	430b      	orrs	r3, r1
 8004922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	430a      	orrs	r2, r1
 800495c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a94      	ldr	r2, [pc, #592]	; (8004bb4 <UART_SetConfig+0x2c8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d120      	bne.n	80049aa <UART_SetConfig+0xbe>
 8004968:	4b93      	ldr	r3, [pc, #588]	; (8004bb8 <UART_SetConfig+0x2cc>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b03      	cmp	r3, #3
 8004974:	d816      	bhi.n	80049a4 <UART_SetConfig+0xb8>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0x90>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	0800498d 	.word	0x0800498d
 8004980:	08004999 	.word	0x08004999
 8004984:	08004993 	.word	0x08004993
 8004988:	0800499f 	.word	0x0800499f
 800498c:	2301      	movs	r3, #1
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e150      	b.n	8004c34 <UART_SetConfig+0x348>
 8004992:	2302      	movs	r3, #2
 8004994:	77fb      	strb	r3, [r7, #31]
 8004996:	e14d      	b.n	8004c34 <UART_SetConfig+0x348>
 8004998:	2304      	movs	r3, #4
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e14a      	b.n	8004c34 <UART_SetConfig+0x348>
 800499e:	2308      	movs	r3, #8
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e147      	b.n	8004c34 <UART_SetConfig+0x348>
 80049a4:	2310      	movs	r3, #16
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e144      	b.n	8004c34 <UART_SetConfig+0x348>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a83      	ldr	r2, [pc, #524]	; (8004bbc <UART_SetConfig+0x2d0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d132      	bne.n	8004a1a <UART_SetConfig+0x12e>
 80049b4:	4b80      	ldr	r3, [pc, #512]	; (8004bb8 <UART_SetConfig+0x2cc>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d828      	bhi.n	8004a14 <UART_SetConfig+0x128>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <UART_SetConfig+0xdc>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	080049fd 	.word	0x080049fd
 80049cc:	08004a15 	.word	0x08004a15
 80049d0:	08004a15 	.word	0x08004a15
 80049d4:	08004a15 	.word	0x08004a15
 80049d8:	08004a09 	.word	0x08004a09
 80049dc:	08004a15 	.word	0x08004a15
 80049e0:	08004a15 	.word	0x08004a15
 80049e4:	08004a15 	.word	0x08004a15
 80049e8:	08004a03 	.word	0x08004a03
 80049ec:	08004a15 	.word	0x08004a15
 80049f0:	08004a15 	.word	0x08004a15
 80049f4:	08004a15 	.word	0x08004a15
 80049f8:	08004a0f 	.word	0x08004a0f
 80049fc:	2300      	movs	r3, #0
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e118      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a02:	2302      	movs	r3, #2
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e115      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e112      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a0e:	2308      	movs	r3, #8
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e10f      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a14:	2310      	movs	r3, #16
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e10c      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a68      	ldr	r2, [pc, #416]	; (8004bc0 <UART_SetConfig+0x2d4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d120      	bne.n	8004a66 <UART_SetConfig+0x17a>
 8004a24:	4b64      	ldr	r3, [pc, #400]	; (8004bb8 <UART_SetConfig+0x2cc>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a2e:	2b30      	cmp	r3, #48	; 0x30
 8004a30:	d013      	beq.n	8004a5a <UART_SetConfig+0x16e>
 8004a32:	2b30      	cmp	r3, #48	; 0x30
 8004a34:	d814      	bhi.n	8004a60 <UART_SetConfig+0x174>
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d009      	beq.n	8004a4e <UART_SetConfig+0x162>
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d810      	bhi.n	8004a60 <UART_SetConfig+0x174>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <UART_SetConfig+0x15c>
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d006      	beq.n	8004a54 <UART_SetConfig+0x168>
 8004a46:	e00b      	b.n	8004a60 <UART_SetConfig+0x174>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e0f2      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e0ef      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a54:	2304      	movs	r3, #4
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e0ec      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e0e9      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a60:	2310      	movs	r3, #16
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e0e6      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a56      	ldr	r2, [pc, #344]	; (8004bc4 <UART_SetConfig+0x2d8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d120      	bne.n	8004ab2 <UART_SetConfig+0x1c6>
 8004a70:	4b51      	ldr	r3, [pc, #324]	; (8004bb8 <UART_SetConfig+0x2cc>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a7c:	d013      	beq.n	8004aa6 <UART_SetConfig+0x1ba>
 8004a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a80:	d814      	bhi.n	8004aac <UART_SetConfig+0x1c0>
 8004a82:	2b80      	cmp	r3, #128	; 0x80
 8004a84:	d009      	beq.n	8004a9a <UART_SetConfig+0x1ae>
 8004a86:	2b80      	cmp	r3, #128	; 0x80
 8004a88:	d810      	bhi.n	8004aac <UART_SetConfig+0x1c0>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <UART_SetConfig+0x1a8>
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
 8004a90:	d006      	beq.n	8004aa0 <UART_SetConfig+0x1b4>
 8004a92:	e00b      	b.n	8004aac <UART_SetConfig+0x1c0>
 8004a94:	2300      	movs	r3, #0
 8004a96:	77fb      	strb	r3, [r7, #31]
 8004a98:	e0cc      	b.n	8004c34 <UART_SetConfig+0x348>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e0c9      	b.n	8004c34 <UART_SetConfig+0x348>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e0c6      	b.n	8004c34 <UART_SetConfig+0x348>
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e0c3      	b.n	8004c34 <UART_SetConfig+0x348>
 8004aac:	2310      	movs	r3, #16
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e0c0      	b.n	8004c34 <UART_SetConfig+0x348>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a44      	ldr	r2, [pc, #272]	; (8004bc8 <UART_SetConfig+0x2dc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d125      	bne.n	8004b08 <UART_SetConfig+0x21c>
 8004abc:	4b3e      	ldr	r3, [pc, #248]	; (8004bb8 <UART_SetConfig+0x2cc>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aca:	d017      	beq.n	8004afc <UART_SetConfig+0x210>
 8004acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad0:	d817      	bhi.n	8004b02 <UART_SetConfig+0x216>
 8004ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad6:	d00b      	beq.n	8004af0 <UART_SetConfig+0x204>
 8004ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004adc:	d811      	bhi.n	8004b02 <UART_SetConfig+0x216>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <UART_SetConfig+0x1fe>
 8004ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae6:	d006      	beq.n	8004af6 <UART_SetConfig+0x20a>
 8004ae8:	e00b      	b.n	8004b02 <UART_SetConfig+0x216>
 8004aea:	2300      	movs	r3, #0
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e0a1      	b.n	8004c34 <UART_SetConfig+0x348>
 8004af0:	2302      	movs	r3, #2
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e09e      	b.n	8004c34 <UART_SetConfig+0x348>
 8004af6:	2304      	movs	r3, #4
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e09b      	b.n	8004c34 <UART_SetConfig+0x348>
 8004afc:	2308      	movs	r3, #8
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e098      	b.n	8004c34 <UART_SetConfig+0x348>
 8004b02:	2310      	movs	r3, #16
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e095      	b.n	8004c34 <UART_SetConfig+0x348>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2f      	ldr	r2, [pc, #188]	; (8004bcc <UART_SetConfig+0x2e0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d125      	bne.n	8004b5e <UART_SetConfig+0x272>
 8004b12:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <UART_SetConfig+0x2cc>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b20:	d017      	beq.n	8004b52 <UART_SetConfig+0x266>
 8004b22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b26:	d817      	bhi.n	8004b58 <UART_SetConfig+0x26c>
 8004b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2c:	d00b      	beq.n	8004b46 <UART_SetConfig+0x25a>
 8004b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b32:	d811      	bhi.n	8004b58 <UART_SetConfig+0x26c>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <UART_SetConfig+0x254>
 8004b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3c:	d006      	beq.n	8004b4c <UART_SetConfig+0x260>
 8004b3e:	e00b      	b.n	8004b58 <UART_SetConfig+0x26c>
 8004b40:	2301      	movs	r3, #1
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e076      	b.n	8004c34 <UART_SetConfig+0x348>
 8004b46:	2302      	movs	r3, #2
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e073      	b.n	8004c34 <UART_SetConfig+0x348>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e070      	b.n	8004c34 <UART_SetConfig+0x348>
 8004b52:	2308      	movs	r3, #8
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e06d      	b.n	8004c34 <UART_SetConfig+0x348>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e06a      	b.n	8004c34 <UART_SetConfig+0x348>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <UART_SetConfig+0x2e4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d138      	bne.n	8004bda <UART_SetConfig+0x2ee>
 8004b68:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <UART_SetConfig+0x2cc>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004b72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b76:	d017      	beq.n	8004ba8 <UART_SetConfig+0x2bc>
 8004b78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b7c:	d82a      	bhi.n	8004bd4 <UART_SetConfig+0x2e8>
 8004b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b82:	d00b      	beq.n	8004b9c <UART_SetConfig+0x2b0>
 8004b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b88:	d824      	bhi.n	8004bd4 <UART_SetConfig+0x2e8>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <UART_SetConfig+0x2aa>
 8004b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b92:	d006      	beq.n	8004ba2 <UART_SetConfig+0x2b6>
 8004b94:	e01e      	b.n	8004bd4 <UART_SetConfig+0x2e8>
 8004b96:	2300      	movs	r3, #0
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e04b      	b.n	8004c34 <UART_SetConfig+0x348>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e048      	b.n	8004c34 <UART_SetConfig+0x348>
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e045      	b.n	8004c34 <UART_SetConfig+0x348>
 8004ba8:	2308      	movs	r3, #8
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e042      	b.n	8004c34 <UART_SetConfig+0x348>
 8004bae:	bf00      	nop
 8004bb0:	efff69f3 	.word	0xefff69f3
 8004bb4:	40011000 	.word	0x40011000
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40004400 	.word	0x40004400
 8004bc0:	40004800 	.word	0x40004800
 8004bc4:	40004c00 	.word	0x40004c00
 8004bc8:	40005000 	.word	0x40005000
 8004bcc:	40011400 	.word	0x40011400
 8004bd0:	40007800 	.word	0x40007800
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e02c      	b.n	8004c34 <UART_SetConfig+0x348>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a72      	ldr	r2, [pc, #456]	; (8004da8 <UART_SetConfig+0x4bc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d125      	bne.n	8004c30 <UART_SetConfig+0x344>
 8004be4:	4b71      	ldr	r3, [pc, #452]	; (8004dac <UART_SetConfig+0x4c0>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bf2:	d017      	beq.n	8004c24 <UART_SetConfig+0x338>
 8004bf4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bf8:	d817      	bhi.n	8004c2a <UART_SetConfig+0x33e>
 8004bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfe:	d00b      	beq.n	8004c18 <UART_SetConfig+0x32c>
 8004c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c04:	d811      	bhi.n	8004c2a <UART_SetConfig+0x33e>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <UART_SetConfig+0x326>
 8004c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c0e:	d006      	beq.n	8004c1e <UART_SetConfig+0x332>
 8004c10:	e00b      	b.n	8004c2a <UART_SetConfig+0x33e>
 8004c12:	2300      	movs	r3, #0
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e00d      	b.n	8004c34 <UART_SetConfig+0x348>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e00a      	b.n	8004c34 <UART_SetConfig+0x348>
 8004c1e:	2304      	movs	r3, #4
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e007      	b.n	8004c34 <UART_SetConfig+0x348>
 8004c24:	2308      	movs	r3, #8
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e004      	b.n	8004c34 <UART_SetConfig+0x348>
 8004c2a:	2310      	movs	r3, #16
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e001      	b.n	8004c34 <UART_SetConfig+0x348>
 8004c30:	2310      	movs	r3, #16
 8004c32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c3c:	d15b      	bne.n	8004cf6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c3e:	7ffb      	ldrb	r3, [r7, #31]
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d828      	bhi.n	8004c96 <UART_SetConfig+0x3aa>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <UART_SetConfig+0x360>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c79 	.word	0x08004c79
 8004c54:	08004c81 	.word	0x08004c81
 8004c58:	08004c97 	.word	0x08004c97
 8004c5c:	08004c87 	.word	0x08004c87
 8004c60:	08004c97 	.word	0x08004c97
 8004c64:	08004c97 	.word	0x08004c97
 8004c68:	08004c97 	.word	0x08004c97
 8004c6c:	08004c8f 	.word	0x08004c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c70:	f7fe f864 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8004c74:	61b8      	str	r0, [r7, #24]
        break;
 8004c76:	e013      	b.n	8004ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c78:	f7fe f874 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 8004c7c:	61b8      	str	r0, [r7, #24]
        break;
 8004c7e:	e00f      	b.n	8004ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c80:	4b4b      	ldr	r3, [pc, #300]	; (8004db0 <UART_SetConfig+0x4c4>)
 8004c82:	61bb      	str	r3, [r7, #24]
        break;
 8004c84:	e00c      	b.n	8004ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c86:	f7fd ff47 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8004c8a:	61b8      	str	r0, [r7, #24]
        break;
 8004c8c:	e008      	b.n	8004ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c92:	61bb      	str	r3, [r7, #24]
        break;
 8004c94:	e004      	b.n	8004ca0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d074      	beq.n	8004d90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	005a      	lsls	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	441a      	add	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b0f      	cmp	r3, #15
 8004cc0:	d916      	bls.n	8004cf0 <UART_SetConfig+0x404>
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc8:	d212      	bcs.n	8004cf0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f023 030f 	bic.w	r3, r3, #15
 8004cd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	89fb      	ldrh	r3, [r7, #14]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	89fa      	ldrh	r2, [r7, #14]
 8004cec:	60da      	str	r2, [r3, #12]
 8004cee:	e04f      	b.n	8004d90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	77bb      	strb	r3, [r7, #30]
 8004cf4:	e04c      	b.n	8004d90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cf6:	7ffb      	ldrb	r3, [r7, #31]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d828      	bhi.n	8004d4e <UART_SetConfig+0x462>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <UART_SetConfig+0x418>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d31 	.word	0x08004d31
 8004d0c:	08004d39 	.word	0x08004d39
 8004d10:	08004d4f 	.word	0x08004d4f
 8004d14:	08004d3f 	.word	0x08004d3f
 8004d18:	08004d4f 	.word	0x08004d4f
 8004d1c:	08004d4f 	.word	0x08004d4f
 8004d20:	08004d4f 	.word	0x08004d4f
 8004d24:	08004d47 	.word	0x08004d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d28:	f7fe f808 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8004d2c:	61b8      	str	r0, [r7, #24]
        break;
 8004d2e:	e013      	b.n	8004d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d30:	f7fe f818 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 8004d34:	61b8      	str	r0, [r7, #24]
        break;
 8004d36:	e00f      	b.n	8004d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d38:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <UART_SetConfig+0x4c4>)
 8004d3a:	61bb      	str	r3, [r7, #24]
        break;
 8004d3c:	e00c      	b.n	8004d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d3e:	f7fd feeb 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8004d42:	61b8      	str	r0, [r7, #24]
        break;
 8004d44:	e008      	b.n	8004d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d4a:	61bb      	str	r3, [r7, #24]
        break;
 8004d4c:	e004      	b.n	8004d58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	77bb      	strb	r3, [r7, #30]
        break;
 8004d56:	bf00      	nop
    }

    if (pclk != 0U)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d018      	beq.n	8004d90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	085a      	lsrs	r2, r3, #1
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	441a      	add	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b0f      	cmp	r3, #15
 8004d76:	d909      	bls.n	8004d8c <UART_SetConfig+0x4a0>
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d7e:	d205      	bcs.n	8004d8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	e001      	b.n	8004d90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40007c00 	.word	0x40007c00
 8004dac:	40023800 	.word	0x40023800
 8004db0:	00f42400 	.word	0x00f42400

08004db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01a      	beq.n	8004eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb2:	d10a      	bne.n	8004eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
  }
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f08:	f7fc fc6c 	bl	80017e4 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d10e      	bne.n	8004f3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f81b 	bl	8004f66 <UART_WaitOnFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e011      	b.n	8004f5e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b09c      	sub	sp, #112	; 0x70
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4613      	mov	r3, r2
 8004f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f76:	e0a7      	b.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	f000 80a3 	beq.w	80050c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f82:	f7fc fc2f 	bl	80017e4 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d302      	bcc.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d13f      	bne.n	8005018 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fac:	667b      	str	r3, [r7, #100]	; 0x64
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fb8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e6      	bne.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fea:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e5      	bne.n	8004fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e068      	b.n	80050ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d050      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005034:	d148      	bne.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800503e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
 8005060:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e6      	bne.n	8005040 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3308      	adds	r3, #8
 8005078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	613b      	str	r3, [r7, #16]
   return(result);
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	66bb      	str	r3, [r7, #104]	; 0x68
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3308      	adds	r3, #8
 8005090:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005092:	623a      	str	r2, [r7, #32]
 8005094:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	69f9      	ldr	r1, [r7, #28]
 8005098:	6a3a      	ldr	r2, [r7, #32]
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	61bb      	str	r3, [r7, #24]
   return(result);
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e5      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e010      	b.n	80050ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69da      	ldr	r2, [r3, #28]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	bf0c      	ite	eq
 80050d8:	2301      	moveq	r3, #1
 80050da:	2300      	movne	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	f43f af48 	beq.w	8004f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3770      	adds	r7, #112	; 0x70
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	f023 0101 	bic.w	r1, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b08      	cmp	r3, #8
 800511c:	d102      	bne.n	8005124 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800511e:	2340      	movs	r3, #64	; 0x40
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e001      	b.n	8005128 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005134:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800513a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005140:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005146:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800514c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8005152:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8005158:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800515e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8005164:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800518c:	4b20      	ldr	r3, [pc, #128]	; (8005210 <FMC_NORSRAM_Init+0x11c>)
 800518e:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005196:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800519e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80051a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	ea02 0103 	and.w	r1, r2, r3
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	4319      	orrs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051d0:	d10c      	bne.n	80051ec <FMC_NORSRAM_Init+0xf8>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d008      	beq.n	80051ec <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d006      	beq.n	8005202 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	0008fb7f 	.word	0x0008fb7f

08005214 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	431a      	orrs	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	431a      	orrs	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	431a      	orrs	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	3b01      	subs	r3, #1
 8005250:	051b      	lsls	r3, r3, #20
 8005252:	431a      	orrs	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	3b02      	subs	r3, #2
 800525a:	061b      	lsls	r3, r3, #24
 800525c:	431a      	orrs	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	4313      	orrs	r3, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	3201      	adds	r2, #1
 8005268:	4319      	orrs	r1, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527c:	d113      	bne.n	80052a6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005286:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	3b01      	subs	r3, #1
 800528e:	051b      	lsls	r3, r3, #20
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052c8:	d11d      	bne.n	8005306 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052d2:	4b13      	ldr	r3, [pc, #76]	; (8005320 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	6811      	ldr	r1, [r2, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	6852      	ldr	r2, [r2, #4]
 80052de:	0112      	lsls	r2, r2, #4
 80052e0:	4311      	orrs	r1, r2
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	6892      	ldr	r2, [r2, #8]
 80052e6:	0212      	lsls	r2, r2, #8
 80052e8:	4311      	orrs	r1, r2
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	6992      	ldr	r2, [r2, #24]
 80052ee:	4311      	orrs	r1, r2
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	68d2      	ldr	r2, [r2, #12]
 80052f4:	0412      	lsls	r2, r2, #16
 80052f6:	430a      	orrs	r2, r1
 80052f8:	ea43 0102 	orr.w	r1, r3, r2
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005304:	e005      	b.n	8005312 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800530e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	cff00000 	.word	0xcff00000

08005324 <http_server_demo>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void http_server_demo(wiz_NetInfo *net_info)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	73fb      	strb	r3, [r7, #15]

  wizchip_network_initialize(net_info);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f003 fb46 	bl	80089c2 <wizchip_network_initialize>
  wizchip_network_information(net_info);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f003 fb56 	bl	80089e8 <wizchip_network_information>

  httpServer_init(g_http_send_buf, g_http_recv_buf, HTTP_SOCKET_MAX_NUM, g_http_socket_num_list);
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <http_server_demo+0x78>)
 800533e:	2204      	movs	r2, #4
 8005340:	4917      	ldr	r1, [pc, #92]	; (80053a0 <http_server_demo+0x7c>)
 8005342:	4818      	ldr	r0, [pc, #96]	; (80053a4 <http_server_demo+0x80>)
 8005344:	f002 fac2 	bl	80078cc <httpServer_init>

//  reg_httpServer_webContent("index.html", index_page);
	reg_httpServer_webContent((uint8_t *)"index.html", (uint8_t *)index_page);				// index.html 		: Main page example
 8005348:	4917      	ldr	r1, [pc, #92]	; (80053a8 <http_server_demo+0x84>)
 800534a:	4818      	ldr	r0, [pc, #96]	; (80053ac <http_server_demo+0x88>)
 800534c:	f003 f96a 	bl	8008624 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"netinfo.html", (uint8_t *)netinfo_page);			// netinfo.html 	: Network information example page
 8005350:	4917      	ldr	r1, [pc, #92]	; (80053b0 <http_server_demo+0x8c>)
 8005352:	4818      	ldr	r0, [pc, #96]	; (80053b4 <http_server_demo+0x90>)
 8005354:	f003 f966 	bl	8008624 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"netinfo.js", (uint8_t *)wiz6100web_netinfo_js);	// netinfo.js 		: JavaScript for Read Network configuration 	(+ ajax.js)
 8005358:	4917      	ldr	r1, [pc, #92]	; (80053b8 <http_server_demo+0x94>)
 800535a:	4818      	ldr	r0, [pc, #96]	; (80053bc <http_server_demo+0x98>)
 800535c:	f003 f962 	bl	8008624 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"img.html", (uint8_t *)img_page);					// img.html 		: Base64 Image data example page
 8005360:	4917      	ldr	r1, [pc, #92]	; (80053c0 <http_server_demo+0x9c>)
 8005362:	4818      	ldr	r0, [pc, #96]	; (80053c4 <http_server_demo+0xa0>)
 8005364:	f003 f95e 	bl	8008624 <reg_httpServer_webContent>

	// Example #1
	reg_httpServer_webContent((uint8_t *)"dio.html", (uint8_t *)dio_page);					// dio.html 		: Digital I/O control example page
 8005368:	4917      	ldr	r1, [pc, #92]	; (80053c8 <http_server_demo+0xa4>)
 800536a:	4818      	ldr	r0, [pc, #96]	; (80053cc <http_server_demo+0xa8>)
 800536c:	f003 f95a 	bl	8008624 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"dio.js", (uint8_t *)wiz6100web_dio_js);			// dio.js 			: JavaScript for digital I/O control 	(+ ajax.js)
 8005370:	4917      	ldr	r1, [pc, #92]	; (80053d0 <http_server_demo+0xac>)
 8005372:	4818      	ldr	r0, [pc, #96]	; (80053d4 <http_server_demo+0xb0>)
 8005374:	f003 f956 	bl	8008624 <reg_httpServer_webContent>

	// AJAX JavaScript functions
	reg_httpServer_webContent((uint8_t *)"ajax.js", (uint8_t *)wiz6100web_ajax_js);			// ajax.js			: JavaScript for AJAX request transfer
 8005378:	4917      	ldr	r1, [pc, #92]	; (80053d8 <http_server_demo+0xb4>)
 800537a:	4818      	ldr	r0, [pc, #96]	; (80053dc <http_server_demo+0xb8>)
 800537c:	f003 f952 	bl	8008624 <reg_httpServer_webContent>

  /* Infinite loop */
  while (1)
  {

    for (i = 0; i < HTTP_SOCKET_MAX_NUM; i++)
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
 8005384:	e006      	b.n	8005394 <http_server_demo+0x70>
    {
      /* Run HTTP server */
      httpServer_run(i);
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	4618      	mov	r0, r3
 800538a:	f002 fabb 	bl	8007904 <httpServer_run>
    for (i = 0; i < HTTP_SOCKET_MAX_NUM; i++)
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	3301      	adds	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d9f5      	bls.n	8005386 <http_server_demo+0x62>
 800539a:	e7f1      	b.n	8005380 <http_server_demo+0x5c>
 800539c:	2000000c 	.word	0x2000000c
 80053a0:	200008c4 	.word	0x200008c4
 80053a4:	200000c4 	.word	0x200000c4
 80053a8:	0800a37c 	.word	0x0800a37c
 80053ac:	08014374 	.word	0x08014374
 80053b0:	08014380 	.word	0x08014380
 80053b4:	080144e4 	.word	0x080144e4
 80053b8:	080144f4 	.word	0x080144f4
 80053bc:	080146e0 	.word	0x080146e0
 80053c0:	080146ec 	.word	0x080146ec
 80053c4:	080162b0 	.word	0x080162b0
 80053c8:	080162bc 	.word	0x080162bc
 80053cc:	08017d48 	.word	0x08017d48
 80053d0:	08017d54 	.word	0x08017d54
 80053d4:	08018034 	.word	0x08018034
 80053d8:	0801803c 	.word	0x0801803c
 80053dc:	08018340 	.word	0x08018340

080053e0 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 80053ec:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <WIZCHIP_WRITE+0x38>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <WIZCHIP_WRITE+0x38>)
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 80053f8:	4b07      	ldr	r3, [pc, #28]	; (8005418 <WIZCHIP_WRITE+0x38>)
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	887a      	ldrh	r2, [r7, #2]
 80053fe:	4611      	mov	r1, r2
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <WIZCHIP_WRITE+0x38>)
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800540a:	4b03      	ldr	r3, [pc, #12]	; (8005418 <WIZCHIP_WRITE+0x38>)
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	4798      	blx	r3
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20000014 	.word	0x20000014

0800541c <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <WIZCHIP_READ+0x38>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	4798      	blx	r3
   WIZCHIP.CS._select();
 800542a:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <WIZCHIP_READ+0x38>)
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8005430:	4b08      	ldr	r3, [pc, #32]	; (8005454 <WIZCHIP_READ+0x38>)
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
 8005438:	4603      	mov	r3, r0
 800543a:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <WIZCHIP_READ+0x38>)
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005442:	4b04      	ldr	r3, [pc, #16]	; (8005454 <WIZCHIP_READ+0x38>)
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	4798      	blx	r3
   return ret;
 8005448:	89fb      	ldrh	r3, [r7, #14]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000014 	.word	0x20000014

08005458 <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	460a      	mov	r2, r1
 8005462:	71fb      	strb	r3, [r7, #7]
 8005464:	4613      	mov	r3, r2
 8005466:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800546e:	3320      	adds	r3, #32
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff ffd3 	bl	800541c <WIZCHIP_READ>
 8005476:	4603      	mov	r3, r0
 8005478:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <setTMSR+0x42>
 8005484:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005488:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800548c:	b21a      	sxth	r2, r3
 800548e:	79bb      	ldrb	r3, [r7, #6]
 8005490:	b21b      	sxth	r3, r3
 8005492:	4313      	orrs	r3, r2
 8005494:	b21b      	sxth	r3, r3
 8005496:	81fb      	strh	r3, [r7, #14]
 8005498:	e009      	b.n	80054ae <setTMSR+0x56>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 800549a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	b21a      	sxth	r2, r3
 80054a2:	79bb      	ldrb	r3, [r7, #6]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	b21b      	sxth	r3, r3
 80054a8:	4313      	orrs	r3, r2
 80054aa:	b21b      	sxth	r3, r3
 80054ac:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80054b4:	3320      	adds	r3, #32
 80054b6:	461a      	mov	r2, r3
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f7ff ff8f 	bl	80053e0 <WIZCHIP_WRITE>
}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	4603      	mov	r3, r0
 80054d2:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <getTMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80054e4:	3320      	adds	r3, #32
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff ff98 	bl	800541c <WIZCHIP_READ>
 80054ec:	4603      	mov	r3, r0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	e00a      	b.n	8005508 <getTMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80054f8:	3320      	adds	r3, #32
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff ff8e 	bl	800541c <WIZCHIP_READ>
 8005500:	4603      	mov	r3, r0
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	b29b      	uxth	r3, r3
 8005506:	b2db      	uxtb	r3, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	460a      	mov	r2, r1
 800551a:	71fb      	strb	r3, [r7, #7]
 800551c:	4613      	mov	r3, r2
 800551e:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005526:	3328      	adds	r3, #40	; 0x28
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff ff77 	bl	800541c <WIZCHIP_READ>
 800552e:	4603      	mov	r3, r0
 8005530:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <setRMSR+0x42>
 800553c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005540:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005544:	b21a      	sxth	r2, r3
 8005546:	79bb      	ldrb	r3, [r7, #6]
 8005548:	b21b      	sxth	r3, r3
 800554a:	4313      	orrs	r3, r2
 800554c:	b21b      	sxth	r3, r3
 800554e:	81fb      	strh	r3, [r7, #14]
 8005550:	e009      	b.n	8005566 <setRMSR+0x56>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 8005552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	b21a      	sxth	r2, r3
 800555a:	79bb      	ldrb	r3, [r7, #6]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	b21b      	sxth	r3, r3
 8005560:	4313      	orrs	r3, r2
 8005562:	b21b      	sxth	r3, r3
 8005564:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800556c:	3328      	adds	r3, #40	; 0x28
 800556e:	461a      	mov	r2, r3
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f7ff ff33 	bl	80053e0 <WIZCHIP_WRITE>
}
 800557a:	bf00      	nop
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <getRMSR>:
   
uint8_t getRMSR(uint8_t sn)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	4603      	mov	r3, r0
 800558a:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <getRMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800559c:	3328      	adds	r3, #40	; 0x28
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff ff3c 	bl	800541c <WIZCHIP_READ>
 80055a4:	4603      	mov	r3, r0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	e00a      	b.n	80055c0 <getRMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80055b0:	3328      	adds	r3, #40	; 0x28
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff ff32 	bl	800541c <WIZCHIP_READ>
 80055b8:	4603      	mov	r3, r0
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	b29b      	uxth	r3, r3
 80055be:	b2db      	uxtb	r3, r3
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 80055c8:	b590      	push	{r4, r7, lr}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 80055d6:	2301      	movs	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	3308      	adds	r3, #8
 80055de:	019b      	lsls	r3, r3, #6
 80055e0:	3324      	adds	r3, #36	; 0x24
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff ff1a 	bl	800541c <WIZCHIP_READ>
 80055e8:	4603      	mov	r3, r0
 80055ea:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	3308      	adds	r3, #8
 80055f0:	019b      	lsls	r3, r3, #6
 80055f2:	3326      	adds	r3, #38	; 0x26
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff ff11 	bl	800541c <WIZCHIP_READ>
 80055fa:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80055fc:	4323      	orrs	r3, r4
 80055fe:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	429a      	cmp	r2, r3
 8005606:	d002      	beq.n	800560e <getSn_TX_FSR+0x46>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 800560c:	e7e5      	b.n	80055da <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 800560e:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 8005610:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bd90      	pop	{r4, r7, pc}
	...

0800561c <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 800561c:	b590      	push	{r4, r7, lr}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 800562a:	2301      	movs	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	3308      	adds	r3, #8
 8005632:	019b      	lsls	r3, r3, #6
 8005634:	3328      	adds	r3, #40	; 0x28
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fef0 	bl	800541c <WIZCHIP_READ>
 800563c:	4603      	mov	r3, r0
 800563e:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	3308      	adds	r3, #8
 8005644:	019b      	lsls	r3, r3, #6
 8005646:	332a      	adds	r3, #42	; 0x2a
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff fee7 	bl	800541c <WIZCHIP_READ>
 800564e:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8005650:	4323      	orrs	r3, r4
 8005652:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	429a      	cmp	r2, r3
 800565a:	d002      	beq.n	8005662 <getSn_RX_RSR+0x46>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8005660:	e7e5      	b.n	800562e <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8005662:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	4a05      	ldr	r2, [pc, #20]	; (800567c <getSn_RX_RSR+0x60>)
 8005668:	5cd3      	ldrb	r3, [r2, r3]
 800566a:	105b      	asrs	r3, r3, #1
 800566c:	f003 0201 	and.w	r2, r3, #1
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4413      	add	r3, r2
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	bd90      	pop	{r4, r7, pc}
 800567c:	200010d8 	.word	0x200010d8

08005680 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d021      	beq.n	80056dc <wiz_send_data+0x5c>
   
   for(i = 0; i < len ; i += 2)
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	e019      	b.n	80056d2 <wiz_send_data+0x52>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	3308      	adds	r3, #8
 80056a2:	019b      	lsls	r3, r3, #6
 80056a4:	332e      	adds	r3, #46	; 0x2e
 80056a6:	4618      	mov	r0, r3
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	4413      	add	r3, r2
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	b21a      	sxth	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	3301      	adds	r3, #1
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	440b      	add	r3, r1
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b21b      	sxth	r3, r3
 80056c0:	4313      	orrs	r3, r2
 80056c2:	b21b      	sxth	r3, r3
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	4619      	mov	r1, r3
 80056c8:	f7ff fe8a 	bl	80053e0 <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3302      	adds	r3, #2
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d3e1      	bcc.n	800569e <wiz_send_data+0x1e>
 80056da:	e000      	b.n	80056de <wiz_send_data+0x5e>
   if(len == 0)  return;
 80056dc:	bf00      	nop
}
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d02c      	beq.n	800575a <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
 8005700:	2300      	movs	r3, #0
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	e01f      	b.n	8005746 <wiz_recv_data+0x62>
   {
      if((i & 0x01)==0)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d111      	bne.n	8005734 <wiz_recv_data+0x50>
      {
         rd = getSn_RX_FIFOR(sn);
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	3308      	adds	r3, #8
 8005714:	019b      	lsls	r3, r3, #6
 8005716:	3330      	adds	r3, #48	; 0x30
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fe7f 	bl	800541c <WIZCHIP_READ>
 800571e:	4603      	mov	r3, r0
 8005720:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8005722:	8afb      	ldrh	r3, [r7, #22]
 8005724:	0a1b      	lsrs	r3, r3, #8
 8005726:	b299      	uxth	r1, r3
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	b2ca      	uxtb	r2, r1
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	e005      	b.n	8005740 <wiz_recv_data+0x5c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4413      	add	r3, r2
 800573a:	8afa      	ldrh	r2, [r7, #22]
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3301      	adds	r3, #1
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	429a      	cmp	r2, r3
 800574c:	d3db      	bcc.n	8005706 <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	8afa      	ldrh	r2, [r7, #22]
 8005752:	b2d1      	uxtb	r1, r2
 8005754:	4a03      	ldr	r2, [pc, #12]	; (8005764 <wiz_recv_data+0x80>)
 8005756:	54d1      	strb	r1, [r2, r3]
 8005758:	e000      	b.n	800575c <wiz_recv_data+0x78>
   if(len == 0) return;
 800575a:	bf00      	nop
}
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200010e0 	.word	0x200010e0

08005768 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	461a      	mov	r2, r3
 8005776:	4623      	mov	r3, r4
 8005778:	71fb      	strb	r3, [r7, #7]
 800577a:	4603      	mov	r3, r0
 800577c:	71bb      	strb	r3, [r7, #6]
 800577e:	460b      	mov	r3, r1
 8005780:	80bb      	strh	r3, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	2b08      	cmp	r3, #8
 800578a:	d902      	bls.n	8005792 <socket+0x2a>
 800578c:	f04f 33ff 	mov.w	r3, #4294967295
 8005790:	e0f6      	b.n	8005980 <socket+0x218>
	switch(protocol)
 8005792:	79bb      	ldrb	r3, [r7, #6]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d005      	beq.n	80057a4 <socket+0x3c>
 8005798:	2b00      	cmp	r3, #0
 800579a:	dd32      	ble.n	8005802 <socket+0x9a>
 800579c:	3b02      	subs	r3, #2
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d82f      	bhi.n	8005802 <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80057a2:	e032      	b.n	800580a <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 80057a4:	2018      	movs	r0, #24
 80057a6:	f7ff fe39 	bl	800541c <WIZCHIP_READ>
 80057aa:	4603      	mov	r3, r0
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	f107 030c 	add.w	r3, r7, #12
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	2018      	movs	r0, #24
 80057ba:	f7ff fe2f 	bl	800541c <WIZCHIP_READ>
 80057be:	4603      	mov	r3, r0
 80057c0:	461a      	mov	r2, r3
 80057c2:	f107 030c 	add.w	r3, r7, #12
 80057c6:	3301      	adds	r3, #1
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	201a      	movs	r0, #26
 80057ce:	f7ff fe25 	bl	800541c <WIZCHIP_READ>
 80057d2:	4603      	mov	r3, r0
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	f107 030c 	add.w	r3, r7, #12
 80057dc:	3302      	adds	r3, #2
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	201a      	movs	r0, #26
 80057e4:	f7ff fe1a 	bl	800541c <WIZCHIP_READ>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	f107 030c 	add.w	r3, r7, #12
 80057f0:	3303      	adds	r3, #3
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d105      	bne.n	8005808 <socket+0xa0>
 80057fc:	f06f 0302 	mvn.w	r3, #2
 8005800:	e0be      	b.n	8005980 <socket+0x218>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8005802:	f06f 0304 	mvn.w	r3, #4
 8005806:	e0bb      	b.n	8005980 <socket+0x218>
	    break;
 8005808:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <socket+0xb2>
 8005814:	f06f 0305 	mvn.w	r3, #5
 8005818:	e0b2      	b.n	8005980 <socket+0x218>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01c      	beq.n	800585a <socket+0xf2>
	{
   	switch(protocol)
 8005820:	79bb      	ldrb	r3, [r7, #6]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d002      	beq.n	800582c <socket+0xc4>
 8005826:	2b02      	cmp	r3, #2
 8005828:	d008      	beq.n	800583c <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800582a:	e016      	b.n	800585a <socket+0xf2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10e      	bne.n	8005854 <socket+0xec>
 8005836:	f06f 0305 	mvn.w	r3, #5
 800583a:	e0a1      	b.n	8005980 <socket+0x218>
   	      if(flag & SF_IGMP_VER2)
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d008      	beq.n	8005858 <socket+0xf0>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8005846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800584a:	2b00      	cmp	r3, #0
 800584c:	db04      	blt.n	8005858 <socket+0xf0>
 800584e:	f06f 0305 	mvn.w	r3, #5
 8005852:	e095      	b.n	8005980 <socket+0x218>
   	      break;
 8005854:	bf00      	nop
 8005856:	e000      	b.n	800585a <socket+0xf2>
   	      break;
 8005858:	bf00      	nop
   	}
   }
	close(sn);
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	4618      	mov	r0, r3
 800585e:	f000 f89d 	bl	800599c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	3308      	adds	r3, #8
 8005866:	019b      	lsls	r3, r3, #6
 8005868:	4618      	mov	r0, r3
 800586a:	79bb      	ldrb	r3, [r7, #6]
 800586c:	b21a      	sxth	r2, r3
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	b21b      	sxth	r3, r3
 8005872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005876:	b21b      	sxth	r3, r3
 8005878:	4313      	orrs	r3, r2
 800587a:	b21a      	sxth	r2, r3
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	01db      	lsls	r3, r3, #7
 8005880:	b21b      	sxth	r3, r3
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	b21b      	sxth	r3, r3
 8005888:	4313      	orrs	r3, r2
 800588a:	b21b      	sxth	r3, r3
 800588c:	b29b      	uxth	r3, r3
 800588e:	4619      	mov	r1, r3
 8005890:	f7ff fda6 	bl	80053e0 <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8005894:	88bb      	ldrh	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d110      	bne.n	80058bc <socket+0x154>
	{
	   port = sock_any_port++;
 800589a:	4b3b      	ldr	r3, [pc, #236]	; (8005988 <socket+0x220>)
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	b291      	uxth	r1, r2
 80058a2:	4a39      	ldr	r2, [pc, #228]	; (8005988 <socket+0x220>)
 80058a4:	8011      	strh	r1, [r2, #0]
 80058a6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80058a8:	4b37      	ldr	r3, [pc, #220]	; (8005988 <socket+0x220>)
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d103      	bne.n	80058bc <socket+0x154>
 80058b4:	4b34      	ldr	r3, [pc, #208]	; (8005988 <socket+0x220>)
 80058b6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80058ba:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	3308      	adds	r3, #8
 80058c0:	019b      	lsls	r3, r3, #6
 80058c2:	330a      	adds	r3, #10
 80058c4:	461a      	mov	r2, r3
 80058c6:	88bb      	ldrh	r3, [r7, #4]
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f7ff fd88 	bl	80053e0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	3308      	adds	r3, #8
 80058d4:	019b      	lsls	r3, r3, #6
 80058d6:	3302      	adds	r3, #2
 80058d8:	2101      	movs	r1, #1
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fd80 	bl	80053e0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80058e0:	bf00      	nop
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	3308      	adds	r3, #8
 80058e6:	019b      	lsls	r3, r3, #6
 80058e8:	3302      	adds	r3, #2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fd96 	bl	800541c <WIZCHIP_READ>
 80058f0:	4603      	mov	r3, r0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1f4      	bne.n	80058e2 <socket+0x17a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	2201      	movs	r2, #1
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	b21b      	sxth	r3, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	b21a      	sxth	r2, r3
 8005906:	4b21      	ldr	r3, [pc, #132]	; (800598c <socket+0x224>)
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b21b      	sxth	r3, r3
 800590c:	4013      	ands	r3, r2
 800590e:	b21b      	sxth	r3, r3
 8005910:	b29a      	uxth	r2, r3
 8005912:	4b1e      	ldr	r3, [pc, #120]	; (800598c <socket+0x224>)
 8005914:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	f003 0201 	and.w	r2, r3, #1
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	b21a      	sxth	r2, r3
 8005924:	4b19      	ldr	r3, [pc, #100]	; (800598c <socket+0x224>)
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b21b      	sxth	r3, r3
 800592a:	4313      	orrs	r3, r2
 800592c:	b21b      	sxth	r3, r3
 800592e:	b29a      	uxth	r2, r3
 8005930:	4b16      	ldr	r3, [pc, #88]	; (800598c <socket+0x224>)
 8005932:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	2201      	movs	r2, #1
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	b21b      	sxth	r3, r3
 800593e:	43db      	mvns	r3, r3
 8005940:	b21a      	sxth	r2, r3
 8005942:	4b13      	ldr	r3, [pc, #76]	; (8005990 <socket+0x228>)
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	b21b      	sxth	r3, r3
 8005948:	4013      	ands	r3, r2
 800594a:	b21b      	sxth	r3, r3
 800594c:	b29a      	uxth	r2, r3
 800594e:	4b10      	ldr	r3, [pc, #64]	; (8005990 <socket+0x228>)
 8005950:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	4a0f      	ldr	r2, [pc, #60]	; (8005994 <socket+0x22c>)
 8005956:	2100      	movs	r1, #0
 8005958:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <socket+0x230>)
 8005960:	2100      	movs	r1, #0
 8005962:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8005964:	bf00      	nop
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	3308      	adds	r3, #8
 800596a:	019b      	lsls	r3, r3, #6
 800596c:	3308      	adds	r3, #8
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fd54 	bl	800541c <WIZCHIP_READ>
 8005974:	4603      	mov	r3, r0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f4      	beq.n	8005966 <socket+0x1fe>
   return (int8_t)sn;
 800597c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	bd90      	pop	{r4, r7, pc}
 8005988:	20000010 	.word	0x20000010
 800598c:	200010c4 	.word	0x200010c4
 8005990:	200010c6 	.word	0x200010c6
 8005994:	200010c8 	.word	0x200010c8
 8005998:	200010d8 	.word	0x200010d8

0800599c <close>:

int8_t close(uint8_t sn)
{
 800599c:	b590      	push	{r4, r7, lr}
 800599e:	b087      	sub	sp, #28
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	4603      	mov	r3, r0
 80059a4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80059a6:	79fb      	ldrb	r3, [r7, #7]
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d902      	bls.n	80059b2 <close+0x16>
 80059ac:	f04f 33ff 	mov.w	r3, #4294967295
 80059b0:	e0a5      	b.n	8005afe <close+0x162>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	3308      	adds	r3, #8
 80059b6:	019b      	lsls	r3, r3, #6
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff fd2f 	bl	800541c <WIZCHIP_READ>
 80059be:	4603      	mov	r3, r0
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d14a      	bne.n	8005a5e <close+0xc2>
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff fdfc 	bl	80055c8 <getSn_TX_FSR>
 80059d0:	4604      	mov	r4, r0
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fd78 	bl	80054ca <getTMSR>
 80059da:	4603      	mov	r3, r0
 80059dc:	029b      	lsls	r3, r3, #10
 80059de:	429c      	cmp	r4, r3
 80059e0:	d03d      	beq.n	8005a5e <close+0xc2>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 80059e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059e6:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	3308      	adds	r3, #8
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	2102      	movs	r1, #2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff fcf5 	bl	80053e0 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	3308      	adds	r3, #8
 80059fa:	019b      	lsls	r3, r3, #6
 80059fc:	330a      	adds	r3, #10
 80059fe:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff fcec 	bl	80053e0 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	019b      	lsls	r3, r3, #6
 8005a0e:	3302      	adds	r3, #2
 8005a10:	2101      	movs	r1, #1
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fce4 	bl	80053e0 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8005a18:	bf00      	nop
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	019b      	lsls	r3, r3, #6
 8005a20:	3302      	adds	r3, #2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fcfa 	bl	800541c <WIZCHIP_READ>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f4      	bne.n	8005a1a <close+0x7e>
      while(getSn_SR(sn) != SOCK_UDP);
 8005a30:	bf00      	nop
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	3308      	adds	r3, #8
 8005a36:	019b      	lsls	r3, r3, #6
 8005a38:	3308      	adds	r3, #8
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fcee 	bl	800541c <WIZCHIP_READ>
 8005a40:	4603      	mov	r3, r0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b22      	cmp	r3, #34	; 0x22
 8005a46:	d1f4      	bne.n	8005a32 <close+0x96>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8005a48:	f107 030c 	add.w	r3, r7, #12
 8005a4c:	f107 010c 	add.w	r1, r7, #12
 8005a50:	79f8      	ldrb	r0, [r7, #7]
 8005a52:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005a56:	9200      	str	r2, [sp, #0]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f000 fb81 	bl	8006160 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	3308      	adds	r3, #8
 8005a62:	019b      	lsls	r3, r3, #6
 8005a64:	3302      	adds	r3, #2
 8005a66:	2110      	movs	r1, #16
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff fcb9 	bl	80053e0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8005a6e:	bf00      	nop
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	3308      	adds	r3, #8
 8005a74:	019b      	lsls	r3, r3, #6
 8005a76:	3302      	adds	r3, #2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fccf 	bl	800541c <WIZCHIP_READ>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f4      	bne.n	8005a70 <close+0xd4>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	019b      	lsls	r3, r3, #6
 8005a8c:	3306      	adds	r3, #6
 8005a8e:	21ff      	movs	r1, #255	; 0xff
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fca5 	bl	80053e0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	b21b      	sxth	r3, r3
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	b21a      	sxth	r2, r3
 8005aa4:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <close+0x16c>)
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	b21b      	sxth	r3, r3
 8005aaa:	4013      	ands	r3, r2
 8005aac:	b21b      	sxth	r3, r3
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <close+0x16c>)
 8005ab2:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	b21b      	sxth	r3, r3
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	b21a      	sxth	r2, r3
 8005ac2:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <close+0x170>)
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b21b      	sxth	r3, r3
 8005ac8:	4013      	ands	r3, r2
 8005aca:	b21b      	sxth	r3, r3
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <close+0x170>)
 8005ad0:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	4a0e      	ldr	r2, [pc, #56]	; (8005b10 <close+0x174>)
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	4a0d      	ldr	r2, [pc, #52]	; (8005b14 <close+0x178>)
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8005ae4:	bf00      	nop
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	019b      	lsls	r3, r3, #6
 8005aec:	3308      	adds	r3, #8
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fc94 	bl	800541c <WIZCHIP_READ>
 8005af4:	4603      	mov	r3, r0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f4      	bne.n	8005ae6 <close+0x14a>
	return SOCK_OK;
 8005afc:	2301      	movs	r3, #1
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd90      	pop	{r4, r7, pc}
 8005b06:	bf00      	nop
 8005b08:	200010c4 	.word	0x200010c4
 8005b0c:	200010c6 	.word	0x200010c6
 8005b10:	200010c8 	.word	0x200010c8
 8005b14:	200010d8 	.word	0x200010d8

08005b18 <listen>:

int8_t listen(uint8_t sn)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d902      	bls.n	8005b2e <listen+0x16>
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2c:	e043      	b.n	8005bb6 <listen+0x9e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	3308      	adds	r3, #8
 8005b32:	019b      	lsls	r3, r3, #6
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff fc71 	bl	800541c <WIZCHIP_READ>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d002      	beq.n	8005b4a <listen+0x32>
 8005b44:	f06f 0304 	mvn.w	r3, #4
 8005b48:	e035      	b.n	8005bb6 <listen+0x9e>
	CHECK_SOCKINIT();
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	019b      	lsls	r3, r3, #6
 8005b50:	3308      	adds	r3, #8
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff fc62 	bl	800541c <WIZCHIP_READ>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b13      	cmp	r3, #19
 8005b5e:	d002      	beq.n	8005b66 <listen+0x4e>
 8005b60:	f06f 0302 	mvn.w	r3, #2
 8005b64:	e027      	b.n	8005bb6 <listen+0x9e>
	setSn_CR(sn,Sn_CR_LISTEN);
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	019b      	lsls	r3, r3, #6
 8005b6c:	3302      	adds	r3, #2
 8005b6e:	2102      	movs	r1, #2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff fc35 	bl	80053e0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8005b76:	bf00      	nop
 8005b78:	79fb      	ldrb	r3, [r7, #7]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	019b      	lsls	r3, r3, #6
 8005b7e:	3302      	adds	r3, #2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fc4b 	bl	800541c <WIZCHIP_READ>
 8005b86:	4603      	mov	r3, r0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f4      	bne.n	8005b78 <listen+0x60>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8005b8e:	e006      	b.n	8005b9e <listen+0x86>
   {
         close(sn);
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff ff02 	bl	800599c <close>
         return SOCKERR_SOCKCLOSED;
 8005b98:	f06f 0303 	mvn.w	r3, #3
 8005b9c:	e00b      	b.n	8005bb6 <listen+0x9e>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	019b      	lsls	r3, r3, #6
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fc38 	bl	800541c <WIZCHIP_READ>
 8005bac:	4603      	mov	r3, r0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b14      	cmp	r3, #20
 8005bb2:	d1ed      	bne.n	8005b90 <listen+0x78>
   }
   return SOCK_OK;
 8005bb4:	2301      	movs	r3, #1
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d902      	bls.n	8005bd6 <disconnect+0x16>
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd4:	e05c      	b.n	8005c90 <disconnect+0xd0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	3308      	adds	r3, #8
 8005bda:	019b      	lsls	r3, r3, #6
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff fc1d 	bl	800541c <WIZCHIP_READ>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d002      	beq.n	8005bf2 <disconnect+0x32>
 8005bec:	f06f 0304 	mvn.w	r3, #4
 8005bf0:	e04e      	b.n	8005c90 <disconnect+0xd0>
	setSn_CR(sn,Sn_CR_DISCON);
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	019b      	lsls	r3, r3, #6
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	2108      	movs	r1, #8
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff fbef 	bl	80053e0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005c02:	bf00      	nop
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	3308      	adds	r3, #8
 8005c08:	019b      	lsls	r3, r3, #6
 8005c0a:	3302      	adds	r3, #2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff fc05 	bl	800541c <WIZCHIP_READ>
 8005c12:	4603      	mov	r3, r0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f4      	bne.n	8005c04 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	b21b      	sxth	r3, r3
 8005c24:	43db      	mvns	r3, r3
 8005c26:	b21a      	sxth	r2, r3
 8005c28:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <disconnect+0xd8>)
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b21b      	sxth	r3, r3
 8005c2e:	4013      	ands	r3, r2
 8005c30:	b21b      	sxth	r3, r3
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	4b18      	ldr	r3, [pc, #96]	; (8005c98 <disconnect+0xd8>)
 8005c36:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005c38:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <disconnect+0xdc>)
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	fa42 f303 	asr.w	r3, r2, r3
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d015      	beq.n	8005c78 <disconnect+0xb8>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e01f      	b.n	8005c90 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	3308      	adds	r3, #8
 8005c54:	019b      	lsls	r3, r3, #6
 8005c56:	3306      	adds	r3, #6
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fbdf 	bl	800541c <WIZCHIP_READ>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d006      	beq.n	8005c78 <disconnect+0xb8>
	   {
	      close(sn);
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fe95 	bl	800599c <close>
	      return SOCKERR_TIMEOUT;
 8005c72:	f06f 030c 	mvn.w	r3, #12
 8005c76:	e00b      	b.n	8005c90 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	019b      	lsls	r3, r3, #6
 8005c7e:	3308      	adds	r3, #8
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff fbcb 	bl	800541c <WIZCHIP_READ>
 8005c86:	4603      	mov	r3, r0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e0      	bne.n	8005c50 <disconnect+0x90>
	   }
	}
	return SOCK_OK;
 8005c8e:	2301      	movs	r3, #1
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	200010c6 	.word	0x200010c6
 8005c9c:	200010c4 	.word	0x200010c4

08005ca0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	6039      	str	r1, [r7, #0]
 8005caa:	71fb      	strb	r3, [r7, #7]
 8005cac:	4613      	mov	r3, r2
 8005cae:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d902      	bls.n	8005cc4 <send+0x24>
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc2:	e0e1      	b.n	8005e88 <send+0x1e8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	019b      	lsls	r3, r3, #6
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fba6 	bl	800541c <WIZCHIP_READ>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d002      	beq.n	8005ce0 <send+0x40>
 8005cda:	f06f 0304 	mvn.w	r3, #4
 8005cde:	e0d3      	b.n	8005e88 <send+0x1e8>
   CHECK_SOCKDATA();
 8005ce0:	88bb      	ldrh	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d102      	bne.n	8005cec <send+0x4c>
 8005ce6:	f06f 030d 	mvn.w	r3, #13
 8005cea:	e0cd      	b.n	8005e88 <send+0x1e8>
   tmp = getSn_SR(sn);
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	019b      	lsls	r3, r3, #6
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fb91 	bl	800541c <WIZCHIP_READ>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b17      	cmp	r3, #23
 8005d02:	d005      	beq.n	8005d10 <send+0x70>
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b1c      	cmp	r3, #28
 8005d08:	d002      	beq.n	8005d10 <send+0x70>
 8005d0a:	f06f 0306 	mvn.w	r3, #6
 8005d0e:	e0bb      	b.n	8005e88 <send+0x1e8>
   if( sock_is_sending & (1<<sn) )
 8005d10:	4b5f      	ldr	r3, [pc, #380]	; (8005e90 <send+0x1f0>)
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	fa42 f303 	asr.w	r3, r2, r3
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d033      	beq.n	8005d8c <send+0xec>
   {
      tmp = getSn_IR(sn);
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	3308      	adds	r3, #8
 8005d28:	019b      	lsls	r3, r3, #6
 8005d2a:	3306      	adds	r3, #6
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fb75 	bl	800541c <WIZCHIP_READ>
 8005d32:	4603      	mov	r3, r0
 8005d34:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d017      	beq.n	8005d70 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	3308      	adds	r3, #8
 8005d44:	019b      	lsls	r3, r3, #6
 8005d46:	3306      	adds	r3, #6
 8005d48:	2110      	movs	r1, #16
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fb48 	bl	80053e0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	2201      	movs	r2, #1
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	b21b      	sxth	r3, r3
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	b21a      	sxth	r2, r3
 8005d5e:	4b4c      	ldr	r3, [pc, #304]	; (8005e90 <send+0x1f0>)
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b21b      	sxth	r3, r3
 8005d64:	4013      	ands	r3, r2
 8005d66:	b21b      	sxth	r3, r3
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	4b49      	ldr	r3, [pc, #292]	; (8005e90 <send+0x1f0>)
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e00d      	b.n	8005d8c <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d006      	beq.n	8005d88 <send+0xe8>
      {
         close(sn);
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fe0d 	bl	800599c <close>
         return SOCKERR_TIMEOUT;
 8005d82:	f06f 030c 	mvn.w	r3, #12
 8005d86:	e07f      	b.n	8005e88 <send+0x1e8>
      }
      else return SOCK_BUSY;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e07d      	b.n	8005e88 <send+0x1e8>
   }
   freesize = getSn_TxMAX(sn);
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fb9b 	bl	80054ca <getTMSR>
 8005d94:	4603      	mov	r3, r0
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	029b      	lsls	r3, r3, #10
 8005d9a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005d9c:	88ba      	ldrh	r2, [r7, #4]
 8005d9e:	89bb      	ldrh	r3, [r7, #12]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d901      	bls.n	8005da8 <send+0x108>
 8005da4:	89bb      	ldrh	r3, [r7, #12]
 8005da6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff fc0c 	bl	80055c8 <getSn_TX_FSR>
 8005db0:	4603      	mov	r3, r0
 8005db2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	3308      	adds	r3, #8
 8005db8:	019b      	lsls	r3, r3, #6
 8005dba:	3308      	adds	r3, #8
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fb2d 	bl	800541c <WIZCHIP_READ>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b17      	cmp	r3, #23
 8005dca:	d009      	beq.n	8005de0 <send+0x140>
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b1c      	cmp	r3, #28
 8005dd0:	d006      	beq.n	8005de0 <send+0x140>
      {
         close(sn);
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fde1 	bl	800599c <close>
         return SOCKERR_SOCKSTATUS;
 8005dda:	f06f 0306 	mvn.w	r3, #6
 8005dde:	e053      	b.n	8005e88 <send+0x1e8>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005de0:	4b2c      	ldr	r3, [pc, #176]	; (8005e94 <send+0x1f4>)
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	fa42 f303 	asr.w	r3, r2, r3
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <send+0x160>
 8005df4:	88ba      	ldrh	r2, [r7, #4]
 8005df6:	89bb      	ldrh	r3, [r7, #12]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d901      	bls.n	8005e00 <send+0x160>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e043      	b.n	8005e88 <send+0x1e8>
      if(len <= freesize) break;
 8005e00:	88ba      	ldrh	r2, [r7, #4]
 8005e02:	89bb      	ldrh	r3, [r7, #12]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d900      	bls.n	8005e0a <send+0x16a>
      freesize = getSn_TX_FSR(sn);
 8005e08:	e7ce      	b.n	8005da8 <send+0x108>
      if(len <= freesize) break;
 8005e0a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8005e0c:	88ba      	ldrh	r2, [r7, #4]
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff fc34 	bl	8005680 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	019b      	lsls	r3, r3, #6
 8005e1e:	3320      	adds	r3, #32
 8005e20:	461a      	mov	r2, r3
 8005e22:	88bb      	ldrh	r3, [r7, #4]
 8005e24:	0c1b      	lsrs	r3, r3, #16
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f7ff fad8 	bl	80053e0 <WIZCHIP_WRITE>
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	3308      	adds	r3, #8
 8005e34:	019b      	lsls	r3, r3, #6
 8005e36:	3322      	adds	r3, #34	; 0x22
 8005e38:	461a      	mov	r2, r3
 8005e3a:	88bb      	ldrh	r3, [r7, #4]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f7ff face 	bl	80053e0 <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	3308      	adds	r3, #8
 8005e48:	019b      	lsls	r3, r3, #6
 8005e4a:	3302      	adds	r3, #2
 8005e4c:	2120      	movs	r1, #32
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff fac6 	bl	80053e0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8005e54:	bf00      	nop
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	019b      	lsls	r3, r3, #6
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fadc 	bl	800541c <WIZCHIP_READ>
 8005e64:	4603      	mov	r3, r0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f4      	bne.n	8005e56 <send+0x1b6>
   sock_is_sending |= (1 << sn);
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	b21a      	sxth	r2, r3
 8005e76:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <send+0x1f0>)
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b21b      	sxth	r3, r3
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	b21b      	sxth	r3, r3
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <send+0x1f0>)
 8005e84:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005e86:	88bb      	ldrh	r3, [r7, #4]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	200010c6 	.word	0x200010c6
 8005e94:	200010c4 	.word	0x200010c4

08005e98 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	6039      	str	r1, [r7, #0]
 8005ea2:	71fb      	strb	r3, [r7, #7]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d902      	bls.n	8005ebc <recv+0x24>
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eba:	e145      	b.n	8006148 <recv+0x2b0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	019b      	lsls	r3, r3, #6
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff faaa 	bl	800541c <WIZCHIP_READ>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d002      	beq.n	8005ed8 <recv+0x40>
 8005ed2:	f06f 0304 	mvn.w	r3, #4
 8005ed6:	e137      	b.n	8006148 <recv+0x2b0>
   CHECK_SOCKDATA();
 8005ed8:	88bb      	ldrh	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d102      	bne.n	8005ee4 <recv+0x4c>
 8005ede:	f06f 030d 	mvn.w	r3, #13
 8005ee2:	e131      	b.n	8006148 <recv+0x2b0>
   
   recvsize = getSn_RxMAX(sn);
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff fb4b 	bl	8005582 <getRMSR>
 8005eec:	4603      	mov	r3, r0
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	029b      	lsls	r3, r3, #10
 8005ef2:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 8005ef4:	89fa      	ldrh	r2, [r7, #14]
 8005ef6:	88bb      	ldrh	r3, [r7, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d201      	bcs.n	8005f00 <recv+0x68>
 8005efc:	89fb      	ldrh	r3, [r7, #14]
 8005efe:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	4a93      	ldr	r2, [pc, #588]	; (8006150 <recv+0x2b8>)
 8005f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d148      	bne.n	8005f9e <recv+0x106>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fb84 	bl	800561c <getSn_RX_RSR>
 8005f14:	4603      	mov	r3, r0
 8005f16:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	019b      	lsls	r3, r3, #6
 8005f1e:	3308      	adds	r3, #8
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fa7b 	bl	800541c <WIZCHIP_READ>
 8005f26:	4603      	mov	r3, r0
 8005f28:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 8005f2a:	7b7b      	ldrb	r3, [r7, #13]
 8005f2c:	2b17      	cmp	r3, #23
 8005f2e:	d020      	beq.n	8005f72 <recv+0xda>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8005f30:	7b7b      	ldrb	r3, [r7, #13]
 8005f32:	2b1c      	cmp	r3, #28
 8005f34:	d116      	bne.n	8005f64 <recv+0xcc>
            {
               if(recvsize != 0) break;
 8005f36:	89fb      	ldrh	r3, [r7, #14]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d12d      	bne.n	8005f98 <recv+0x100>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fb42 	bl	80055c8 <getSn_TX_FSR>
 8005f44:	4604      	mov	r4, r0
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fabe 	bl	80054ca <getTMSR>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	029b      	lsls	r3, r3, #10
 8005f52:	429c      	cmp	r4, r3
 8005f54:	d10d      	bne.n	8005f72 <recv+0xda>
               {
                  close(sn);
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fd1f 	bl	800599c <close>
                  return SOCKERR_SOCKSTATUS;
 8005f5e:	f06f 0306 	mvn.w	r3, #6
 8005f62:	e0f1      	b.n	8006148 <recv+0x2b0>
               }
            }
            else
            {
               close(sn);
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fd18 	bl	800599c <close>
               return SOCKERR_SOCKSTATUS;
 8005f6c:	f06f 0306 	mvn.w	r3, #6
 8005f70:	e0ea      	b.n	8006148 <recv+0x2b0>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005f72:	4b78      	ldr	r3, [pc, #480]	; (8006154 <recv+0x2bc>)
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	79fb      	ldrb	r3, [r7, #7]
 8005f7a:	fa42 f303 	asr.w	r3, r2, r3
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d004      	beq.n	8005f90 <recv+0xf8>
 8005f86:	89fb      	ldrh	r3, [r7, #14]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <recv+0xf8>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e0db      	b.n	8006148 <recv+0x2b0>
         if(recvsize != 0) break;
 8005f90:	89fb      	ldrh	r3, [r7, #14]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <recv+0x104>
         recvsize = getSn_RX_RSR(sn);
 8005f96:	e7b9      	b.n	8005f0c <recv+0x74>
               if(recvsize != 0) break;
 8005f98:	bf00      	nop
 8005f9a:	e000      	b.n	8005f9e <recv+0x106>
         if(recvsize != 0) break;
 8005f9c:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	4a6b      	ldr	r2, [pc, #428]	; (8006150 <recv+0x2b8>)
 8005fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <recv+0x128>
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	3308      	adds	r3, #8
 8005fae:	019b      	lsls	r3, r3, #6
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fa33 	bl	800541c <WIZCHIP_READ>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d035      	beq.n	800602c <recv+0x194>
   {
      mr = getMR();
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	f7ff fa2b 	bl	800541c <WIZCHIP_READ>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	019b      	lsls	r3, r3, #6
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fa23 	bl	800541c <WIZCHIP_READ>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d120      	bne.n	8006022 <recv+0x18a>
      {
         wiz_recv_data(sn,head,2);
 8005fe0:	f107 0108 	add.w	r1, r7, #8
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff fb7b 	bl	80056e4 <wiz_recv_data>
         if(mr & MR_FS)
 8005fee:	897b      	ldrh	r3, [r7, #10]
 8005ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <recv+0x172>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 8005ff8:	7a7b      	ldrb	r3, [r7, #9]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	b21a      	sxth	r2, r3
 8005ffe:	7a3b      	ldrb	r3, [r7, #8]
 8006000:	b21b      	sxth	r3, r3
 8006002:	4313      	orrs	r3, r2
 8006004:	b21b      	sxth	r3, r3
 8006006:	81fb      	strh	r3, [r7, #14]
 8006008:	e007      	b.n	800601a <recv+0x182>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 800600a:	7a3b      	ldrb	r3, [r7, #8]
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	b21a      	sxth	r2, r3
 8006010:	7a7b      	ldrb	r3, [r7, #9]
 8006012:	b21b      	sxth	r3, r3
 8006014:	4313      	orrs	r3, r2
 8006016:	b21b      	sxth	r3, r3
 8006018:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	4a4e      	ldr	r2, [pc, #312]	; (8006158 <recv+0x2c0>)
 800601e:	2180      	movs	r1, #128	; 0x80
 8006020:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	494a      	ldr	r1, [pc, #296]	; (8006150 <recv+0x2b8>)
 8006026:	89fa      	ldrh	r2, [r7, #14]
 8006028:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	4a48      	ldr	r2, [pc, #288]	; (8006150 <recv+0x2b8>)
 8006030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006034:	88ba      	ldrh	r2, [r7, #4]
 8006036:	429a      	cmp	r2, r3
 8006038:	d904      	bls.n	8006044 <recv+0x1ac>
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	4a44      	ldr	r2, [pc, #272]	; (8006150 <recv+0x2b8>)
 800603e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006042:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 8006044:	88bb      	ldrh	r3, [r7, #4]
 8006046:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	4a43      	ldr	r2, [pc, #268]	; (8006158 <recv+0x2c0>)
 800604c:	5cd3      	ldrb	r3, [r2, r3]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01d      	beq.n	8006092 <recv+0x1fa>
   {
      *buf = sock_remained_byte[sn];
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	4a40      	ldr	r2, [pc, #256]	; (800615c <recv+0x2c4>)
 800605a:	5cd2      	ldrb	r2, [r2, r3]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	701a      	strb	r2, [r3, #0]
      buf++;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	4a3b      	ldr	r2, [pc, #236]	; (8006158 <recv+0x2c0>)
 800606a:	5cd2      	ldrb	r2, [r2, r3]
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	f022 0202 	bic.w	r2, r2, #2
 8006072:	b2d1      	uxtb	r1, r2
 8006074:	4a38      	ldr	r2, [pc, #224]	; (8006158 <recv+0x2c0>)
 8006076:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 8006078:	89fb      	ldrh	r3, [r7, #14]
 800607a:	3b01      	subs	r3, #1
 800607c:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	4a33      	ldr	r2, [pc, #204]	; (8006150 <recv+0x2b8>)
 8006082:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	3a01      	subs	r2, #1
 800608a:	b291      	uxth	r1, r2
 800608c:	4a30      	ldr	r2, [pc, #192]	; (8006150 <recv+0x2b8>)
 800608e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 8006092:	89fb      	ldrh	r3, [r7, #14]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d019      	beq.n	80060cc <recv+0x234>
   {
      wiz_recv_data(sn, buf, recvsize);
 8006098:	89fa      	ldrh	r2, [r7, #14]
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fb20 	bl	80056e4 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	3308      	adds	r3, #8
 80060a8:	019b      	lsls	r3, r3, #6
 80060aa:	3302      	adds	r3, #2
 80060ac:	2140      	movs	r1, #64	; 0x40
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff f996 	bl	80053e0 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 80060b4:	bf00      	nop
 80060b6:	79fb      	ldrb	r3, [r7, #7]
 80060b8:	3308      	adds	r3, #8
 80060ba:	019b      	lsls	r3, r3, #6
 80060bc:	3302      	adds	r3, #2
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff f9ac 	bl	800541c <WIZCHIP_READ>
 80060c4:	4603      	mov	r3, r0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1f4      	bne.n	80060b6 <recv+0x21e>
   }
   sock_remained_size[sn] -= recvsize;
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	4a20      	ldr	r2, [pc, #128]	; (8006150 <recv+0x2b8>)
 80060d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	89fa      	ldrh	r2, [r7, #14]
 80060d8:	1a8a      	subs	r2, r1, r2
 80060da:	b291      	uxth	r1, r2
 80060dc:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <recv+0x2b8>)
 80060de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	4a1a      	ldr	r2, [pc, #104]	; (8006150 <recv+0x2b8>)
 80060e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d017      	beq.n	800611e <recv+0x286>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	4a19      	ldr	r2, [pc, #100]	; (8006158 <recv+0x2c0>)
 80060f2:	5cd2      	ldrb	r2, [r2, r3]
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	b2d1      	uxtb	r1, r2
 80060fc:	4a16      	ldr	r2, [pc, #88]	; (8006158 <recv+0x2c0>)
 80060fe:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8006100:	89fb      	ldrh	r3, [r7, #14]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00d      	beq.n	8006126 <recv+0x28e>
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	4a12      	ldr	r2, [pc, #72]	; (8006158 <recv+0x2c0>)
 800610e:	5cd2      	ldrb	r2, [r2, r3]
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	f042 0202 	orr.w	r2, r2, #2
 8006116:	b2d1      	uxtb	r1, r2
 8006118:	4a0f      	ldr	r2, [pc, #60]	; (8006158 <recv+0x2c0>)
 800611a:	54d1      	strb	r1, [r2, r3]
 800611c:	e003      	b.n	8006126 <recv+0x28e>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <recv+0x2c0>)
 8006122:	2100      	movs	r1, #0
 8006124:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	3308      	adds	r3, #8
 800612a:	019b      	lsls	r3, r3, #6
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff f975 	bl	800541c <WIZCHIP_READ>
 8006132:	4603      	mov	r3, r0
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <recv+0x2ae>
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	4a04      	ldr	r2, [pc, #16]	; (8006150 <recv+0x2b8>)
 8006140:	2100      	movs	r1, #0
 8006142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8006146:	88bb      	ldrh	r3, [r7, #4]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	bd90      	pop	{r4, r7, pc}
 8006150:	200010c8 	.word	0x200010c8
 8006154:	200010c4 	.word	0x200010c4
 8006158:	200010d8 	.word	0x200010d8
 800615c:	200010e0 	.word	0x200010e0

08006160 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	4603      	mov	r3, r0
 800616c:	73fb      	strb	r3, [r7, #15]
 800616e:	4613      	mov	r3, r2
 8006170:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8006176:	2300      	movs	r3, #0
 8006178:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d902      	bls.n	8006186 <sendto+0x26>
 8006180:	f04f 33ff 	mov.w	r3, #4294967295
 8006184:	e1e6      	b.n	8006554 <sendto+0x3f4>
   switch(getSn_MR(sn) & 0x0F)
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	3308      	adds	r3, #8
 800618a:	019b      	lsls	r3, r3, #6
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff f945 	bl	800541c <WIZCHIP_READ>
 8006192:	4603      	mov	r3, r0
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	3b02      	subs	r3, #2
 800619a:	2b02      	cmp	r3, #2
 800619c:	d902      	bls.n	80061a4 <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800619e:	f06f 0304 	mvn.w	r3, #4
 80061a2:	e1d7      	b.n	8006554 <sendto+0x3f4>
         break;
 80061a4:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80061a6:	89bb      	ldrh	r3, [r7, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <sendto+0x52>
 80061ac:	f06f 030d 	mvn.w	r3, #13
 80061b0:	e1d0      	b.n	8006554 <sendto+0x3f4>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	3201      	adds	r2, #1
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	4413      	add	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	3202      	adds	r2, #2
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	4413      	add	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	3203      	adds	r2, #3
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	4413      	add	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10d      	bne.n	8006204 <sendto+0xa4>
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	3308      	adds	r3, #8
 80061ec:	019b      	lsls	r3, r3, #6
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff f914 	bl	800541c <WIZCHIP_READ>
 80061f4:	4603      	mov	r3, r0
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d002      	beq.n	8006204 <sendto+0xa4>
 80061fe:	f06f 030b 	mvn.w	r3, #11
 8006202:	e1a7      	b.n	8006554 <sendto+0x3f4>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8006204:	8c3b      	ldrh	r3, [r7, #32]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10d      	bne.n	8006226 <sendto+0xc6>
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	3308      	adds	r3, #8
 800620e:	019b      	lsls	r3, r3, #6
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff f903 	bl	800541c <WIZCHIP_READ>
 8006216:	4603      	mov	r3, r0
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b04      	cmp	r3, #4
 800621e:	d002      	beq.n	8006226 <sendto+0xc6>
 8006220:	f06f 030a 	mvn.w	r3, #10
 8006224:	e196      	b.n	8006554 <sendto+0x3f4>
   tmp = getSn_SR(sn);
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	3308      	adds	r3, #8
 800622a:	019b      	lsls	r3, r3, #6
 800622c:	3308      	adds	r3, #8
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff f8f4 	bl	800541c <WIZCHIP_READ>
 8006234:	4603      	mov	r3, r0
 8006236:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	2b42      	cmp	r3, #66	; 0x42
 800623c:	d008      	beq.n	8006250 <sendto+0xf0>
 800623e:	7dfb      	ldrb	r3, [r7, #23]
 8006240:	2b22      	cmp	r3, #34	; 0x22
 8006242:	d005      	beq.n	8006250 <sendto+0xf0>
 8006244:	7dfb      	ldrb	r3, [r7, #23]
 8006246:	2b32      	cmp	r3, #50	; 0x32
 8006248:	d002      	beq.n	8006250 <sendto+0xf0>
 800624a:	f06f 0306 	mvn.w	r3, #6
 800624e:	e181      	b.n	8006554 <sendto+0x3f4>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	3308      	adds	r3, #8
 8006254:	019b      	lsls	r3, r3, #6
 8006256:	3314      	adds	r3, #20
 8006258:	4618      	mov	r0, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	b29a      	uxth	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3301      	adds	r3, #1
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	4413      	add	r3, r2
 800626e:	b29b      	uxth	r3, r3
 8006270:	4619      	mov	r1, r3
 8006272:	f7ff f8b5 	bl	80053e0 <WIZCHIP_WRITE>
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	3308      	adds	r3, #8
 800627a:	019b      	lsls	r3, r3, #6
 800627c:	3316      	adds	r3, #22
 800627e:	4618      	mov	r0, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3302      	adds	r3, #2
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3303      	adds	r3, #3
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	4413      	add	r3, r2
 8006296:	b29b      	uxth	r3, r3
 8006298:	4619      	mov	r1, r3
 800629a:	f7ff f8a1 	bl	80053e0 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	3308      	adds	r3, #8
 80062a2:	019b      	lsls	r3, r3, #6
 80062a4:	3312      	adds	r3, #18
 80062a6:	461a      	mov	r2, r3
 80062a8:	8c3b      	ldrh	r3, [r7, #32]
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f7ff f897 	bl	80053e0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff f908 	bl	80054ca <getTMSR>
 80062ba:	4603      	mov	r3, r0
 80062bc:	b29b      	uxth	r3, r3
 80062be:	029b      	lsls	r3, r3, #10
 80062c0:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80062c2:	89ba      	ldrh	r2, [r7, #12]
 80062c4:	8abb      	ldrh	r3, [r7, #20]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d901      	bls.n	80062ce <sendto+0x16e>
 80062ca:	8abb      	ldrh	r3, [r7, #20]
 80062cc:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff f979 	bl	80055c8 <getSn_TX_FSR>
 80062d6:	4603      	mov	r3, r0
 80062d8:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	3308      	adds	r3, #8
 80062de:	019b      	lsls	r3, r3, #6
 80062e0:	3308      	adds	r3, #8
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff f89a 	bl	800541c <WIZCHIP_READ>
 80062e8:	4603      	mov	r3, r0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d102      	bne.n	80062f6 <sendto+0x196>
 80062f0:	f06f 0303 	mvn.w	r3, #3
 80062f4:	e12e      	b.n	8006554 <sendto+0x3f4>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80062f6:	4b99      	ldr	r3, [pc, #612]	; (800655c <sendto+0x3fc>)
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	fa42 f303 	asr.w	r3, r2, r3
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <sendto+0x1b6>
 800630a:	89ba      	ldrh	r2, [r7, #12]
 800630c:	8abb      	ldrh	r3, [r7, #20]
 800630e:	429a      	cmp	r2, r3
 8006310:	d901      	bls.n	8006316 <sendto+0x1b6>
 8006312:	2300      	movs	r3, #0
 8006314:	e11e      	b.n	8006554 <sendto+0x3f4>
      if(len <= freesize) break;
 8006316:	89ba      	ldrh	r2, [r7, #12]
 8006318:	8abb      	ldrh	r3, [r7, #20]
 800631a:	429a      	cmp	r2, r3
 800631c:	d900      	bls.n	8006320 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 800631e:	e7d6      	b.n	80062ce <sendto+0x16e>
      if(len <= freesize) break;
 8006320:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8006322:	89ba      	ldrh	r2, [r7, #12]
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff f9a9 	bl	8005680 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 800632e:	2018      	movs	r0, #24
 8006330:	f7ff f874 	bl	800541c <WIZCHIP_READ>
 8006334:	4603      	mov	r3, r0
 8006336:	0a1b      	lsrs	r3, r3, #8
 8006338:	b29a      	uxth	r2, r3
 800633a:	f107 0310 	add.w	r3, r7, #16
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	2018      	movs	r0, #24
 8006344:	f7ff f86a 	bl	800541c <WIZCHIP_READ>
 8006348:	4603      	mov	r3, r0
 800634a:	461a      	mov	r2, r3
 800634c:	f107 0310 	add.w	r3, r7, #16
 8006350:	3301      	adds	r3, #1
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	201a      	movs	r0, #26
 8006358:	f7ff f860 	bl	800541c <WIZCHIP_READ>
 800635c:	4603      	mov	r3, r0
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	b29a      	uxth	r2, r3
 8006362:	f107 0310 	add.w	r3, r7, #16
 8006366:	3302      	adds	r3, #2
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	201a      	movs	r0, #26
 800636e:	f7ff f855 	bl	800541c <WIZCHIP_READ>
 8006372:	4603      	mov	r3, r0
 8006374:	461a      	mov	r2, r3
 8006376:	f107 0310 	add.w	r3, r7, #16
 800637a:	3303      	adds	r3, #3
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d145      	bne.n	8006412 <sendto+0x2b2>
      {
         getSUBR((uint8_t*)&taddr);
 8006386:	2014      	movs	r0, #20
 8006388:	f7ff f848 	bl	800541c <WIZCHIP_READ>
 800638c:	4603      	mov	r3, r0
 800638e:	0a1b      	lsrs	r3, r3, #8
 8006390:	b29a      	uxth	r2, r3
 8006392:	f107 0310 	add.w	r3, r7, #16
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	2014      	movs	r0, #20
 800639c:	f7ff f83e 	bl	800541c <WIZCHIP_READ>
 80063a0:	4603      	mov	r3, r0
 80063a2:	461a      	mov	r2, r3
 80063a4:	f107 0310 	add.w	r3, r7, #16
 80063a8:	3301      	adds	r3, #1
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	2016      	movs	r0, #22
 80063b0:	f7ff f834 	bl	800541c <WIZCHIP_READ>
 80063b4:	4603      	mov	r3, r0
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	f107 0310 	add.w	r3, r7, #16
 80063be:	3302      	adds	r3, #2
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	2016      	movs	r0, #22
 80063c6:	f7ff f829 	bl	800541c <WIZCHIP_READ>
 80063ca:	4603      	mov	r3, r0
 80063cc:	461a      	mov	r2, r3
 80063ce:	f107 0310 	add.w	r3, r7, #16
 80063d2:	3303      	adds	r3, #3
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 80063d8:	4b61      	ldr	r3, [pc, #388]	; (8006560 <sendto+0x400>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	4b60      	ldr	r3, [pc, #384]	; (8006564 <sendto+0x404>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	4619      	mov	r1, r3
 80063ee:	2014      	movs	r0, #20
 80063f0:	f7fe fff6 	bl	80053e0 <WIZCHIP_WRITE>
 80063f4:	4b5c      	ldr	r3, [pc, #368]	; (8006568 <sendto+0x408>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	4b5b      	ldr	r3, [pc, #364]	; (800656c <sendto+0x40c>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	4413      	add	r3, r2
 8006406:	b29b      	uxth	r3, r3
 8006408:	4619      	mov	r1, r3
 800640a:	2016      	movs	r0, #22
 800640c:	f7fe ffe8 	bl	80053e0 <WIZCHIP_WRITE>
 8006410:	e001      	b.n	8006416 <sendto+0x2b6>
      }
      else taddr = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	3308      	adds	r3, #8
 800641a:	019b      	lsls	r3, r3, #6
 800641c:	3320      	adds	r3, #32
 800641e:	461a      	mov	r2, r3
 8006420:	89bb      	ldrh	r3, [r7, #12]
 8006422:	0c1b      	lsrs	r3, r3, #16
 8006424:	b29b      	uxth	r3, r3
 8006426:	4619      	mov	r1, r3
 8006428:	4610      	mov	r0, r2
 800642a:	f7fe ffd9 	bl	80053e0 <WIZCHIP_WRITE>
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	3308      	adds	r3, #8
 8006432:	019b      	lsls	r3, r3, #6
 8006434:	3322      	adds	r3, #34	; 0x22
 8006436:	461a      	mov	r2, r3
 8006438:	89bb      	ldrh	r3, [r7, #12]
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f7fe ffcf 	bl	80053e0 <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	3308      	adds	r3, #8
 8006446:	019b      	lsls	r3, r3, #6
 8006448:	3302      	adds	r3, #2
 800644a:	2120      	movs	r1, #32
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe ffc7 	bl	80053e0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8006452:	bf00      	nop
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	3308      	adds	r3, #8
 8006458:	019b      	lsls	r3, r3, #6
 800645a:	3302      	adds	r3, #2
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe ffdd 	bl	800541c <WIZCHIP_READ>
 8006462:	4603      	mov	r3, r0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f4      	bne.n	8006454 <sendto+0x2f4>
   while(1)
   {
      tmp = getSn_IR(sn);
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	3308      	adds	r3, #8
 800646e:	019b      	lsls	r3, r3, #6
 8006470:	3306      	adds	r3, #6
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe ffd2 	bl	800541c <WIZCHIP_READ>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	f003 0310 	and.w	r3, r3, #16
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00c      	beq.n	80064a0 <sendto+0x340>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	3308      	adds	r3, #8
 800648a:	019b      	lsls	r3, r3, #6
 800648c:	3306      	adds	r3, #6
 800648e:	2110      	movs	r1, #16
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe ffa5 	bl	80053e0 <WIZCHIP_WRITE>
         break;
 8006496:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d059      	beq.n	8006552 <sendto+0x3f2>
 800649e:	e035      	b.n	800650c <sendto+0x3ac>
      else if(tmp & Sn_IR_TIMEOUT)
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0df      	beq.n	800646a <sendto+0x30a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	3308      	adds	r3, #8
 80064ae:	019b      	lsls	r3, r3, #6
 80064b0:	3306      	adds	r3, #6
 80064b2:	2108      	movs	r1, #8
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe ff93 	bl	80053e0 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d022      	beq.n	8006506 <sendto+0x3a6>
 80064c0:	f107 0310 	add.w	r3, r7, #16
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	021b      	lsls	r3, r3, #8
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	f107 0310 	add.w	r3, r7, #16
 80064d0:	3301      	adds	r3, #1
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4619      	mov	r1, r3
 80064dc:	2014      	movs	r0, #20
 80064de:	f7fe ff7f 	bl	80053e0 <WIZCHIP_WRITE>
 80064e2:	f107 0310 	add.w	r3, r7, #16
 80064e6:	3302      	adds	r3, #2
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	f107 0310 	add.w	r3, r7, #16
 80064f4:	3303      	adds	r3, #3
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	4413      	add	r3, r2
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	4619      	mov	r1, r3
 8006500:	2016      	movs	r0, #22
 8006502:	f7fe ff6d 	bl	80053e0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8006506:	f06f 030c 	mvn.w	r3, #12
 800650a:	e023      	b.n	8006554 <sendto+0x3f4>
      if(taddr) setSUBR((uint8_t*)&taddr);
 800650c:	f107 0310 	add.w	r3, r7, #16
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	b29a      	uxth	r2, r3
 8006518:	f107 0310 	add.w	r3, r7, #16
 800651c:	3301      	adds	r3, #1
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	4413      	add	r3, r2
 8006524:	b29b      	uxth	r3, r3
 8006526:	4619      	mov	r1, r3
 8006528:	2014      	movs	r0, #20
 800652a:	f7fe ff59 	bl	80053e0 <WIZCHIP_WRITE>
 800652e:	f107 0310 	add.w	r3, r7, #16
 8006532:	3302      	adds	r3, #2
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	021b      	lsls	r3, r3, #8
 800653a:	b29a      	uxth	r2, r3
 800653c:	f107 0310 	add.w	r3, r7, #16
 8006540:	3303      	adds	r3, #3
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	4413      	add	r3, r2
 8006548:	b29b      	uxth	r3, r3
 800654a:	4619      	mov	r1, r3
 800654c:	2016      	movs	r0, #22
 800654e:	f7fe ff47 	bl	80053e0 <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8006552:	89bb      	ldrh	r3, [r7, #12]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	200010c4 	.word	0x200010c4
 8006560:	08018348 	.word	0x08018348
 8006564:	08018349 	.word	0x08018349
 8006568:	0801834a 	.word	0x0801834a
 800656c:	0801834b 	.word	0x0801834b

08006570 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800657e:	b480      	push	{r7}
 8006580:	af00      	add	r7, sp, #0
 8006582:	bf00      	nop
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
 8006590:	bf00      	nop
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800659a:	b480      	push	{r7}
 800659c:	af00      	add	r7, sp, #0
 800659e:	bf00      	nop
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	807b      	strh	r3, [r7, #2]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	887a      	ldrh	r2, [r7, #2]
 80065d2:	801a      	strh	r2, [r3, #0]
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <reg_wizchip_cs_cbfunc+0x16>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d106      	bne.n	8006604 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80065f6:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <reg_wizchip_cs_cbfunc+0x40>)
 80065f8:	4a0a      	ldr	r2, [pc, #40]	; (8006624 <reg_wizchip_cs_cbfunc+0x44>)
 80065fa:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80065fc:	4b08      	ldr	r3, [pc, #32]	; (8006620 <reg_wizchip_cs_cbfunc+0x40>)
 80065fe:	4a0a      	ldr	r2, [pc, #40]	; (8006628 <reg_wizchip_cs_cbfunc+0x48>)
 8006600:	619a      	str	r2, [r3, #24]
 8006602:	e006      	b.n	8006612 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8006604:	4a06      	ldr	r2, [pc, #24]	; (8006620 <reg_wizchip_cs_cbfunc+0x40>)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800660a:	4a05      	ldr	r2, [pc, #20]	; (8006620 <reg_wizchip_cs_cbfunc+0x40>)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	6193      	str	r3, [r2, #24]
   }
}
 8006610:	bf00      	nop
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000014 	.word	0x20000014
 8006624:	0800658d 	.word	0x0800658d
 8006628:	0800659b 	.word	0x0800659b

0800662c <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8006636:	bf00      	nop
 8006638:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <reg_wizchip_bus_cbfunc+0x4c>)
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0f9      	beq.n	8006638 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <reg_wizchip_bus_cbfunc+0x24>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d106      	bne.n	800665e <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8006650:	4b09      	ldr	r3, [pc, #36]	; (8006678 <reg_wizchip_bus_cbfunc+0x4c>)
 8006652:	4a0a      	ldr	r2, [pc, #40]	; (800667c <reg_wizchip_bus_cbfunc+0x50>)
 8006654:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8006656:	4b08      	ldr	r3, [pc, #32]	; (8006678 <reg_wizchip_bus_cbfunc+0x4c>)
 8006658:	4a09      	ldr	r2, [pc, #36]	; (8006680 <reg_wizchip_bus_cbfunc+0x54>)
 800665a:	621a      	str	r2, [r3, #32]
 800665c:	e006      	b.n	800666c <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 800665e:	4a06      	ldr	r2, [pc, #24]	; (8006678 <reg_wizchip_bus_cbfunc+0x4c>)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8006664:	4a04      	ldr	r2, [pc, #16]	; (8006678 <reg_wizchip_bus_cbfunc+0x4c>)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6213      	str	r3, [r2, #32]
   }
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	20000014 	.word	0x20000014
 800667c:	080065a9 	.word	0x080065a9
 8006680:	080065c3 	.word	0x080065c3

08006684 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	6039      	str	r1, [r7, #0]
 800668e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8006690:	2300      	movs	r3, #0
 8006692:	60bb      	str	r3, [r7, #8]
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	2b08      	cmp	r3, #8
 800669c:	d863      	bhi.n	8006766 <ctlwizchip+0xe2>
 800669e:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <ctlwizchip+0x20>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066cf 	.word	0x080066cf
 80066ac:	080066fb 	.word	0x080066fb
 80066b0:	080066ef 	.word	0x080066ef
 80066b4:	08006709 	.word	0x08006709
 80066b8:	08006715 	.word	0x08006715
 80066bc:	08006767 	.word	0x08006767
 80066c0:	08006767 	.word	0x08006767
 80066c4:	08006723 	.word	0x08006723
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80066c8:	f000 f896 	bl	80067f8 <wizchip_sw_reset>
         break;
 80066cc:	e04e      	b.n	800676c <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	3308      	adds	r3, #8
 80066dc:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4611      	mov	r1, r2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 f97f 	bl	80069e8 <wizchip_init>
 80066ea:	4603      	mov	r3, r0
 80066ec:	e03f      	b.n	800676e <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fa0e 	bl	8006b14 <wizchip_clrinterrupt>
         break;
 80066f8:	e038      	b.n	800676c <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80066fa:	f000 fa2d 	bl	8006b58 <wizchip_getinterrupt>
 80066fe:	4603      	mov	r3, r0
 8006700:	461a      	mov	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	801a      	strh	r2, [r3, #0]
         break;
 8006706:	e031      	b.n	800676c <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fa47 	bl	8006ba0 <wizchip_setinterruptmask>
         break;         
 8006712:	e02b      	b.n	800676c <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8006714:	f000 fa66 	bl	8006be4 <wizchip_getinterruptmask>
 8006718:	4603      	mov	r3, r0
 800671a:	461a      	mov	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	801a      	strh	r2, [r3, #0]
         break;
 8006720:	e024      	b.n	800676c <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <ctlwizchip+0xf4>)
 8006724:	789a      	ldrb	r2, [r3, #2]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	3301      	adds	r3, #1
 800672e:	4a12      	ldr	r2, [pc, #72]	; (8006778 <ctlwizchip+0xf4>)
 8006730:	78d2      	ldrb	r2, [r2, #3]
 8006732:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	3302      	adds	r3, #2
 8006738:	4a0f      	ldr	r2, [pc, #60]	; (8006778 <ctlwizchip+0xf4>)
 800673a:	7912      	ldrb	r2, [r2, #4]
 800673c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	3303      	adds	r3, #3
 8006742:	4a0d      	ldr	r2, [pc, #52]	; (8006778 <ctlwizchip+0xf4>)
 8006744:	7952      	ldrb	r2, [r2, #5]
 8006746:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	3304      	adds	r3, #4
 800674c:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <ctlwizchip+0xf4>)
 800674e:	7992      	ldrb	r2, [r2, #6]
 8006750:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	3305      	adds	r3, #5
 8006756:	4a08      	ldr	r2, [pc, #32]	; (8006778 <ctlwizchip+0xf4>)
 8006758:	79d2      	ldrb	r2, [r2, #7]
 800675a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	3306      	adds	r3, #6
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
         break;
 8006764:	e002      	b.n	800676c <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8006766:	f04f 33ff 	mov.w	r3, #4294967295
 800676a:	e000      	b.n	800676e <ctlwizchip+0xea>
   }
   return 0;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000014 	.word	0x20000014

0800677c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	6039      	str	r1, [r7, #0]
 8006786:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	2b05      	cmp	r3, #5
 800678c:	d82c      	bhi.n	80067e8 <ctlnetwork+0x6c>
 800678e:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <ctlnetwork+0x18>)
 8006790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006794:	080067ad 	.word	0x080067ad
 8006798:	080067b5 	.word	0x080067b5
 800679c:	080067bd 	.word	0x080067bd
 80067a0:	080067cb 	.word	0x080067cb
 80067a4:	080067d9 	.word	0x080067d9
 80067a8:	080067e1 	.word	0x080067e1
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80067ac:	6838      	ldr	r0, [r7, #0]
 80067ae:	f000 fa41 	bl	8006c34 <wizchip_setnetinfo>
         break;
 80067b2:	e01c      	b.n	80067ee <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80067b4:	6838      	ldr	r0, [r7, #0]
 80067b6:	f000 fadb 	bl	8006d70 <wizchip_getnetinfo>
         break;
 80067ba:	e018      	b.n	80067ee <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fb85 	bl	8006ed0 <wizchip_setnetmode>
 80067c6:	4603      	mov	r3, r0
 80067c8:	e012      	b.n	80067f0 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80067ca:	f000 fba4 	bl	8006f16 <wizchip_getnetmode>
 80067ce:	4603      	mov	r3, r0
 80067d0:	461a      	mov	r2, r3
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	701a      	strb	r2, [r3, #0]
         break;
 80067d6:	e00a      	b.n	80067ee <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80067d8:	6838      	ldr	r0, [r7, #0]
 80067da:	f000 fba5 	bl	8006f28 <wizchip_settimeout>
         break;
 80067de:	e006      	b.n	80067ee <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80067e0:	6838      	ldr	r0, [r7, #0]
 80067e2:	f000 fbb6 	bl	8006f52 <wizchip_gettimeout>
         break;
 80067e6:	e002      	b.n	80067ee <ctlnetwork+0x72>
      default:
         return -1;
 80067e8:	f04f 33ff 	mov.w	r3, #4294967295
 80067ec:	e000      	b.n	80067f0 <ctlnetwork+0x74>
   }
   return 0;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80067fe:	2008      	movs	r0, #8
 8006800:	f7fe fe0c 	bl	800541c <WIZCHIP_READ>
 8006804:	4603      	mov	r3, r0
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	b29b      	uxth	r3, r3
 800680a:	b2db      	uxtb	r3, r3
 800680c:	713b      	strb	r3, [r7, #4]
 800680e:	2008      	movs	r0, #8
 8006810:	f7fe fe04 	bl	800541c <WIZCHIP_READ>
 8006814:	4603      	mov	r3, r0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	717b      	strb	r3, [r7, #5]
 800681a:	200a      	movs	r0, #10
 800681c:	f7fe fdfe 	bl	800541c <WIZCHIP_READ>
 8006820:	4603      	mov	r3, r0
 8006822:	0a1b      	lsrs	r3, r3, #8
 8006824:	b29b      	uxth	r3, r3
 8006826:	b2db      	uxtb	r3, r3
 8006828:	71bb      	strb	r3, [r7, #6]
 800682a:	200a      	movs	r0, #10
 800682c:	f7fe fdf6 	bl	800541c <WIZCHIP_READ>
 8006830:	4603      	mov	r3, r0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	71fb      	strb	r3, [r7, #7]
 8006836:	200c      	movs	r0, #12
 8006838:	f7fe fdf0 	bl	800541c <WIZCHIP_READ>
 800683c:	4603      	mov	r3, r0
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	b29b      	uxth	r3, r3
 8006842:	b2db      	uxtb	r3, r3
 8006844:	723b      	strb	r3, [r7, #8]
 8006846:	200c      	movs	r0, #12
 8006848:	f7fe fde8 	bl	800541c <WIZCHIP_READ>
 800684c:	4603      	mov	r3, r0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8006852:	2010      	movs	r0, #16
 8006854:	f7fe fde2 	bl	800541c <WIZCHIP_READ>
 8006858:	4603      	mov	r3, r0
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	b29b      	uxth	r3, r3
 800685e:	b2db      	uxtb	r3, r3
 8006860:	753b      	strb	r3, [r7, #20]
 8006862:	2010      	movs	r0, #16
 8006864:	f7fe fdda 	bl	800541c <WIZCHIP_READ>
 8006868:	4603      	mov	r3, r0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	757b      	strb	r3, [r7, #21]
 800686e:	2012      	movs	r0, #18
 8006870:	f7fe fdd4 	bl	800541c <WIZCHIP_READ>
 8006874:	4603      	mov	r3, r0
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	b29b      	uxth	r3, r3
 800687a:	b2db      	uxtb	r3, r3
 800687c:	75bb      	strb	r3, [r7, #22]
 800687e:	2012      	movs	r0, #18
 8006880:	f7fe fdcc 	bl	800541c <WIZCHIP_READ>
 8006884:	4603      	mov	r3, r0
 8006886:	b2db      	uxtb	r3, r3
 8006888:	75fb      	strb	r3, [r7, #23]
 800688a:	2014      	movs	r0, #20
 800688c:	f7fe fdc6 	bl	800541c <WIZCHIP_READ>
 8006890:	4603      	mov	r3, r0
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	b29b      	uxth	r3, r3
 8006896:	b2db      	uxtb	r3, r3
 8006898:	743b      	strb	r3, [r7, #16]
 800689a:	2014      	movs	r0, #20
 800689c:	f7fe fdbe 	bl	800541c <WIZCHIP_READ>
 80068a0:	4603      	mov	r3, r0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	747b      	strb	r3, [r7, #17]
 80068a6:	2016      	movs	r0, #22
 80068a8:	f7fe fdb8 	bl	800541c <WIZCHIP_READ>
 80068ac:	4603      	mov	r3, r0
 80068ae:	0a1b      	lsrs	r3, r3, #8
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	74bb      	strb	r3, [r7, #18]
 80068b6:	2016      	movs	r0, #22
 80068b8:	f7fe fdb0 	bl	800541c <WIZCHIP_READ>
 80068bc:	4603      	mov	r3, r0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	74fb      	strb	r3, [r7, #19]
 80068c2:	2018      	movs	r0, #24
 80068c4:	f7fe fdaa 	bl	800541c <WIZCHIP_READ>
 80068c8:	4603      	mov	r3, r0
 80068ca:	0a1b      	lsrs	r3, r3, #8
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	733b      	strb	r3, [r7, #12]
 80068d2:	2018      	movs	r0, #24
 80068d4:	f7fe fda2 	bl	800541c <WIZCHIP_READ>
 80068d8:	4603      	mov	r3, r0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	737b      	strb	r3, [r7, #13]
 80068de:	201a      	movs	r0, #26
 80068e0:	f7fe fd9c 	bl	800541c <WIZCHIP_READ>
 80068e4:	4603      	mov	r3, r0
 80068e6:	0a1b      	lsrs	r3, r3, #8
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	73bb      	strb	r3, [r7, #14]
 80068ee:	201a      	movs	r0, #26
 80068f0:	f7fe fd94 	bl	800541c <WIZCHIP_READ>
 80068f4:	4603      	mov	r3, r0
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 80068fa:	2180      	movs	r1, #128	; 0x80
 80068fc:	2000      	movs	r0, #0
 80068fe:	f7fe fd6f 	bl	80053e0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8006902:	2000      	movs	r0, #0
 8006904:	f7fe fd8a 	bl	800541c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8006908:	793b      	ldrb	r3, [r7, #4]
 800690a:	b29b      	uxth	r3, r3
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	b29a      	uxth	r2, r3
 8006910:	797b      	ldrb	r3, [r7, #5]
 8006912:	b29b      	uxth	r3, r3
 8006914:	4413      	add	r3, r2
 8006916:	b29b      	uxth	r3, r3
 8006918:	4619      	mov	r1, r3
 800691a:	2008      	movs	r0, #8
 800691c:	f7fe fd60 	bl	80053e0 <WIZCHIP_WRITE>
 8006920:	79bb      	ldrb	r3, [r7, #6]
 8006922:	b29b      	uxth	r3, r3
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	b29a      	uxth	r2, r3
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	b29b      	uxth	r3, r3
 800692c:	4413      	add	r3, r2
 800692e:	b29b      	uxth	r3, r3
 8006930:	4619      	mov	r1, r3
 8006932:	200a      	movs	r0, #10
 8006934:	f7fe fd54 	bl	80053e0 <WIZCHIP_WRITE>
 8006938:	7a3b      	ldrb	r3, [r7, #8]
 800693a:	b29b      	uxth	r3, r3
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	b29a      	uxth	r2, r3
 8006940:	7a7b      	ldrb	r3, [r7, #9]
 8006942:	b29b      	uxth	r3, r3
 8006944:	4413      	add	r3, r2
 8006946:	b29b      	uxth	r3, r3
 8006948:	4619      	mov	r1, r3
 800694a:	200c      	movs	r0, #12
 800694c:	f7fe fd48 	bl	80053e0 <WIZCHIP_WRITE>
   setGAR(gw);
 8006950:	7d3b      	ldrb	r3, [r7, #20]
 8006952:	b29b      	uxth	r3, r3
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	b29a      	uxth	r2, r3
 8006958:	7d7b      	ldrb	r3, [r7, #21]
 800695a:	b29b      	uxth	r3, r3
 800695c:	4413      	add	r3, r2
 800695e:	b29b      	uxth	r3, r3
 8006960:	4619      	mov	r1, r3
 8006962:	2010      	movs	r0, #16
 8006964:	f7fe fd3c 	bl	80053e0 <WIZCHIP_WRITE>
 8006968:	7dbb      	ldrb	r3, [r7, #22]
 800696a:	b29b      	uxth	r3, r3
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	b29a      	uxth	r2, r3
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	b29b      	uxth	r3, r3
 8006974:	4413      	add	r3, r2
 8006976:	b29b      	uxth	r3, r3
 8006978:	4619      	mov	r1, r3
 800697a:	2012      	movs	r0, #18
 800697c:	f7fe fd30 	bl	80053e0 <WIZCHIP_WRITE>
   setSUBR(sn);
 8006980:	7c3b      	ldrb	r3, [r7, #16]
 8006982:	b29b      	uxth	r3, r3
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	b29a      	uxth	r2, r3
 8006988:	7c7b      	ldrb	r3, [r7, #17]
 800698a:	b29b      	uxth	r3, r3
 800698c:	4413      	add	r3, r2
 800698e:	b29b      	uxth	r3, r3
 8006990:	4619      	mov	r1, r3
 8006992:	2014      	movs	r0, #20
 8006994:	f7fe fd24 	bl	80053e0 <WIZCHIP_WRITE>
 8006998:	7cbb      	ldrb	r3, [r7, #18]
 800699a:	b29b      	uxth	r3, r3
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	b29a      	uxth	r2, r3
 80069a0:	7cfb      	ldrb	r3, [r7, #19]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	4413      	add	r3, r2
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	2016      	movs	r0, #22
 80069ac:	f7fe fd18 	bl	80053e0 <WIZCHIP_WRITE>
   setSIPR(sip);
 80069b0:	7b3b      	ldrb	r3, [r7, #12]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	7b7b      	ldrb	r3, [r7, #13]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	4413      	add	r3, r2
 80069be:	b29b      	uxth	r3, r3
 80069c0:	4619      	mov	r1, r3
 80069c2:	2018      	movs	r0, #24
 80069c4:	f7fe fd0c 	bl	80053e0 <WIZCHIP_WRITE>
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	4619      	mov	r1, r3
 80069da:	201a      	movs	r0, #26
 80069dc:	f7fe fd00 	bl	80053e0 <WIZCHIP_WRITE>
}
 80069e0:	bf00      	nop
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80069f6:	f7ff feff 	bl	80067f8 <wizchip_sw_reset>
   if(txsize)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d040      	beq.n	8006a82 <wizchip_init+0x9a>
   {
      tmp = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	73bb      	strb	r3, [r7, #14]
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006a04:	2300      	movs	r3, #0
 8006a06:	73fb      	strb	r3, [r7, #15]
 8006a08:	e018      	b.n	8006a3c <wizchip_init+0x54>
		{
			if(txsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8006a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b40      	cmp	r3, #64	; 0x40
 8006a16:	d902      	bls.n	8006a1e <wizchip_init+0x36>
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1c:	e076      	b.n	8006b0c <wizchip_init+0x124>
			tmp += txsize[i];
 8006a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	4413      	add	r3, r2
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	3301      	adds	r3, #1
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	73fb      	strb	r3, [r7, #15]
 8006a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a40:	2b07      	cmp	r3, #7
 8006a42:	dde2      	ble.n	8006a0a <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <wizchip_init+0x6e>
 8006a50:	f04f 33ff 	mov.w	r3, #4294967295
 8006a54:	e05a      	b.n	8006b0c <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
 8006a5a:	e00e      	b.n	8006a7a <wizchip_init+0x92>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006a5c:	7bf8      	ldrb	r0, [r7, #15]
 8006a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	4413      	add	r3, r2
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	f7fe fcf5 	bl	8005458 <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	3301      	adds	r3, #1
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	73fb      	strb	r3, [r7, #15]
 8006a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a7e:	2b07      	cmp	r3, #7
 8006a80:	ddec      	ble.n	8006a5c <wizchip_init+0x74>
#endif
		}	
   }

   if(rxsize)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d040      	beq.n	8006b0a <wizchip_init+0x122>
   {
      tmp = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]
 8006a90:	e018      	b.n	8006ac4 <wizchip_init+0xdc>
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8006a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	4413      	add	r3, r2
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	d902      	bls.n	8006aa6 <wizchip_init+0xbe>
 8006aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa4:	e032      	b.n	8006b0c <wizchip_init+0x124>
			tmp += rxsize[i];
 8006aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	4413      	add	r3, r2
 8006aae:	781a      	ldrb	r2, [r3, #0]
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	3301      	adds	r3, #1
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	73fb      	strb	r3, [r7, #15]
 8006ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ac8:	2b07      	cmp	r3, #7
 8006aca:	dde2      	ble.n	8006a92 <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <wizchip_init+0xf6>
 8006ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8006adc:	e016      	b.n	8006b0c <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
 8006ae2:	e00e      	b.n	8006b02 <wizchip_init+0x11a>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8006ae4:	7bf8      	ldrb	r0, [r7, #15]
 8006ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	4413      	add	r3, r2
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	4619      	mov	r1, r3
 8006af2:	f7fe fd0d 	bl	8005510 <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	3301      	adds	r3, #1
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	73fb      	strb	r3, [r7, #15]
 8006b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b06:	2b07      	cmp	r3, #7
 8006b08:	ddec      	ble.n	8006ae4 <wizchip_init+0xfc>
#endif
		}
   }
   return 0;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8006b1e:	88fb      	ldrh	r3, [r7, #6]
 8006b20:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8006b22:	88fb      	ldrh	r3, [r7, #6]
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	f043 0310 	orr.w	r3, r3, #16
 8006b30:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	b21a      	sxth	r2, r3
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	b21b      	sxth	r3, r3
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	b21b      	sxth	r3, r3
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	4619      	mov	r1, r3
 8006b4a:	2002      	movs	r0, #2
 8006b4c:	f7fe fc48 	bl	80053e0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 8006b6a:	2002      	movs	r0, #2
 8006b6c:	f7fe fc56 	bl	800541c <WIZCHIP_READ>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b76:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 8006b78:	88bb      	ldrh	r3, [r7, #4]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 8006b80:	88bb      	ldrh	r3, [r7, #4]
 8006b82:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8006b84:	79bb      	ldrb	r3, [r7, #6]
 8006b86:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8006b88:	88bb      	ldrh	r3, [r7, #4]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006b96:	88bb      	ldrh	r3, [r7, #4]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	f023 0310 	bic.w	r3, r3, #16
 8006bbc:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	b21a      	sxth	r2, r3
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	b21b      	sxth	r3, r3
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	b21b      	sxth	r3, r3
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	2004      	movs	r0, #4
 8006bd8:	f7fe fc02 	bl	80053e0 <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 8006bf6:	2004      	movs	r0, #4
 8006bf8:	f7fe fc10 	bl	800541c <WIZCHIP_READ>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c02:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 8006c04:	88bb      	ldrh	r3, [r7, #4]
 8006c06:	0a1b      	lsrs	r3, r3, #8
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8006c0c:	88bb      	ldrh	r3, [r7, #4]
 8006c0e:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	f023 0310 	bic.w	r3, r3, #16
 8006c16:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8006c18:	79bb      	ldrb	r3, [r7, #6]
 8006c1a:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006c1c:	88bb      	ldrh	r3, [r7, #4]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	4413      	add	r3, r2
 8006c28:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006c2a:	88bb      	ldrh	r3, [r7, #4]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	4619      	mov	r1, r3
 8006c52:	2008      	movs	r0, #8
 8006c54:	f7fe fbc4 	bl	80053e0 <WIZCHIP_WRITE>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	789b      	ldrb	r3, [r3, #2]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	78db      	ldrb	r3, [r3, #3]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	4413      	add	r3, r2
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	200a      	movs	r0, #10
 8006c70:	f7fe fbb6 	bl	80053e0 <WIZCHIP_WRITE>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	791b      	ldrb	r3, [r3, #4]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	795b      	ldrb	r3, [r3, #5]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	4413      	add	r3, r2
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4619      	mov	r1, r3
 8006c8a:	200c      	movs	r0, #12
 8006c8c:	f7fe fba8 	bl	80053e0 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7b9b      	ldrb	r3, [r3, #14]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	7bdb      	ldrb	r3, [r3, #15]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	2010      	movs	r0, #16
 8006ca8:	f7fe fb9a 	bl	80053e0 <WIZCHIP_WRITE>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	7c1b      	ldrb	r3, [r3, #16]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7c5b      	ldrb	r3, [r3, #17]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	4413      	add	r3, r2
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	2012      	movs	r0, #18
 8006cc4:	f7fe fb8c 	bl	80053e0 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7a9b      	ldrb	r3, [r3, #10]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7adb      	ldrb	r3, [r3, #11]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	4413      	add	r3, r2
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	4619      	mov	r1, r3
 8006cde:	2014      	movs	r0, #20
 8006ce0:	f7fe fb7e 	bl	80053e0 <WIZCHIP_WRITE>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	7b1b      	ldrb	r3, [r3, #12]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7b5b      	ldrb	r3, [r3, #13]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	2016      	movs	r0, #22
 8006cfc:	f7fe fb70 	bl	80053e0 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	799b      	ldrb	r3, [r3, #6]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	79db      	ldrb	r3, [r3, #7]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	4413      	add	r3, r2
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4619      	mov	r1, r3
 8006d16:	2018      	movs	r0, #24
 8006d18:	f7fe fb62 	bl	80053e0 <WIZCHIP_WRITE>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7a1b      	ldrb	r3, [r3, #8]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	7a5b      	ldrb	r3, [r3, #9]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	4619      	mov	r1, r3
 8006d32:	201a      	movs	r0, #26
 8006d34:	f7fe fb54 	bl	80053e0 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	7c9a      	ldrb	r2, [r3, #18]
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <wizchip_setnetinfo+0x134>)
 8006d3e:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	7cda      	ldrb	r2, [r3, #19]
 8006d44:	4b08      	ldr	r3, [pc, #32]	; (8006d68 <wizchip_setnetinfo+0x134>)
 8006d46:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7d1a      	ldrb	r2, [r3, #20]
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <wizchip_setnetinfo+0x134>)
 8006d4e:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7d5a      	ldrb	r2, [r3, #21]
 8006d54:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <wizchip_setnetinfo+0x134>)
 8006d56:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	7d9a      	ldrb	r2, [r3, #22]
 8006d5c:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <wizchip_setnetinfo+0x138>)
 8006d5e:	701a      	strb	r2, [r3, #0]
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	200010e8 	.word	0x200010e8
 8006d6c:	200010ec 	.word	0x200010ec

08006d70 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8006d78:	2008      	movs	r0, #8
 8006d7a:	f7fe fb4f 	bl	800541c <WIZCHIP_READ>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	0a1b      	lsrs	r3, r3, #8
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	2008      	movs	r0, #8
 8006d8c:	f7fe fb46 	bl	800541c <WIZCHIP_READ>
 8006d90:	4603      	mov	r3, r0
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	705a      	strb	r2, [r3, #1]
 8006d98:	200a      	movs	r0, #10
 8006d9a:	f7fe fb3f 	bl	800541c <WIZCHIP_READ>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	0a1b      	lsrs	r3, r3, #8
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	709a      	strb	r2, [r3, #2]
 8006daa:	200a      	movs	r0, #10
 8006dac:	f7fe fb36 	bl	800541c <WIZCHIP_READ>
 8006db0:	4603      	mov	r3, r0
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	70da      	strb	r2, [r3, #3]
 8006db8:	200c      	movs	r0, #12
 8006dba:	f7fe fb2f 	bl	800541c <WIZCHIP_READ>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	0a1b      	lsrs	r3, r3, #8
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	711a      	strb	r2, [r3, #4]
 8006dca:	200c      	movs	r0, #12
 8006dcc:	f7fe fb26 	bl	800541c <WIZCHIP_READ>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8006dd8:	2010      	movs	r0, #16
 8006dda:	f7fe fb1f 	bl	800541c <WIZCHIP_READ>
 8006dde:	4603      	mov	r3, r0
 8006de0:	0a1b      	lsrs	r3, r3, #8
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	739a      	strb	r2, [r3, #14]
 8006dea:	2010      	movs	r0, #16
 8006dec:	f7fe fb16 	bl	800541c <WIZCHIP_READ>
 8006df0:	4603      	mov	r3, r0
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	73da      	strb	r2, [r3, #15]
 8006df8:	2012      	movs	r0, #18
 8006dfa:	f7fe fb0f 	bl	800541c <WIZCHIP_READ>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	0a1b      	lsrs	r3, r3, #8
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	741a      	strb	r2, [r3, #16]
 8006e0a:	2012      	movs	r0, #18
 8006e0c:	f7fe fb06 	bl	800541c <WIZCHIP_READ>
 8006e10:	4603      	mov	r3, r0
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 8006e18:	2014      	movs	r0, #20
 8006e1a:	f7fe faff 	bl	800541c <WIZCHIP_READ>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	0a1b      	lsrs	r3, r3, #8
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	729a      	strb	r2, [r3, #10]
 8006e2a:	2014      	movs	r0, #20
 8006e2c:	f7fe faf6 	bl	800541c <WIZCHIP_READ>
 8006e30:	4603      	mov	r3, r0
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	72da      	strb	r2, [r3, #11]
 8006e38:	2016      	movs	r0, #22
 8006e3a:	f7fe faef 	bl	800541c <WIZCHIP_READ>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	0a1b      	lsrs	r3, r3, #8
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	731a      	strb	r2, [r3, #12]
 8006e4a:	2016      	movs	r0, #22
 8006e4c:	f7fe fae6 	bl	800541c <WIZCHIP_READ>
 8006e50:	4603      	mov	r3, r0
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 8006e58:	2018      	movs	r0, #24
 8006e5a:	f7fe fadf 	bl	800541c <WIZCHIP_READ>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	719a      	strb	r2, [r3, #6]
 8006e6a:	2018      	movs	r0, #24
 8006e6c:	f7fe fad6 	bl	800541c <WIZCHIP_READ>
 8006e70:	4603      	mov	r3, r0
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	71da      	strb	r2, [r3, #7]
 8006e78:	201a      	movs	r0, #26
 8006e7a:	f7fe facf 	bl	800541c <WIZCHIP_READ>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	0a1b      	lsrs	r3, r3, #8
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	721a      	strb	r2, [r3, #8]
 8006e8a:	201a      	movs	r0, #26
 8006e8c:	f7fe fac6 	bl	800541c <WIZCHIP_READ>
 8006e90:	4603      	mov	r3, r0
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 8006e98:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <wizchip_getnetinfo+0x158>)
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8006ea0:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <wizchip_getnetinfo+0x158>)
 8006ea2:	785a      	ldrb	r2, [r3, #1]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006ea8:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <wizchip_getnetinfo+0x158>)
 8006eaa:	789a      	ldrb	r2, [r3, #2]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8006eb0:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <wizchip_getnetinfo+0x158>)
 8006eb2:	78da      	ldrb	r2, [r3, #3]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <wizchip_getnetinfo+0x15c>)
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	759a      	strb	r2, [r3, #22]
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	200010e8 	.word	0x200010e8
 8006ecc:	200010ec 	.word	0x200010ec

08006ed0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <wizchip_setnetmode+0x1e>
 8006ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eec:	e00f      	b.n	8006f0e <wizchip_setnetmode+0x3e>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f7fe fa94 	bl	800541c <WIZCHIP_READ>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8006ef8:	7bfa      	ldrb	r2, [r7, #15]
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	4619      	mov	r1, r3
 8006f06:	2000      	movs	r0, #0
 8006f08:	f7fe fa6a 	bl	80053e0 <WIZCHIP_WRITE>
   return 0;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	f7fe fa7e 	bl	800541c <WIZCHIP_READ>
 8006f20:	4603      	mov	r3, r0
 8006f22:	b2db      	uxtb	r3, r3
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4619      	mov	r1, r3
 8006f38:	201e      	movs	r0, #30
 8006f3a:	f7fe fa51 	bl	80053e0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	885b      	ldrh	r3, [r3, #2]
 8006f42:	4619      	mov	r1, r3
 8006f44:	201c      	movs	r0, #28
 8006f46:	f7fe fa4b 	bl	80053e0 <WIZCHIP_WRITE>
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b082      	sub	sp, #8
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8006f5a:	201e      	movs	r0, #30
 8006f5c:	f7fe fa5e 	bl	800541c <WIZCHIP_READ>
 8006f60:	4603      	mov	r3, r0
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8006f68:	201c      	movs	r0, #28
 8006f6a:	f7fe fa57 	bl	800541c <WIZCHIP_READ>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	461a      	mov	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	805a      	strh	r2, [r3, #2]
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 8006f7e:	b590      	push	{r4, r7, lr}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	e02e      	b.n	8006fee <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	441a      	add	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	440b      	add	r3, r1
 8006f9c:	7812      	ldrb	r2, [r2, #0]
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b25      	cmp	r3, #37	; 0x25
 8006fa4:	d11d      	bne.n	8006fe2 <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	4413      	add	r3, r2
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fc08 	bl	80077c6 <C2D>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	b2dc      	uxtb	r4, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	3302      	adds	r3, #2
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fbfd 	bl	80077c6 <C2D>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	4619      	mov	r1, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	1862      	adds	r2, r4, r1
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	701a      	strb	r2, [r3, #0]
			y+=2;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	3302      	adds	r3, #2
 8006fe0:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	3301      	adds	r3, #1
 8006fec:	60bb      	str	r3, [r7, #8]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1ca      	bne.n	8006f90 <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	4413      	add	r3, r2
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	bd90      	pop	{r4, r7, pc}

0800700c <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	460b      	mov	r3, r1
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 800701a:	7afb      	ldrb	r3, [r7, #11]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d102      	bne.n	8007026 <make_http_response_head+0x1a>
 8007020:	4b42      	ldr	r3, [pc, #264]	; (800712c <make_http_response_head+0x120>)
 8007022:	61fb      	str	r3, [r7, #28]
 8007024:	e061      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d102      	bne.n	8007032 <make_http_response_head+0x26>
 800702c:	4b40      	ldr	r3, [pc, #256]	; (8007130 <make_http_response_head+0x124>)
 800702e:	61fb      	str	r3, [r7, #28]
 8007030:	e05b      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 8007032:	7afb      	ldrb	r3, [r7, #11]
 8007034:	2b03      	cmp	r3, #3
 8007036:	d102      	bne.n	800703e <make_http_response_head+0x32>
 8007038:	4b3e      	ldr	r3, [pc, #248]	; (8007134 <make_http_response_head+0x128>)
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	e055      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 800703e:	7afb      	ldrb	r3, [r7, #11]
 8007040:	2b04      	cmp	r3, #4
 8007042:	d102      	bne.n	800704a <make_http_response_head+0x3e>
 8007044:	4b3c      	ldr	r3, [pc, #240]	; (8007138 <make_http_response_head+0x12c>)
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	e04f      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	2b05      	cmp	r3, #5
 800704e:	d102      	bne.n	8007056 <make_http_response_head+0x4a>
 8007050:	4b3a      	ldr	r3, [pc, #232]	; (800713c <make_http_response_head+0x130>)
 8007052:	61fb      	str	r3, [r7, #28]
 8007054:	e049      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 8007056:	7afb      	ldrb	r3, [r7, #11]
 8007058:	2b09      	cmp	r3, #9
 800705a:	d102      	bne.n	8007062 <make_http_response_head+0x56>
 800705c:	4b38      	ldr	r3, [pc, #224]	; (8007140 <make_http_response_head+0x134>)
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	e043      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 8007062:	7afb      	ldrb	r3, [r7, #11]
 8007064:	2b0a      	cmp	r3, #10
 8007066:	d102      	bne.n	800706e <make_http_response_head+0x62>
 8007068:	4b36      	ldr	r3, [pc, #216]	; (8007144 <make_http_response_head+0x138>)
 800706a:	61fb      	str	r3, [r7, #28]
 800706c:	e03d      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 800706e:	7afb      	ldrb	r3, [r7, #11]
 8007070:	2b0c      	cmp	r3, #12
 8007072:	d102      	bne.n	800707a <make_http_response_head+0x6e>
 8007074:	4b34      	ldr	r3, [pc, #208]	; (8007148 <make_http_response_head+0x13c>)
 8007076:	61fb      	str	r3, [r7, #28]
 8007078:	e037      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	2b0b      	cmp	r3, #11
 800707e:	d102      	bne.n	8007086 <make_http_response_head+0x7a>
 8007080:	4b32      	ldr	r3, [pc, #200]	; (800714c <make_http_response_head+0x140>)
 8007082:	61fb      	str	r3, [r7, #28]
 8007084:	e031      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
 8007086:	7afb      	ldrb	r3, [r7, #11]
 8007088:	2b08      	cmp	r3, #8
 800708a:	d102      	bne.n	8007092 <make_http_response_head+0x86>
 800708c:	4b30      	ldr	r3, [pc, #192]	; (8007150 <make_http_response_head+0x144>)
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	e02b      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 8007092:	7afb      	ldrb	r3, [r7, #11]
 8007094:	2b0d      	cmp	r3, #13
 8007096:	d102      	bne.n	800709e <make_http_response_head+0x92>
 8007098:	4b2e      	ldr	r3, [pc, #184]	; (8007154 <make_http_response_head+0x148>)
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e025      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 800709e:	7afb      	ldrb	r3, [r7, #11]
 80070a0:	2b0e      	cmp	r3, #14
 80070a2:	d102      	bne.n	80070aa <make_http_response_head+0x9e>
 80070a4:	4b2c      	ldr	r3, [pc, #176]	; (8007158 <make_http_response_head+0x14c>)
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	e01f      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 80070aa:	7afb      	ldrb	r3, [r7, #11]
 80070ac:	2b14      	cmp	r3, #20
 80070ae:	d102      	bne.n	80070b6 <make_http_response_head+0xaa>
 80070b0:	4b2a      	ldr	r3, [pc, #168]	; (800715c <make_http_response_head+0x150>)
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e019      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	2b15      	cmp	r3, #21
 80070ba:	d102      	bne.n	80070c2 <make_http_response_head+0xb6>
 80070bc:	4b28      	ldr	r3, [pc, #160]	; (8007160 <make_http_response_head+0x154>)
 80070be:	61fb      	str	r3, [r7, #28]
 80070c0:	e013      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 80070c2:	7afb      	ldrb	r3, [r7, #11]
 80070c4:	2b16      	cmp	r3, #22
 80070c6:	d102      	bne.n	80070ce <make_http_response_head+0xc2>
 80070c8:	4b26      	ldr	r3, [pc, #152]	; (8007164 <make_http_response_head+0x158>)
 80070ca:	61fb      	str	r3, [r7, #28]
 80070cc:	e00d      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 80070ce:	7afb      	ldrb	r3, [r7, #11]
 80070d0:	2b17      	cmp	r3, #23
 80070d2:	d102      	bne.n	80070da <make_http_response_head+0xce>
 80070d4:	4b24      	ldr	r3, [pc, #144]	; (8007168 <make_http_response_head+0x15c>)
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	e007      	b.n	80070ea <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	2b18      	cmp	r3, #24
 80070de:	d102      	bne.n	80070e6 <make_http_response_head+0xda>
 80070e0:	4b22      	ldr	r3, [pc, #136]	; (800716c <make_http_response_head+0x160>)
 80070e2:	61fb      	str	r3, [r7, #28]
 80070e4:	e001      	b.n	80070ea <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 80070ea:	f107 0310 	add.w	r3, r7, #16
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	491f      	ldr	r1, [pc, #124]	; (8007170 <make_http_response_head+0x164>)
 80070f2:	4618      	mov	r0, r3
 80070f4:	f001 ff2e 	bl	8008f54 <siprintf>
	strcpy(buf, head);
 80070f8:	69f9      	ldr	r1, [r7, #28]
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f002 f968 	bl	80093d0 <strcpy>
	strcat(buf, tmp);
 8007100:	f107 0310 	add.w	r3, r7, #16
 8007104:	4619      	mov	r1, r3
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f002 f83e 	bl	8009188 <strcat>
	strcat(buf, "\r\n\r\n");
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7f9 f891 	bl	8000234 <strlen>
 8007112:	4603      	mov	r3, r0
 8007114:	461a      	mov	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	4a16      	ldr	r2, [pc, #88]	; (8007174 <make_http_response_head+0x168>)
 800711c:	6810      	ldr	r0, [r2, #0]
 800711e:	6018      	str	r0, [r3, #0]
 8007120:	7912      	ldrb	r2, [r2, #4]
 8007122:	711a      	strb	r2, [r3, #4]
}
 8007124:	bf00      	nop
 8007126:	3720      	adds	r7, #32
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	08018350 	.word	0x08018350
 8007130:	080183a4 	.word	0x080183a4
 8007134:	080183e0 	.word	0x080183e0
 8007138:	0801841c 	.word	0x0801841c
 800713c:	08018458 	.word	0x08018458
 8007140:	080184a8 	.word	0x080184a8
 8007144:	080184fc 	.word	0x080184fc
 8007148:	08018538 	.word	0x08018538
 800714c:	0801857c 	.word	0x0801857c
 8007150:	080185c4 	.word	0x080185c4
 8007154:	08018600 	.word	0x08018600
 8007158:	0801863c 	.word	0x0801863c
 800715c:	0801867c 	.word	0x0801867c
 8007160:	080186cc 	.word	0x080186cc
 8007164:	0801871c 	.word	0x0801871c
 8007168:	08018764 	.word	0x08018764
 800716c:	080187b4 	.word	0x080187b4
 8007170:	080187f4 	.word	0x080187f4
 8007174:	080187f8 	.word	0x080187f8

08007178 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 8007186:	499f      	ldr	r1, [pc, #636]	; (8007404 <find_http_uri_type+0x28c>)
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f002 f889 	bl	80092a0 <strstr>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <find_http_uri_type+0x2a>
 8007194:	499c      	ldr	r1, [pc, #624]	; (8007408 <find_http_uri_type+0x290>)
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f002 f882 	bl	80092a0 <strstr>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <find_http_uri_type+0x32>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	e127      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 80071aa:	4998      	ldr	r1, [pc, #608]	; (800740c <find_http_uri_type+0x294>)
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f002 f877 	bl	80092a0 <strstr>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <find_http_uri_type+0x48>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 80071be:	e11c      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 80071c0:	4993      	ldr	r1, [pc, #588]	; (8007410 <find_http_uri_type+0x298>)
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f002 f86c 	bl	80092a0 <strstr>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <find_http_uri_type+0x64>
 80071ce:	4991      	ldr	r1, [pc, #580]	; (8007414 <find_http_uri_type+0x29c>)
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f002 f865 	bl	80092a0 <strstr>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <find_http_uri_type+0x6c>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2203      	movs	r2, #3
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	e10a      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 80071e4:	498c      	ldr	r1, [pc, #560]	; (8007418 <find_http_uri_type+0x2a0>)
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f002 f85a 	bl	80092a0 <strstr>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <find_http_uri_type+0x88>
 80071f2:	498a      	ldr	r1, [pc, #552]	; (800741c <find_http_uri_type+0x2a4>)
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f002 f853 	bl	80092a0 <strstr>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <find_http_uri_type+0x90>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2204      	movs	r2, #4
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	e0f8      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 8007208:	4985      	ldr	r1, [pc, #532]	; (8007420 <find_http_uri_type+0x2a8>)
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f002 f848 	bl	80092a0 <strstr>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <find_http_uri_type+0xa6>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2205      	movs	r2, #5
 800721a:	701a      	strb	r2, [r3, #0]
}
 800721c:	e0ed      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 800721e:	4981      	ldr	r1, [pc, #516]	; (8007424 <find_http_uri_type+0x2ac>)
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f002 f83d 	bl	80092a0 <strstr>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <find_http_uri_type+0xc2>
 800722c:	497e      	ldr	r1, [pc, #504]	; (8007428 <find_http_uri_type+0x2b0>)
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f002 f836 	bl	80092a0 <strstr>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <find_http_uri_type+0xca>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2208      	movs	r2, #8
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	e0db      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 8007242:	497a      	ldr	r1, [pc, #488]	; (800742c <find_http_uri_type+0x2b4>)
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f002 f82b 	bl	80092a0 <strstr>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d106      	bne.n	800725e <find_http_uri_type+0xe6>
 8007250:	4977      	ldr	r1, [pc, #476]	; (8007430 <find_http_uri_type+0x2b8>)
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f002 f824 	bl	80092a0 <strstr>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <find_http_uri_type+0xee>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	220c      	movs	r2, #12
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	e0c9      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 8007266:	4973      	ldr	r1, [pc, #460]	; (8007434 <find_http_uri_type+0x2bc>)
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f002 f819 	bl	80092a0 <strstr>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d106      	bne.n	8007282 <find_http_uri_type+0x10a>
 8007274:	4970      	ldr	r1, [pc, #448]	; (8007438 <find_http_uri_type+0x2c0>)
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f002 f812 	bl	80092a0 <strstr>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <find_http_uri_type+0x112>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	220b      	movs	r2, #11
 8007286:	701a      	strb	r2, [r3, #0]
 8007288:	e0b7      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 800728a:	4967      	ldr	r1, [pc, #412]	; (8007428 <find_http_uri_type+0x2b0>)
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f002 f807 	bl	80092a0 <strstr>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d106      	bne.n	80072a6 <find_http_uri_type+0x12e>
 8007298:	4962      	ldr	r1, [pc, #392]	; (8007424 <find_http_uri_type+0x2ac>)
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f002 f800 	bl	80092a0 <strstr>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <find_http_uri_type+0x136>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2208      	movs	r2, #8
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	e0a5      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 80072ae:	4963      	ldr	r1, [pc, #396]	; (800743c <find_http_uri_type+0x2c4>)
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f001 fff5 	bl	80092a0 <strstr>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <find_http_uri_type+0x152>
 80072bc:	4960      	ldr	r1, [pc, #384]	; (8007440 <find_http_uri_type+0x2c8>)
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f001 ffee 	bl	80092a0 <strstr>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <find_http_uri_type+0x15a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2209      	movs	r2, #9
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	e093      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 80072d2:	495c      	ldr	r1, [pc, #368]	; (8007444 <find_http_uri_type+0x2cc>)
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f001 ffe3 	bl	80092a0 <strstr>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <find_http_uri_type+0x176>
 80072e0:	4959      	ldr	r1, [pc, #356]	; (8007448 <find_http_uri_type+0x2d0>)
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f001 ffdc 	bl	80092a0 <strstr>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <find_http_uri_type+0x17e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	220a      	movs	r2, #10
 80072f2:	701a      	strb	r2, [r3, #0]
 80072f4:	e081      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 80072f6:	4955      	ldr	r1, [pc, #340]	; (800744c <find_http_uri_type+0x2d4>)
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f001 ffd1 	bl	80092a0 <strstr>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <find_http_uri_type+0x19a>
 8007304:	4952      	ldr	r1, [pc, #328]	; (8007450 <find_http_uri_type+0x2d8>)
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f001 ffca 	bl	80092a0 <strstr>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <find_http_uri_type+0x1a2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	220d      	movs	r2, #13
 8007316:	701a      	strb	r2, [r3, #0]
 8007318:	e06f      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 800731a:	494e      	ldr	r1, [pc, #312]	; (8007454 <find_http_uri_type+0x2dc>)
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f001 ffbf 	bl	80092a0 <strstr>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d106      	bne.n	8007336 <find_http_uri_type+0x1be>
 8007328:	494b      	ldr	r1, [pc, #300]	; (8007458 <find_http_uri_type+0x2e0>)
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f001 ffb8 	bl	80092a0 <strstr>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <find_http_uri_type+0x1c6>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	220e      	movs	r2, #14
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e05d      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 800733e:	4947      	ldr	r1, [pc, #284]	; (800745c <find_http_uri_type+0x2e4>)
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f001 ffad 	bl	80092a0 <strstr>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <find_http_uri_type+0x1e2>
 800734c:	4944      	ldr	r1, [pc, #272]	; (8007460 <find_http_uri_type+0x2e8>)
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f001 ffa6 	bl	80092a0 <strstr>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <find_http_uri_type+0x1ea>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2214      	movs	r2, #20
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	e04b      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 8007362:	4940      	ldr	r1, [pc, #256]	; (8007464 <find_http_uri_type+0x2ec>)
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f001 ff9b 	bl	80092a0 <strstr>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <find_http_uri_type+0x206>
 8007370:	493d      	ldr	r1, [pc, #244]	; (8007468 <find_http_uri_type+0x2f0>)
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f001 ff94 	bl	80092a0 <strstr>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <find_http_uri_type+0x20e>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2215      	movs	r2, #21
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	e039      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 8007386:	4939      	ldr	r1, [pc, #228]	; (800746c <find_http_uri_type+0x2f4>)
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f001 ff89 	bl	80092a0 <strstr>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <find_http_uri_type+0x22a>
 8007394:	4936      	ldr	r1, [pc, #216]	; (8007470 <find_http_uri_type+0x2f8>)
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f001 ff82 	bl	80092a0 <strstr>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <find_http_uri_type+0x232>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2216      	movs	r2, #22
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e027      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 80073aa:	4932      	ldr	r1, [pc, #200]	; (8007474 <find_http_uri_type+0x2fc>)
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f001 ff77 	bl	80092a0 <strstr>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d106      	bne.n	80073c6 <find_http_uri_type+0x24e>
 80073b8:	492f      	ldr	r1, [pc, #188]	; (8007478 <find_http_uri_type+0x300>)
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f001 ff70 	bl	80092a0 <strstr>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <find_http_uri_type+0x256>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2217      	movs	r2, #23
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	e015      	b.n	80073fa <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 80073ce:	492b      	ldr	r1, [pc, #172]	; (800747c <find_http_uri_type+0x304>)
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f001 ff65 	bl	80092a0 <strstr>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d106      	bne.n	80073ea <find_http_uri_type+0x272>
 80073dc:	4928      	ldr	r1, [pc, #160]	; (8007480 <find_http_uri_type+0x308>)
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 ff5e 	bl	80092a0 <strstr>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <find_http_uri_type+0x27a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2218      	movs	r2, #24
 80073ee:	701a      	strb	r2, [r3, #0]
 80073f0:	e003      	b.n	80073fa <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]
}
 80073f8:	e7ff      	b.n	80073fa <find_http_uri_type+0x282>
 80073fa:	bf00      	nop
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	08018800 	.word	0x08018800
 8007408:	08018808 	.word	0x08018808
 800740c:	08018810 	.word	0x08018810
 8007410:	08018818 	.word	0x08018818
 8007414:	08018820 	.word	0x08018820
 8007418:	08018828 	.word	0x08018828
 800741c:	08018830 	.word	0x08018830
 8007420:	08018838 	.word	0x08018838
 8007424:	08018840 	.word	0x08018840
 8007428:	08018848 	.word	0x08018848
 800742c:	08018850 	.word	0x08018850
 8007430:	08018858 	.word	0x08018858
 8007434:	08018860 	.word	0x08018860
 8007438:	08018864 	.word	0x08018864
 800743c:	08018868 	.word	0x08018868
 8007440:	08018870 	.word	0x08018870
 8007444:	08018878 	.word	0x08018878
 8007448:	08018880 	.word	0x08018880
 800744c:	08018888 	.word	0x08018888
 8007450:	08018890 	.word	0x08018890
 8007454:	08018898 	.word	0x08018898
 8007458:	080188a0 	.word	0x080188a0
 800745c:	080188a8 	.word	0x080188a8
 8007460:	080188b0 	.word	0x080188b0
 8007464:	080188b8 	.word	0x080188b8
 8007468:	080188c0 	.word	0x080188c0
 800746c:	080188c8 	.word	0x080188c8
 8007470:	080188d0 	.word	0x080188d0
 8007474:	080188d8 	.word	0x080188d8
 8007478:	080188e0 	.word	0x080188e0
 800747c:	080188e8 	.word	0x080188e8
 8007480:	080188f0 	.word	0x080188f0

08007484 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 800748e:	4932      	ldr	r1, [pc, #200]	; (8007558 <parse_http_request+0xd4>)
 8007490:	6838      	ldr	r0, [r7, #0]
 8007492:	f001 fea9 	bl	80091e8 <strtok>
 8007496:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d103      	bne.n	80074a6 <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
    return;
 80074a4:	e054      	b.n	8007550 <parse_http_request+0xcc>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 80074a6:	492d      	ldr	r1, [pc, #180]	; (800755c <parse_http_request+0xd8>)
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f7f8 feb9 	bl	8000220 <strcmp>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d006      	beq.n	80074c2 <parse_http_request+0x3e>
 80074b4:	492a      	ldr	r1, [pc, #168]	; (8007560 <parse_http_request+0xdc>)
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7f8 feb2 	bl	8000220 <strcmp>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d108      	bne.n	80074d4 <parse_http_request+0x50>
  {
    request->METHOD = METHOD_GET;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 80074c8:	4923      	ldr	r1, [pc, #140]	; (8007558 <parse_http_request+0xd4>)
 80074ca:	2000      	movs	r0, #0
 80074cc:	f001 fe8c 	bl	80091e8 <strtok>
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	e030      	b.n	8007536 <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 80074d4:	4923      	ldr	r1, [pc, #140]	; (8007564 <parse_http_request+0xe0>)
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7f8 fea2 	bl	8000220 <strcmp>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d006      	beq.n	80074f0 <parse_http_request+0x6c>
 80074e2:	4921      	ldr	r1, [pc, #132]	; (8007568 <parse_http_request+0xe4>)
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f7f8 fe9b 	bl	8000220 <strcmp>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d108      	bne.n	8007502 <parse_http_request+0x7e>
  {
    request->METHOD = METHOD_HEAD;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	701a      	strb	r2, [r3, #0]
    nexttok = strtok(NULL," ");
 80074f6:	4918      	ldr	r1, [pc, #96]	; (8007558 <parse_http_request+0xd4>)
 80074f8:	2000      	movs	r0, #0
 80074fa:	f001 fe75 	bl	80091e8 <strtok>
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	e019      	b.n	8007536 <parse_http_request+0xb2>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 8007502:	491a      	ldr	r1, [pc, #104]	; (800756c <parse_http_request+0xe8>)
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7f8 fe8b 	bl	8000220 <strcmp>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d006      	beq.n	800751e <parse_http_request+0x9a>
 8007510:	4917      	ldr	r1, [pc, #92]	; (8007570 <parse_http_request+0xec>)
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7f8 fe84 	bl	8000220 <strcmp>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d108      	bne.n	8007530 <parse_http_request+0xac>
  {
    nexttok = strtok(NULL,"\0");
 800751e:	4915      	ldr	r1, [pc, #84]	; (8007574 <parse_http_request+0xf0>)
 8007520:	2000      	movs	r0, #0
 8007522:	f001 fe61 	bl	80091e8 <strtok>
 8007526:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2203      	movs	r2, #3
 800752c:	701a      	strb	r2, [r3, #0]
 800752e:	e002      	b.n	8007536 <parse_http_request+0xb2>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <parse_http_request+0xc0>
  {
    request->METHOD = METHOD_ERR;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]
    return;
 8007542:	e005      	b.n	8007550 <parse_http_request+0xcc>
  }
  strcpy((char *)request->URI, nexttok);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3302      	adds	r3, #2
 8007548:	68f9      	ldr	r1, [r7, #12]
 800754a:	4618      	mov	r0, r3
 800754c:	f001 ff40 	bl	80093d0 <strcpy>
}
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	080188f8 	.word	0x080188f8
 800755c:	080188fc 	.word	0x080188fc
 8007560:	08018900 	.word	0x08018900
 8007564:	08018904 	.word	0x08018904
 8007568:	0801890c 	.word	0x0801890c
 800756c:	08018914 	.word	0x08018914
 8007570:	0801891c 	.word	0x0801891c
 8007574:	08018924 	.word	0x08018924

08007578 <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08a      	sub	sp, #40	; 0x28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 8007586:	4b3b      	ldr	r3, [pc, #236]	; (8007674 <get_http_param_value+0xfc>)
 8007588:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	837b      	strh	r3, [r7, #26]
 800758e:	2300      	movs	r3, #0
 8007590:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	f107 0310 	add.w	r3, r7, #16
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	809a      	strh	r2, [r3, #4]

	if(!uri || !param_name) return 0;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <get_http_param_value+0x34>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <get_http_param_value+0x38>
 80075ac:	2300      	movs	r3, #0
 80075ae:	e05c      	b.n	800766a <get_http_param_value+0xf2>

	/***************/
	mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf);
 80075b0:	f107 030c 	add.w	r3, r7, #12
 80075b4:	4a30      	ldr	r2, [pc, #192]	; (8007678 <get_http_param_value+0x100>)
 80075b6:	4931      	ldr	r1, [pc, #196]	; (800767c <get_http_param_value+0x104>)
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f8b2 	bl	8007722 <mid>
	content_len = ATOI(tmp_buf, 10);
 80075be:	f107 030c 	add.w	r3, r7, #12
 80075c2:	210a      	movs	r1, #10
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 f887 	bl	80076d8 <ATOI>
 80075ca:	4603      	mov	r3, r0
 80075cc:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 80075ce:	492c      	ldr	r1, [pc, #176]	; (8007680 <get_http_param_value+0x108>)
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 fe65 	bl	80092a0 <strstr>
 80075d6:	6078      	str	r0, [r7, #4]
	uri += 4;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3304      	adds	r3, #4
 80075dc:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 80075de:	8b3b      	ldrh	r3, [r7, #24]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	4413      	add	r3, r2
 80075e4:	2200      	movs	r2, #0
 80075e6:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 fe58 	bl	80092a0 <strstr>
 80075f0:	6238      	str	r0, [r7, #32]
 80075f2:	6a3b      	ldr	r3, [r7, #32]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d035      	beq.n	8007664 <get_http_param_value+0xec>
	{
		name += strlen(param_name) + 1;
 80075f8:	6838      	ldr	r0, [r7, #0]
 80075fa:	f7f8 fe1b 	bl	8000234 <strlen>
 80075fe:	4603      	mov	r3, r0
 8007600:	3301      	adds	r3, #1
 8007602:	6a3a      	ldr	r2, [r7, #32]
 8007604:	4413      	add	r3, r2
 8007606:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 8007608:	2126      	movs	r1, #38	; 0x26
 800760a:	6a38      	ldr	r0, [r7, #32]
 800760c:	f001 fdcb 	bl	80091a6 <strchr>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <get_http_param_value+0xae>
		{
			pos2 = name + strlen((char*)name);
 8007618:	6a38      	ldr	r0, [r7, #32]
 800761a:	f7f8 fe0b 	bl	8000234 <strlen>
 800761e:	4602      	mov	r2, r0
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	4413      	add	r3, r2
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 8007626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	837b      	strh	r3, [r7, #26]

		if(len)
 800762e:	8b7b      	ldrh	r3, [r7, #26]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d013      	beq.n	800765c <get_http_param_value+0xe4>
		{
			ret[len] = 0;
 8007634:	8b7b      	ldrh	r3, [r7, #26]
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	4413      	add	r3, r2
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 800763e:	8b7b      	ldrh	r3, [r7, #26]
 8007640:	461a      	mov	r2, r3
 8007642:	6a39      	ldr	r1, [r7, #32]
 8007644:	69f8      	ldr	r0, [r7, #28]
 8007646:	f001 fdbb 	bl	80091c0 <strncpy>
			unescape_http_url((char *)ret);
 800764a:	69f8      	ldr	r0, [r7, #28]
 800764c:	f7ff fc97 	bl	8006f7e <unescape_http_url>
			replacetochar(ret, '+' ,' ');
 8007650:	2220      	movs	r2, #32
 8007652:	212b      	movs	r1, #43	; 0x2b
 8007654:	69f8      	ldr	r0, [r7, #28]
 8007656:	f000 f88f 	bl	8007778 <replacetochar>
 800765a:	e005      	b.n	8007668 <get_http_param_value+0xf0>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	2200      	movs	r2, #0
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	e001      	b.n	8007668 <get_http_param_value+0xf0>
		}
	}
	else
	{
		return 0;
 8007664:	2300      	movs	r3, #0
 8007666:	e000      	b.n	800766a <get_http_param_value+0xf2>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 8007668:	69fb      	ldr	r3, [r7, #28]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3728      	adds	r7, #40	; 0x28
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	2000207c 	.word	0x2000207c
 8007678:	08018928 	.word	0x08018928
 800767c:	0801892c 	.word	0x0801892c
 8007680:	080187f8 	.word	0x080187f8

08007684 <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <get_http_uri_name+0x14>
 8007694:	2300      	movs	r3, #0
 8007696:	e017      	b.n	80076c8 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	6838      	ldr	r0, [r7, #0]
 800769c:	f001 fe98 	bl	80093d0 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 80076a0:	490b      	ldr	r1, [pc, #44]	; (80076d0 <get_http_uri_name+0x4c>)
 80076a2:	6838      	ldr	r0, [r7, #0]
 80076a4:	f001 fda0 	bl	80091e8 <strtok>
 80076a8:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 80076aa:	490a      	ldr	r1, [pc, #40]	; (80076d4 <get_http_uri_name+0x50>)
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7f8 fdb7 	bl	8000220 <strcmp>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <get_http_uri_name+0x3a>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	6838      	ldr	r0, [r7, #0]
 80076c2:	f001 fe85 	bl	80093d0 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 80076c6:	2301      	movs	r3, #1
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	08018940 	.word	0x08018940
 80076d4:	08018944 	.word	0x08018944

080076d8 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 80076d8:	b590      	push	{r4, r7, lr}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 80076e8:	e00d      	b.n	8007706 <ATOI+0x2e>
                num = num * base + C2D(*str++);
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	fb02 f403 	mul.w	r4, r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f863 	bl	80077c6 <C2D>
 8007700:	4603      	mov	r3, r0
 8007702:	4423      	add	r3, r4
 8007704:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <ATOI+0x3e>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b20      	cmp	r3, #32
 8007714:	d1e9      	bne.n	80076ea <ATOI+0x12>
	return num;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	b29b      	uxth	r3, r3
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	bd90      	pop	{r4, r7, pc}

08007722 <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
void mid(char* src, char* s1, char* s2, char* sub)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b088      	sub	sp, #32
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	607a      	str	r2, [r7, #4]
 800772e:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f001 fdb4 	bl	80092a0 <strstr>
 8007738:	61f8      	str	r0, [r7, #28]
	sub1+=strlen((char*)s1);
 800773a:	68b8      	ldr	r0, [r7, #8]
 800773c:	f7f8 fd7a 	bl	8000234 <strlen>
 8007740:	4602      	mov	r2, r0
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4413      	add	r3, r2
 8007746:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 8007748:	6879      	ldr	r1, [r7, #4]
 800774a:	69f8      	ldr	r0, [r7, #28]
 800774c:	f001 fda8 	bl	80092a0 <strstr>
 8007750:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 800775a:	8afb      	ldrh	r3, [r7, #22]
 800775c:	461a      	mov	r2, r3
 800775e:	69f9      	ldr	r1, [r7, #28]
 8007760:	6838      	ldr	r0, [r7, #0]
 8007762:	f001 fd2d 	bl	80091c0 <strncpy>
	sub[n]='\0';
 8007766:	8afb      	ldrh	r3, [r7, #22]
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	4413      	add	r3, r2
 800776c:	2200      	movs	r2, #0
 800776e:	701a      	strb	r2, [r3, #0]
}
 8007770:	bf00      	nop
 8007772:	3720      	adds	r7, #32
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <replacetochar>:
static void replacetochar(
		uint8_t * str, 		/**< pointer to be replaced */
		uint8_t oldchar, 	/**< old character */
		uint8_t newchar	/**< new character */
	)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	70fb      	strb	r3, [r7, #3]
 8007784:	4613      	mov	r3, r2
 8007786:	70bb      	strb	r3, [r7, #2]
	int x;
	for (x = 0; str[x]; x++)
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	e00e      	b.n	80077ac <replacetochar+0x34>
		if (str[x] == oldchar) str[x] = newchar;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4413      	add	r3, r2
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	78fa      	ldrb	r2, [r7, #3]
 8007798:	429a      	cmp	r2, r3
 800779a:	d104      	bne.n	80077a6 <replacetochar+0x2e>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	4413      	add	r3, r2
 80077a2:	78ba      	ldrb	r2, [r7, #2]
 80077a4:	701a      	strb	r2, [r3, #0]
	for (x = 0; str[x]; x++)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3301      	adds	r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	4413      	add	r3, r2
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1ea      	bne.n	800778e <replacetochar+0x16>
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	4603      	mov	r3, r0
 80077ce:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	2b2f      	cmp	r3, #47	; 0x2f
 80077d4:	d906      	bls.n	80077e4 <C2D+0x1e>
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	2b39      	cmp	r3, #57	; 0x39
 80077da:	d803      	bhi.n	80077e4 <C2D+0x1e>
		return c - '0';
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	3b30      	subs	r3, #48	; 0x30
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	e014      	b.n	800780e <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	2b60      	cmp	r3, #96	; 0x60
 80077e8:	d906      	bls.n	80077f8 <C2D+0x32>
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	2b66      	cmp	r3, #102	; 0x66
 80077ee:	d803      	bhi.n	80077f8 <C2D+0x32>
		return 10 + c -'a';
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	3b57      	subs	r3, #87	; 0x57
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	e00a      	b.n	800780e <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d906      	bls.n	800780c <C2D+0x46>
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	2b46      	cmp	r3, #70	; 0x46
 8007802:	d803      	bhi.n	800780c <C2D+0x46>
		return 10 + c -'A';
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	3b37      	subs	r3, #55	; 0x37
 8007808:	b2db      	uxtb	r3, r3
 800780a:	e000      	b.n	800780e <C2D+0x48>

	return (char)c;
 800780c:	79fb      	ldrb	r3, [r7, #7]
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 800781a:	b480      	push	{r7}
 800781c:	af00      	add	r7, sp, #0
 800781e:	bf00      	nop
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <httpServer_Sockinit>:
void default_wdt_reset(void) {;}
void (*HTTPServer_ReStart)(void) = default_mcu_reset;
void (*HTTPServer_WDT_Reset)(void) = default_wdt_reset;

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	6039      	str	r1, [r7, #0]
 8007832:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]
 8007838:	e009      	b.n	800784e <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	441a      	add	r2, r3
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	7811      	ldrb	r1, [r2, #0]
 8007844:	4a07      	ldr	r2, [pc, #28]	; (8007864 <httpServer_Sockinit+0x3c>)
 8007846:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	3301      	adds	r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
 800784e:	7bfa      	ldrb	r2, [r7, #15]
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	429a      	cmp	r2, r3
 8007854:	d3f1      	bcc.n	800783a <httpServer_Sockinit+0x12>
	}
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	200010f0 	.word	0x200010f0

08007868 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 8007872:	79fb      	ldrb	r3, [r7, #7]
 8007874:	4a03      	ldr	r2, [pc, #12]	; (8007884 <getHTTPSocketNum+0x1c>)
 8007876:	5cd3      	ldrb	r3, [r2, r3]
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	200010f0 	.word	0x200010f0

08007888 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
 8007896:	e00b      	b.n	80078b0 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	4a0b      	ldr	r2, [pc, #44]	; (80078c8 <getHTTPSequenceNum+0x40>)
 800789c:	5cd3      	ldrb	r3, [r2, r3]
 800789e:	79fa      	ldrb	r2, [r7, #7]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d102      	bne.n	80078aa <getHTTPSequenceNum+0x22>
 80078a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078a8:	e007      	b.n	80078ba <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	3301      	adds	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b07      	cmp	r3, #7
 80078b4:	d9f0      	bls.n	8007898 <getHTTPSequenceNum+0x10>

	return -1;
 80078b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	200010f0 	.word	0x200010f0

080078cc <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	603b      	str	r3, [r7, #0]
 80078d8:	4613      	mov	r3, r2
 80078da:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 80078dc:	4a07      	ldr	r2, [pc, #28]	; (80078fc <httpServer_init+0x30>)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 80078e2:	4a07      	ldr	r2, [pc, #28]	; (8007900 <httpServer_init+0x34>)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff ff9b 	bl	8007828 <httpServer_Sockinit>
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	2000217c 	.word	0x2000217c
 8007900:	20002180 	.word	0x20002180

08007904 <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 8007904:	b590      	push	{r4, r7, lr}
 8007906:	b089      	sub	sp, #36	; 0x24
 8007908:	af02      	add	r7, sp, #8
 800790a:	4603      	mov	r3, r0
 800790c:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	613b      	str	r3, [r7, #16]

#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
 8007912:	2300      	movs	r3, #0
 8007914:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	81fb      	strh	r3, [r7, #14]
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 800791a:	4bad      	ldr	r3, [pc, #692]	; (8007bd0 <httpServer_run+0x2cc>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4aad      	ldr	r2, [pc, #692]	; (8007bd4 <httpServer_run+0x2d0>)
 8007920:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 8007922:	4bad      	ldr	r3, [pc, #692]	; (8007bd8 <httpServer_run+0x2d4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4aad      	ldr	r2, [pc, #692]	; (8007bdc <httpServer_run+0x2d8>)
 8007928:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff ff9b 	bl	8007868 <getHTTPSocketNum>
 8007932:	4603      	mov	r3, r0
 8007934:	737b      	strb	r3, [r7, #13]

	/* HTTP Service Start */
	switch(getSn_SR(s))
 8007936:	7b7b      	ldrb	r3, [r7, #13]
 8007938:	3308      	adds	r3, #8
 800793a:	019b      	lsls	r3, r3, #6
 800793c:	3308      	adds	r3, #8
 800793e:	4618      	mov	r0, r3
 8007940:	f7fd fd6c 	bl	800541c <WIZCHIP_READ>
 8007944:	4603      	mov	r3, r0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b1c      	cmp	r3, #28
 800794a:	f200 81b1 	bhi.w	8007cb0 <httpServer_run+0x3ac>
 800794e:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <httpServer_run+0x50>)
 8007950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007954:	08007c7b 	.word	0x08007c7b
 8007958:	08007cb1 	.word	0x08007cb1
 800795c:	08007cb1 	.word	0x08007cb1
 8007960:	08007cb1 	.word	0x08007cb1
 8007964:	08007cb1 	.word	0x08007cb1
 8007968:	08007cb1 	.word	0x08007cb1
 800796c:	08007cb1 	.word	0x08007cb1
 8007970:	08007cb1 	.word	0x08007cb1
 8007974:	08007cb1 	.word	0x08007cb1
 8007978:	08007cb1 	.word	0x08007cb1
 800797c:	08007cb1 	.word	0x08007cb1
 8007980:	08007cb1 	.word	0x08007cb1
 8007984:	08007cb1 	.word	0x08007cb1
 8007988:	08007cb1 	.word	0x08007cb1
 800798c:	08007cb1 	.word	0x08007cb1
 8007990:	08007cb1 	.word	0x08007cb1
 8007994:	08007cb1 	.word	0x08007cb1
 8007998:	08007cb1 	.word	0x08007cb1
 800799c:	08007cb1 	.word	0x08007cb1
 80079a0:	08007ca7 	.word	0x08007ca7
 80079a4:	08007cb1 	.word	0x08007cb1
 80079a8:	08007cb1 	.word	0x08007cb1
 80079ac:	08007cb1 	.word	0x08007cb1
 80079b0:	080079c9 	.word	0x080079c9
 80079b4:	08007cb1 	.word	0x08007cb1
 80079b8:	08007cb1 	.word	0x08007cb1
 80079bc:	08007cb1 	.word	0x08007cb1
 80079c0:	08007cb1 	.word	0x08007cb1
 80079c4:	08007c67 	.word	0x08007c67
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 80079c8:	7b7b      	ldrb	r3, [r7, #13]
 80079ca:	3308      	adds	r3, #8
 80079cc:	019b      	lsls	r3, r3, #6
 80079ce:	3306      	adds	r3, #6
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fd fd23 	bl	800541c <WIZCHIP_READ>
 80079d6:	4603      	mov	r3, r0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <httpServer_run+0xee>
			{
				setSn_IR(s, Sn_IR_CON);
 80079e2:	7b7b      	ldrb	r3, [r7, #13]
 80079e4:	3308      	adds	r3, #8
 80079e6:	019b      	lsls	r3, r3, #6
 80079e8:	3306      	adds	r3, #6
 80079ea:	2101      	movs	r1, #1
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fd fcf7 	bl	80053e0 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	4a7a      	ldr	r2, [pc, #488]	; (8007be0 <httpServer_run+0x2dc>)
 80079f6:	2194      	movs	r1, #148	; 0x94
 80079f8:	fb01 f303 	mul.w	r3, r1, r3
 80079fc:	4413      	add	r3, r2
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	f000 80fd 	beq.w	8007c00 <httpServer_run+0x2fc>
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	f300 8127 	bgt.w	8007c5a <httpServer_run+0x356>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <httpServer_run+0x114>
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	f000 80bc 	beq.w	8007b8e <httpServer_run+0x28a>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 8007a16:	e120      	b.n	8007c5a <httpServer_run+0x356>
					if ((len = getSn_RX_RSR(s)) > 0)
 8007a18:	7b7b      	ldrb	r3, [r7, #13]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fd fdfe 	bl	800561c <getSn_RX_RSR>
 8007a20:	4603      	mov	r3, r0
 8007a22:	82fb      	strh	r3, [r7, #22]
 8007a24:	8afb      	ldrh	r3, [r7, #22]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 8119 	beq.w	8007c5e <httpServer_run+0x35a>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 8007a2c:	8afb      	ldrh	r3, [r7, #22]
 8007a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a32:	d902      	bls.n	8007a3a <httpServer_run+0x136>
 8007a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a38:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 8007a3a:	4b66      	ldr	r3, [pc, #408]	; (8007bd4 <httpServer_run+0x2d0>)
 8007a3c:	6819      	ldr	r1, [r3, #0]
 8007a3e:	8afa      	ldrh	r2, [r7, #22]
 8007a40:	7b7b      	ldrb	r3, [r7, #13]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe fa28 	bl	8005e98 <recv>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 8007a4c:	4b61      	ldr	r3, [pc, #388]	; (8007bd4 <httpServer_run+0x2d0>)
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	8afb      	ldrh	r3, [r7, #22]
 8007a52:	4413      	add	r3, r2
 8007a54:	2200      	movs	r2, #0
 8007a56:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 8007a58:	4b60      	ldr	r3, [pc, #384]	; (8007bdc <httpServer_run+0x2d8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a5d      	ldr	r2, [pc, #372]	; (8007bd4 <httpServer_run+0x2d0>)
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	4611      	mov	r1, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff fd0e 	bl	8007484 <parse_http_request>
						getSn_DIPR(s, destip);
 8007a68:	7b7b      	ldrb	r3, [r7, #13]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	019b      	lsls	r3, r3, #6
 8007a6e:	3314      	adds	r3, #20
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fd fcd3 	bl	800541c <WIZCHIP_READ>
 8007a76:	4603      	mov	r3, r0
 8007a78:	0a1b      	lsrs	r3, r3, #8
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	723b      	strb	r3, [r7, #8]
 8007a80:	7b7b      	ldrb	r3, [r7, #13]
 8007a82:	3308      	adds	r3, #8
 8007a84:	019b      	lsls	r3, r3, #6
 8007a86:	3314      	adds	r3, #20
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fd fcc7 	bl	800541c <WIZCHIP_READ>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	727b      	strb	r3, [r7, #9]
 8007a94:	7b7b      	ldrb	r3, [r7, #13]
 8007a96:	3308      	adds	r3, #8
 8007a98:	019b      	lsls	r3, r3, #6
 8007a9a:	3316      	adds	r3, #22
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fd fcbd 	bl	800541c <WIZCHIP_READ>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	0a1b      	lsrs	r3, r3, #8
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	72bb      	strb	r3, [r7, #10]
 8007aac:	7b7b      	ldrb	r3, [r7, #13]
 8007aae:	3308      	adds	r3, #8
 8007ab0:	019b      	lsls	r3, r3, #6
 8007ab2:	3316      	adds	r3, #22
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fd fcb1 	bl	800541c <WIZCHIP_READ>
 8007aba:	4603      	mov	r3, r0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	72fb      	strb	r3, [r7, #11]
						destport = getSn_DPORT(s);
 8007ac0:	7b7b      	ldrb	r3, [r7, #13]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	019b      	lsls	r3, r3, #6
 8007ac6:	3312      	adds	r3, #18
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fd fca7 	bl	800541c <WIZCHIP_READ>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	81fb      	strh	r3, [r7, #14]
						printf("\r\n");
 8007ad2:	4844      	ldr	r0, [pc, #272]	; (8007be4 <httpServer_run+0x2e0>)
 8007ad4:	f001 fa36 	bl	8008f44 <puts>
						printf("> HTTPSocket[%d] : HTTP Request received ", s);
 8007ad8:	7b7b      	ldrb	r3, [r7, #13]
 8007ada:	4619      	mov	r1, r3
 8007adc:	4842      	ldr	r0, [pc, #264]	; (8007be8 <httpServer_run+0x2e4>)
 8007ade:	f001 f9cb 	bl	8008e78 <iprintf>
						printf("from %d.%d.%d.%d : %d\r\n", destip[0], destip[1], destip[2], destip[3], destport);
 8007ae2:	7a3b      	ldrb	r3, [r7, #8]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	7a7b      	ldrb	r3, [r7, #9]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	7abb      	ldrb	r3, [r7, #10]
 8007aec:	461c      	mov	r4, r3
 8007aee:	7afb      	ldrb	r3, [r7, #11]
 8007af0:	461a      	mov	r2, r3
 8007af2:	89fb      	ldrh	r3, [r7, #14]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	9200      	str	r2, [sp, #0]
 8007af8:	4623      	mov	r3, r4
 8007afa:	4602      	mov	r2, r0
 8007afc:	483b      	ldr	r0, [pc, #236]	; (8007bec <httpServer_run+0x2e8>)
 8007afe:	f001 f9bb 	bl	8008e78 <iprintf>
						printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE\r\n", s);
 8007b02:	7b7b      	ldrb	r3, [r7, #13]
 8007b04:	4619      	mov	r1, r3
 8007b06:	483a      	ldr	r0, [pc, #232]	; (8007bf0 <httpServer_run+0x2ec>)
 8007b08:	f001 f9b6 	bl	8008e78 <iprintf>
						http_process_handler(s, parsed_http_request);
 8007b0c:	4b33      	ldr	r3, [pc, #204]	; (8007bdc <httpServer_run+0x2d8>)
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	7b7b      	ldrb	r3, [r7, #13]
 8007b12:	4611      	mov	r1, r2
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 faf7 	bl	8008108 <http_process_handler>
						gettime = get_httpServer_timecount();
 8007b1a:	f000 fd77 	bl	800860c <get_httpServer_timecount>
 8007b1e:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 8007b20:	e00c      	b.n	8007b3c <httpServer_run+0x238>
							if((get_httpServer_timecount() - gettime) > 3)
 8007b22:	f000 fd73 	bl	800860c <get_httpServer_timecount>
 8007b26:	4602      	mov	r2, r0
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d905      	bls.n	8007b3c <httpServer_run+0x238>
								printf("> HTTPSocket[%d] : [State] STATE_HTTP_REQ_DONE: TX Buffer clear timeout\r\n", s);
 8007b30:	7b7b      	ldrb	r3, [r7, #13]
 8007b32:	4619      	mov	r1, r3
 8007b34:	482f      	ldr	r0, [pc, #188]	; (8007bf4 <httpServer_run+0x2f0>)
 8007b36:	f001 f99f 	bl	8008e78 <iprintf>
								break;
 8007b3a:	e00c      	b.n	8007b56 <httpServer_run+0x252>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 8007b3c:	7b7b      	ldrb	r3, [r7, #13]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fd fd42 	bl	80055c8 <getSn_TX_FSR>
 8007b44:	4604      	mov	r4, r0
 8007b46:	7b7b      	ldrb	r3, [r7, #13]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd fcbe 	bl	80054ca <getTMSR>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	029b      	lsls	r3, r3, #10
 8007b52:	429c      	cmp	r4, r3
 8007b54:	d1e5      	bne.n	8007b22 <httpServer_run+0x21e>
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	4a21      	ldr	r2, [pc, #132]	; (8007be0 <httpServer_run+0x2dc>)
 8007b5a:	2194      	movs	r1, #148	; 0x94
 8007b5c:	fb01 f303 	mul.w	r3, r1, r3
 8007b60:	4413      	add	r3, r2
 8007b62:	3388      	adds	r3, #136	; 0x88
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <httpServer_run+0x278>
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	4a1c      	ldr	r2, [pc, #112]	; (8007be0 <httpServer_run+0x2dc>)
 8007b6e:	2194      	movs	r1, #148	; 0x94
 8007b70:	fb01 f303 	mul.w	r3, r1, r3
 8007b74:	4413      	add	r3, r2
 8007b76:	2203      	movs	r2, #3
 8007b78:	701a      	strb	r2, [r3, #0]
					break;
 8007b7a:	e070      	b.n	8007c5e <httpServer_run+0x35a>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	4a18      	ldr	r2, [pc, #96]	; (8007be0 <httpServer_run+0x2dc>)
 8007b80:	2194      	movs	r1, #148	; 0x94
 8007b82:	fb01 f303 	mul.w	r3, r1, r3
 8007b86:	4413      	add	r3, r2
 8007b88:	2204      	movs	r2, #4
 8007b8a:	701a      	strb	r2, [r3, #0]
					break;
 8007b8c:	e067      	b.n	8007c5e <httpServer_run+0x35a>
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_INPROC\r\n", s);
 8007b8e:	7b7b      	ldrb	r3, [r7, #13]
 8007b90:	4619      	mov	r1, r3
 8007b92:	4819      	ldr	r0, [pc, #100]	; (8007bf8 <httpServer_run+0x2f4>)
 8007b94:	f001 f970 	bl	8008e78 <iprintf>
					send_http_response_body(s, 0, http_response, 0, 0);
 8007b98:	4b18      	ldr	r3, [pc, #96]	; (8007bfc <httpServer_run+0x2f8>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	7b78      	ldrb	r0, [r7, #13]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	f000 f919 	bl	8007ddc <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	4a0c      	ldr	r2, [pc, #48]	; (8007be0 <httpServer_run+0x2dc>)
 8007bae:	2194      	movs	r1, #148	; 0x94
 8007bb0:	fb01 f303 	mul.w	r3, r1, r3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3388      	adds	r3, #136	; 0x88
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d151      	bne.n	8007c62 <httpServer_run+0x35e>
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	4a07      	ldr	r2, [pc, #28]	; (8007be0 <httpServer_run+0x2dc>)
 8007bc2:	2194      	movs	r1, #148	; 0x94
 8007bc4:	fb01 f303 	mul.w	r3, r1, r3
 8007bc8:	4413      	add	r3, r2
 8007bca:	2204      	movs	r2, #4
 8007bcc:	701a      	strb	r2, [r3, #0]
					break;
 8007bce:	e048      	b.n	8007c62 <httpServer_run+0x35e>
 8007bd0:	20002180 	.word	0x20002180
 8007bd4:	200010f8 	.word	0x200010f8
 8007bd8:	2000217c 	.word	0x2000217c
 8007bdc:	200010fc 	.word	0x200010fc
 8007be0:	2000110c 	.word	0x2000110c
 8007be4:	0801894c 	.word	0x0801894c
 8007be8:	08018950 	.word	0x08018950
 8007bec:	0801897c 	.word	0x0801897c
 8007bf0:	08018994 	.word	0x08018994
 8007bf4:	080189c8 	.word	0x080189c8
 8007bf8:	08018a14 	.word	0x08018a14
 8007bfc:	20001100 	.word	0x20001100
					printf("> HTTPSocket[%d] : [State] STATE_HTTP_RES_DONE\r\n", s);
 8007c00:	7b7b      	ldrb	r3, [r7, #13]
 8007c02:	4619      	mov	r1, r3
 8007c04:	482e      	ldr	r0, [pc, #184]	; (8007cc0 <httpServer_run+0x3bc>)
 8007c06:	f001 f937 	bl	8008e78 <iprintf>
					HTTPSock_Status[seqnum].file_len = 0;
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	4a2d      	ldr	r2, [pc, #180]	; (8007cc4 <httpServer_run+0x3c0>)
 8007c0e:	2194      	movs	r1, #148	; 0x94
 8007c10:	fb01 f303 	mul.w	r3, r1, r3
 8007c14:	4413      	add	r3, r2
 8007c16:	3388      	adds	r3, #136	; 0x88
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	4a29      	ldr	r2, [pc, #164]	; (8007cc4 <httpServer_run+0x3c0>)
 8007c20:	2194      	movs	r1, #148	; 0x94
 8007c22:	fb01 f303 	mul.w	r3, r1, r3
 8007c26:	4413      	add	r3, r2
 8007c28:	338c      	adds	r3, #140	; 0x8c
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	4a24      	ldr	r2, [pc, #144]	; (8007cc4 <httpServer_run+0x3c0>)
 8007c32:	2194      	movs	r1, #148	; 0x94
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	4413      	add	r3, r2
 8007c3a:	3384      	adds	r3, #132	; 0x84
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	4a20      	ldr	r2, [pc, #128]	; (8007cc4 <httpServer_run+0x3c0>)
 8007c44:	2194      	movs	r1, #148	; 0x94
 8007c46:	fb01 f303 	mul.w	r3, r1, r3
 8007c4a:	4413      	add	r3, r2
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 8007c50:	7b7b      	ldrb	r3, [r7, #13]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fa3a 	bl	80080cc <http_disconnect>
					break;
 8007c58:	e004      	b.n	8007c64 <httpServer_run+0x360>
					break;
 8007c5a:	bf00      	nop
 8007c5c:	e02b      	b.n	8007cb6 <httpServer_run+0x3b2>
					break;
 8007c5e:	bf00      	nop
 8007c60:	e029      	b.n	8007cb6 <httpServer_run+0x3b2>
					break;
 8007c62:	bf00      	nop
			}
			break;
 8007c64:	e027      	b.n	8007cb6 <httpServer_run+0x3b2>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
 8007c66:	7b7b      	ldrb	r3, [r7, #13]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4817      	ldr	r0, [pc, #92]	; (8007cc8 <httpServer_run+0x3c4>)
 8007c6c:	f001 f904 	bl	8008e78 <iprintf>
#endif
			disconnect(s);
 8007c70:	7b7b      	ldrb	r3, [r7, #13]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fd ffa4 	bl	8005bc0 <disconnect>
			break;
 8007c78:	e01d      	b.n	8007cb6 <httpServer_run+0x3b2>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
 8007c7a:	7b7b      	ldrb	r3, [r7, #13]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4813      	ldr	r0, [pc, #76]	; (8007ccc <httpServer_run+0x3c8>)
 8007c80:	f001 f8fa 	bl	8008e78 <iprintf>
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 8007c84:	7b78      	ldrb	r0, [r7, #13]
 8007c86:	2300      	movs	r3, #0
 8007c88:	2250      	movs	r2, #80	; 0x50
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	f7fd fd6c 	bl	8005768 <socket>
 8007c90:	4603      	mov	r3, r0
 8007c92:	461a      	mov	r2, r3
 8007c94:	7b7b      	ldrb	r3, [r7, #13]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d10c      	bne.n	8007cb4 <httpServer_run+0x3b0>
			{
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
 8007c9a:	7b7b      	ldrb	r3, [r7, #13]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	480c      	ldr	r0, [pc, #48]	; (8007cd0 <httpServer_run+0x3cc>)
 8007ca0:	f001 f8ea 	bl	8008e78 <iprintf>
#endif
			}
			break;
 8007ca4:	e006      	b.n	8007cb4 <httpServer_run+0x3b0>

		case SOCK_INIT:
			listen(s);
 8007ca6:	7b7b      	ldrb	r3, [r7, #13]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fd ff35 	bl	8005b18 <listen>
			break;
 8007cae:	e002      	b.n	8007cb6 <httpServer_run+0x3b2>

		case SOCK_LISTEN:
			break;

		default :
			break;
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <httpServer_run+0x3b2>
			break;
 8007cb4:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 8007cb6:	bf00      	nop
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd90      	pop	{r4, r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	08018a48 	.word	0x08018a48
 8007cc4:	2000110c 	.word	0x2000110c
 8007cc8:	08018a7c 	.word	0x08018a7c
 8007ccc:	08018a9c 	.word	0x08018a9c
 8007cd0:	08018ab8 	.word	0x08018ab8

08007cd4 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 8007cd4:	b590      	push	{r4, r7, lr}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	603a      	str	r2, [r7, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	71fb      	strb	r3, [r7, #7]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	71bb      	strb	r3, [r7, #6]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 8007cea:	88bb      	ldrh	r3, [r7, #4]
 8007cec:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8007cf0:	d032      	beq.n	8007d58 <send_http_response_header+0x84>
 8007cf2:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8007cf6:	dc3e      	bgt.n	8007d76 <send_http_response_header+0xa2>
 8007cf8:	2bc8      	cmp	r3, #200	; 0xc8
 8007cfa:	d003      	beq.n	8007d04 <send_http_response_header+0x30>
 8007cfc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007d00:	d01b      	beq.n	8007d3a <send_http_response_header+0x66>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
#endif
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
			break;
		default:
			break;
 8007d02:	e038      	b.n	8007d76 <send_http_response_header+0xa2>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 8007d04:	79bb      	ldrb	r3, [r7, #6]
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d00f      	beq.n	8007d2a <send_http_response_header+0x56>
 8007d0a:	79bb      	ldrb	r3, [r7, #6]
 8007d0c:	2b09      	cmp	r3, #9
 8007d0e:	d00c      	beq.n	8007d2a <send_http_response_header+0x56>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_OK\r\n", s);
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	4619      	mov	r1, r3
 8007d14:	4829      	ldr	r0, [pc, #164]	; (8007dbc <send_http_response_header+0xe8>)
 8007d16:	f001 f8af 	bl	8008e78 <iprintf>
				make_http_response_head((char*)http_response, content_type, body_len);
 8007d1a:	4b29      	ldr	r3, [pc, #164]	; (8007dc0 <send_http_response_header+0xec>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	79b9      	ldrb	r1, [r7, #6]
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff f972 	bl	800700c <make_http_response_head>
			break;
 8007d28:	e026      	b.n	8007d78 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - NONE / CGI or XML\r\n", s);
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4825      	ldr	r0, [pc, #148]	; (8007dc4 <send_http_response_header+0xf0>)
 8007d30:	f001 f8a2 	bl	8008e78 <iprintf>
				http_status = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	80bb      	strh	r3, [r7, #4]
			break;
 8007d38:	e01e      	b.n	8007d78 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_BAD_REQ\r\n", s);
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4822      	ldr	r0, [pc, #136]	; (8007dc8 <send_http_response_header+0xf4>)
 8007d40:	f001 f89a 	bl	8008e78 <iprintf>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 8007d44:	4b1e      	ldr	r3, [pc, #120]	; (8007dc0 <send_http_response_header+0xec>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a20      	ldr	r2, [pc, #128]	; (8007dcc <send_http_response_header+0xf8>)
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	2376      	movs	r3, #118	; 0x76
 8007d50:	461a      	mov	r2, r3
 8007d52:	f001 fb45 	bl	80093e0 <memcpy>
			break;
 8007d56:	e00f      	b.n	8007d78 <send_http_response_header+0xa4>
			printf("> HTTPSocket[%d] : HTTP Response Header - STATUS_NOT_FOUND\r\n", s);
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	481c      	ldr	r0, [pc, #112]	; (8007dd0 <send_http_response_header+0xfc>)
 8007d5e:	f001 f88b 	bl	8008e78 <iprintf>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 8007d62:	4b17      	ldr	r3, [pc, #92]	; (8007dc0 <send_http_response_header+0xec>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1b      	ldr	r2, [pc, #108]	; (8007dd4 <send_http_response_header+0x100>)
 8007d68:	4618      	mov	r0, r3
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	2399      	movs	r3, #153	; 0x99
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f001 fb36 	bl	80093e0 <memcpy>
			break;
 8007d74:	e000      	b.n	8007d78 <send_http_response_header+0xa4>
			break;
 8007d76:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 8007d78:	88bb      	ldrh	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01a      	beq.n	8007db4 <send_http_response_header+0xe0>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
 8007d7e:	79fc      	ldrb	r4, [r7, #7]
 8007d80:	4b0f      	ldr	r3, [pc, #60]	; (8007dc0 <send_http_response_header+0xec>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7f8 fa55 	bl	8000234 <strlen>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4621      	mov	r1, r4
 8007d92:	4811      	ldr	r0, [pc, #68]	; (8007dd8 <send_http_response_header+0x104>)
 8007d94:	f001 f870 	bl	8008e78 <iprintf>
#endif
		send(s, http_response, strlen((char *)http_response));
 8007d98:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <send_http_response_header+0xec>)
 8007d9a:	681c      	ldr	r4, [r3, #0]
 8007d9c:	4b08      	ldr	r3, [pc, #32]	; (8007dc0 <send_http_response_header+0xec>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7f8 fa47 	bl	8000234 <strlen>
 8007da6:	4603      	mov	r3, r0
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	4621      	mov	r1, r4
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fd ff76 	bl	8005ca0 <send>
	}
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd90      	pop	{r4, r7, pc}
 8007dbc:	08018ad4 	.word	0x08018ad4
 8007dc0:	20001100 	.word	0x20001100
 8007dc4:	08018b0c 	.word	0x08018b0c
 8007dc8:	08018b4c 	.word	0x08018b4c
 8007dcc:	080193c4 	.word	0x080193c4
 8007dd0:	08018b88 	.word	0x08018b88
 8007dd4:	08019328 	.word	0x08019328
 8007dd8:	08018bc8 	.word	0x08018bc8

08007ddc <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
 8007de6:	603b      	str	r3, [r7, #0]
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	74fb      	strb	r3, [r7, #19]
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff fd48 	bl	8007888 <getHTTPSequenceNum>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	74bb      	strb	r3, [r7, #18]
 8007dfc:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e04:	f000 811b 	beq.w	800803e <send_http_response_body+0x262>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 8007e08:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007e0c:	4a8e      	ldr	r2, [pc, #568]	; (8008048 <send_http_response_body+0x26c>)
 8007e0e:	2194      	movs	r1, #148	; 0x94
 8007e10:	fb01 f303 	mul.w	r3, r1, r3
 8007e14:	4413      	add	r3, r2
 8007e16:	3388      	adds	r3, #136	; 0x88
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d150      	bne.n	8007ec0 <send_http_response_body+0xe4>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e24:	d343      	bcc.n	8007eae <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 8007e26:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007e2a:	4a87      	ldr	r2, [pc, #540]	; (8008048 <send_http_response_body+0x26c>)
 8007e2c:	2194      	movs	r1, #148	; 0x94
 8007e2e:	fb01 f303 	mul.w	r3, r1, r3
 8007e32:	4413      	add	r3, r2
 8007e34:	3384      	adds	r3, #132	; 0x84
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 8007e3a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007e3e:	4a82      	ldr	r2, [pc, #520]	; (8008048 <send_http_response_body+0x26c>)
 8007e40:	2194      	movs	r1, #148	; 0x94
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	4413      	add	r3, r2
 8007e48:	3388      	adds	r3, #136	; 0x88
 8007e4a:	6a3a      	ldr	r2, [r7, #32]
 8007e4c:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 8007e4e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007e52:	617b      	str	r3, [r7, #20]

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 8007e54:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007e58:	2294      	movs	r2, #148	; 0x94
 8007e5a:	fb02 f303 	mul.w	r3, r2, r3
 8007e5e:	4a7a      	ldr	r2, [pc, #488]	; (8008048 <send_http_response_body+0x26c>)
 8007e60:	4413      	add	r3, r2
 8007e62:	3301      	adds	r3, #1
 8007e64:	2280      	movs	r2, #128	; 0x80
 8007e66:	2100      	movs	r1, #0
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f001 f985 	bl	8009178 <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 8007e6e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007e72:	2294      	movs	r2, #148	; 0x94
 8007e74:	fb02 f303 	mul.w	r3, r2, r3
 8007e78:	4a73      	ldr	r2, [pc, #460]	; (8008048 <send_http_response_body+0x26c>)
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 faa5 	bl	80093d0 <strcpy>
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file name [ %s ]\r\n", s, HTTPSock_Status[get_seqnum].file_name);
 8007e86:	7bf9      	ldrb	r1, [r7, #15]
 8007e88:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007e8c:	2294      	movs	r2, #148	; 0x94
 8007e8e:	fb02 f303 	mul.w	r3, r2, r3
 8007e92:	4a6d      	ldr	r2, [pc, #436]	; (8008048 <send_http_response_body+0x26c>)
 8007e94:	4413      	add	r3, r2
 8007e96:	3301      	adds	r3, #1
 8007e98:	461a      	mov	r2, r3
 8007e9a:	486c      	ldr	r0, [pc, #432]	; (800804c <send_http_response_body+0x270>)
 8007e9c:	f000 ffec 	bl	8008e78 <iprintf>
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - file len [ %ld ]byte\r\n", s, file_len);
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	6a3a      	ldr	r2, [r7, #32]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	486a      	ldr	r0, [pc, #424]	; (8008050 <send_http_response_body+0x274>)
 8007ea8:	f000 ffe6 	bl	8008e78 <iprintf>
 8007eac:	e03a      	b.n	8007f24 <send_http_response_body+0x148>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	617b      	str	r3, [r7, #20]

#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, send_len);
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4866      	ldr	r0, [pc, #408]	; (8008054 <send_http_response_body+0x278>)
 8007eba:	f000 ffdd 	bl	8008e78 <iprintf>
 8007ebe:	e031      	b.n	8007f24 <send_http_response_body+0x148>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 8007ec0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007ec4:	4a60      	ldr	r2, [pc, #384]	; (8008048 <send_http_response_body+0x26c>)
 8007ec6:	2194      	movs	r1, #148	; 0x94
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	4413      	add	r3, r2
 8007ece:	3388      	adds	r3, #136	; 0x88
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007ed6:	495c      	ldr	r1, [pc, #368]	; (8008048 <send_http_response_body+0x26c>)
 8007ed8:	2094      	movs	r0, #148	; 0x94
 8007eda:	fb00 f303 	mul.w	r3, r0, r3
 8007ede:	440b      	add	r3, r1
 8007ee0:	338c      	adds	r3, #140	; 0x8c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	617b      	str	r3, [r7, #20]

		if(send_len > DATA_BUF_SIZE - 1)
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eee:	d303      	bcc.n	8007ef8 <send_http_response_body+0x11c>
		{
			send_len = DATA_BUF_SIZE - 1;
 8007ef0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	e00f      	b.n	8007f18 <send_http_response_body+0x13c>
			//HTTPSock_Status[get_seqnum]->file_offset += send_len;
		}
		else
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
 8007ef8:	7bf9      	ldrb	r1, [r7, #15]
 8007efa:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007efe:	4a52      	ldr	r2, [pc, #328]	; (8008048 <send_http_response_body+0x26c>)
 8007f00:	2094      	movs	r0, #148	; 0x94
 8007f02:	fb00 f303 	mul.w	r3, r0, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	3388      	adds	r3, #136	; 0x88
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4851      	ldr	r0, [pc, #324]	; (8008054 <send_http_response_body+0x278>)
 8007f10:	f000 ffb2 	bl	8008e78 <iprintf>
#endif
			// Send process end
			flag_datasend_end = 1;
 8007f14:	2301      	movs	r3, #1
 8007f16:	74fb      	strb	r3, [r7, #19]
		}
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response body - send len [ %ld ]byte\r\n", s, send_len);
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	484e      	ldr	r0, [pc, #312]	; (8008058 <send_http_response_body+0x27c>)
 8007f20:	f000 ffaa 	bl	8008e78 <iprintf>
	//HTTPSock_Status[get_seqnum]->storage_type == CODEFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 8007f24:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007f28:	4a47      	ldr	r2, [pc, #284]	; (8008048 <send_http_response_body+0x26c>)
 8007f2a:	2194      	movs	r1, #148	; 0x94
 8007f2c:	fb01 f303 	mul.w	r3, r1, r3
 8007f30:	4413      	add	r3, r2
 8007f32:	3390      	adds	r3, #144	; 0x90
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d125      	bne.n	8007f86 <send_http_response_body+0x1aa>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 8007f3a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007f3e:	4a42      	ldr	r2, [pc, #264]	; (8008048 <send_http_response_body+0x26c>)
 8007f40:	2194      	movs	r1, #148	; 0x94
 8007f42:	fb01 f303 	mul.w	r3, r1, r3
 8007f46:	4413      	add	r3, r2
 8007f48:	3388      	adds	r3, #136	; 0x88
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d009      	beq.n	8007f64 <send_http_response_body+0x188>
 8007f50:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007f54:	4a3c      	ldr	r2, [pc, #240]	; (8008048 <send_http_response_body+0x26c>)
 8007f56:	2194      	movs	r1, #148	; 0x94
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	3384      	adds	r3, #132	; 0x84
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	b298      	uxth	r0, r3
 8007f68:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007f6c:	4a36      	ldr	r2, [pc, #216]	; (8008048 <send_http_response_body+0x26c>)
 8007f6e:	2194      	movs	r1, #148	; 0x94
 8007f70:	fb01 f303 	mul.w	r3, r1, r3
 8007f74:	4413      	add	r3, r2
 8007f76:	338c      	adds	r3, #140	; 0x8c
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	f000 fbee 	bl	8008760 <read_userReg_webContent>
 8007f84:	e001      	b.n	8007f8a <send_http_response_body+0x1ae>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
	}
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4832      	ldr	r0, [pc, #200]	; (800805c <send_http_response_body+0x280>)
 8007f92:	f000 ff71 	bl	8008e78 <iprintf>
#endif

	if(send_len) send(s, buf, send_len);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d007      	beq.n	8007fac <send_http_response_body+0x1d0>
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fd fe7b 	bl	8005ca0 <send>
 8007faa:	e001      	b.n	8007fb0 <send_http_response_body+0x1d4>
	else flag_datasend_end = 1;
 8007fac:	2301      	movs	r3, #1
 8007fae:	74fb      	strb	r3, [r7, #19]

	if(flag_datasend_end)
 8007fb0:	7cfb      	ldrb	r3, [r7, #19]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d020      	beq.n	8007ff8 <send_http_response_body+0x21c>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 8007fb6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007fba:	4a23      	ldr	r2, [pc, #140]	; (8008048 <send_http_response_body+0x26c>)
 8007fbc:	2194      	movs	r1, #148	; 0x94
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3384      	adds	r3, #132	; 0x84
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 8007fca:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007fce:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <send_http_response_body+0x26c>)
 8007fd0:	2194      	movs	r1, #148	; 0x94
 8007fd2:	fb01 f303 	mul.w	r3, r1, r3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3388      	adds	r3, #136	; 0x88
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 8007fde:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007fe2:	4a19      	ldr	r2, [pc, #100]	; (8008048 <send_http_response_body+0x26c>)
 8007fe4:	2194      	movs	r1, #148	; 0x94
 8007fe6:	fb01 f303 	mul.w	r3, r1, r3
 8007fea:	4413      	add	r3, r2
 8007fec:	338c      	adds	r3, #140	; 0x8c
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	74fb      	strb	r3, [r7, #19]
 8007ff6:	e023      	b.n	8008040 <send_http_response_body+0x264>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 8007ff8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8007ffc:	4a12      	ldr	r2, [pc, #72]	; (8008048 <send_http_response_body+0x26c>)
 8007ffe:	2194      	movs	r1, #148	; 0x94
 8008000:	fb01 f303 	mul.w	r3, r1, r3
 8008004:	4413      	add	r3, r2
 8008006:	338c      	adds	r3, #140	; 0x8c
 8008008:	6819      	ldr	r1, [r3, #0]
 800800a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	440a      	add	r2, r1
 8008012:	490d      	ldr	r1, [pc, #52]	; (8008048 <send_http_response_body+0x26c>)
 8008014:	2094      	movs	r0, #148	; 0x94
 8008016:	fb00 f303 	mul.w	r3, r0, r3
 800801a:	440b      	add	r3, r1
 800801c:	338c      	adds	r3, #140	; 0x8c
 800801e:	601a      	str	r2, [r3, #0]
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : HTTP Response body - offset [ %ld ]\r\n", s, HTTPSock_Status[get_seqnum].file_offset);
 8008020:	7bf9      	ldrb	r1, [r7, #15]
 8008022:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8008026:	4a08      	ldr	r2, [pc, #32]	; (8008048 <send_http_response_body+0x26c>)
 8008028:	2094      	movs	r0, #148	; 0x94
 800802a:	fb00 f303 	mul.w	r3, r0, r3
 800802e:	4413      	add	r3, r2
 8008030:	338c      	adds	r3, #140	; 0x8c
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	480a      	ldr	r0, [pc, #40]	; (8008060 <send_http_response_body+0x284>)
 8008038:	f000 ff1e 	bl	8008e78 <iprintf>
 800803c:	e000      	b.n	8008040 <send_http_response_body+0x264>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 800803e:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	2000110c 	.word	0x2000110c
 800804c:	08018c04 	.word	0x08018c04
 8008050:	08018c40 	.word	0x08018c40
 8008054:	08018c80 	.word	0x08018c80
 8008058:	08018cc0 	.word	0x08018cc0
 800805c:	08018d00 	.word	0x08018d00
 8008060:	08018d3c 	.word	0x08018d3c

08008064 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b088      	sub	sp, #32
 8008068:	af02      	add	r7, sp, #8
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	607a      	str	r2, [r7, #4]
 800806e:	461a      	mov	r2, r3
 8008070:	4603      	mov	r3, r0
 8008072:	73fb      	strb	r3, [r7, #15]
 8008074:	4613      	mov	r3, r2
 8008076:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	4619      	mov	r1, r3
 8008080:	480e      	ldr	r0, [pc, #56]	; (80080bc <send_http_response_cgi+0x58>)
 8008082:	f000 fef9 	bl	8008e78 <iprintf>
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK, file_len, http_body);
 8008086:	89ba      	ldrh	r2, [r7, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	4613      	mov	r3, r2
 800808e:	4a0c      	ldr	r2, [pc, #48]	; (80080c0 <send_http_response_cgi+0x5c>)
 8008090:	490c      	ldr	r1, [pc, #48]	; (80080c4 <send_http_response_cgi+0x60>)
 8008092:	68b8      	ldr	r0, [r7, #8]
 8008094:	f000 ff5e 	bl	8008f54 <siprintf>
 8008098:	4603      	mov	r3, r0
 800809a:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	8afa      	ldrh	r2, [r7, #22]
 80080a0:	4619      	mov	r1, r3
 80080a2:	4809      	ldr	r0, [pc, #36]	; (80080c8 <send_http_response_cgi+0x64>)
 80080a4:	f000 fee8 	bl	8008e78 <iprintf>
#endif

	send(s, buf, send_len);
 80080a8:	8afa      	ldrh	r2, [r7, #22]
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	68b9      	ldr	r1, [r7, #8]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fd fdf6 	bl	8005ca0 <send>
}
 80080b4:	bf00      	nop
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	08018d78 	.word	0x08018d78
 80080c0:	08018db0 	.word	0x08018db0
 80080c4:	08018dec 	.word	0x08018dec
 80080c8:	08018df8 	.word	0x08018df8

080080cc <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	3308      	adds	r3, #8
 80080da:	019b      	lsls	r3, r3, #6
 80080dc:	3302      	adds	r3, #2
 80080de:	2108      	movs	r1, #8
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fd f97d 	bl	80053e0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80080e6:	bf00      	nop
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	3308      	adds	r3, #8
 80080ec:	019b      	lsls	r3, r3, #6
 80080ee:	3302      	adds	r3, #2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fd f993 	bl	800541c <WIZCHIP_READ>
 80080f6:	4603      	mov	r3, r0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1f4      	bne.n	80080e8 <http_disconnect+0x1c>

	return SOCK_OK;
 80080fe:	2301      	movs	r3, #1
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 8008108:	b5b0      	push	{r4, r5, r7, lr}
 800810a:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800810e:	af02      	add	r7, sp, #8
 8008110:	4602      	mov	r2, r0
 8008112:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8008116:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800811a:	6019      	str	r1, [r3, #0]
 800811c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8008120:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8008124:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	uint16_t content_num = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
	uint32_t file_len = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 8008138:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800813c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	3304      	adds	r3, #4
 8008146:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800814a:	2100      	movs	r1, #0
 800814c:	4618      	mov	r0, r3
 800814e:	f001 f813 	bl	8009178 <memset>

	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 8008152:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8008156:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff fb93 	bl	8007888 <getHTTPSequenceNum>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 3218 	strb.w	r3, [r7, #536]	; 0x218
 8008168:	f997 3218 	ldrsb.w	r3, [r7, #536]	; 0x218
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	f000 822f 	beq.w	80085d2 <http_process_handler+0x4ca>

	http_status = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
	http_response = pHTTP_RX;
 800817a:	4baf      	ldr	r3, [pc, #700]	; (8008438 <http_process_handler+0x330>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4aaf      	ldr	r2, [pc, #700]	; (800843c <http_process_handler+0x334>)
 8008180:	6013      	str	r3, [r2, #0]
	file_len = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

	//method Analyze
	switch (p_http_request->METHOD)
 8008188:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800818c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b03      	cmp	r3, #3
 8008196:	f000 816f 	beq.w	8008478 <http_process_handler+0x370>
 800819a:	2b03      	cmp	r3, #3
 800819c:	f300 8208 	bgt.w	80085b0 <http_process_handler+0x4a8>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d007      	beq.n	80081b4 <http_process_handler+0xac>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f2c0 8203 	blt.w	80085b0 <http_process_handler+0x4a8>
 80081aa:	3b01      	subs	r3, #1
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	f200 81ff 	bhi.w	80085b0 <http_process_handler+0x4a8>
 80081b2:	e010      	b.n	80081d6 <http_process_handler+0xce>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 80081b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80081b8:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
			send_http_response_header(s, 0, 0, http_status);
 80081bc:	f8b7 221a 	ldrh.w	r2, [r7, #538]	; 0x21a
 80081c0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80081c4:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80081c8:	7818      	ldrb	r0, [r3, #0]
 80081ca:	4613      	mov	r3, r2
 80081cc:	2200      	movs	r2, #0
 80081ce:	2100      	movs	r1, #0
 80081d0:	f7ff fd80 	bl	8007cd4 <send_http_response_header>
			break;
 80081d4:	e200      	b.n	80085d8 <http_process_handler+0x4d0>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 80081d6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80081da:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3302      	adds	r3, #2
 80081e2:	f107 020c 	add.w	r2, r7, #12
 80081e6:	4611      	mov	r1, r2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff fa4b 	bl	8007684 <get_http_uri_name>
			uri_name = uri_buf;
 80081ee:	f107 030c 	add.w	r3, r7, #12
 80081f2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 80081f6:	4992      	ldr	r1, [pc, #584]	; (8008440 <http_process_handler+0x338>)
 80081f8:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80081fc:	f7f8 f810 	bl	8000220 <strcmp>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10b      	bne.n	800821e <http_process_handler+0x116>
 8008206:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800820a:	498e      	ldr	r1, [pc, #568]	; (8008444 <http_process_handler+0x33c>)
 800820c:	461a      	mov	r2, r3
 800820e:	460b      	mov	r3, r1
 8008210:	cb03      	ldmia	r3!, {r0, r1}
 8008212:	6010      	str	r0, [r2, #0]
 8008214:	6051      	str	r1, [r2, #4]
 8008216:	8819      	ldrh	r1, [r3, #0]
 8008218:	789b      	ldrb	r3, [r3, #2]
 800821a:	8111      	strh	r1, [r2, #8]
 800821c:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 800821e:	498a      	ldr	r1, [pc, #552]	; (8008448 <http_process_handler+0x340>)
 8008220:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8008224:	f7f7 fffc 	bl	8000220 <strcmp>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <http_process_handler+0x13c>
 800822e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008232:	4a86      	ldr	r2, [pc, #536]	; (800844c <http_process_handler+0x344>)
 8008234:	461c      	mov	r4, r3
 8008236:	4613      	mov	r3, r2
 8008238:	cb07      	ldmia	r3!, {r0, r1, r2}
 800823a:	6020      	str	r0, [r4, #0]
 800823c:	6061      	str	r1, [r4, #4]
 800823e:	60a2      	str	r2, [r4, #8]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 8008244:	4982      	ldr	r1, [pc, #520]	; (8008450 <http_process_handler+0x348>)
 8008246:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 800824a:	f7f7 ffe9 	bl	8000220 <strcmp>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10b      	bne.n	800826c <http_process_handler+0x164>
 8008254:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008258:	4a7e      	ldr	r2, [pc, #504]	; (8008454 <http_process_handler+0x34c>)
 800825a:	461d      	mov	r5, r3
 800825c:	4614      	mov	r4, r2
 800825e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008260:	6028      	str	r0, [r5, #0]
 8008262:	6069      	str	r1, [r5, #4]
 8008264:	60aa      	str	r2, [r5, #8]
 8008266:	60eb      	str	r3, [r5, #12]
 8008268:	8823      	ldrh	r3, [r4, #0]
 800826a:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 800826c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8008270:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3301      	adds	r3, #1
 8008278:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800827c:	4618      	mov	r0, r3
 800827e:	f7fe ff7b 	bl	8007178 <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
 8008282:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8008286:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	4619      	mov	r1, r3
 800828e:	4872      	ldr	r0, [pc, #456]	; (8008458 <http_process_handler+0x350>)
 8008290:	f000 fdf2 	bl	8008e78 <iprintf>
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
 8008294:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8008298:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 800829c:	7819      	ldrb	r1, [r3, #0]
 800829e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80082a2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	461a      	mov	r2, r3
 80082ac:	486b      	ldr	r0, [pc, #428]	; (800845c <http_process_handler+0x354>)
 80082ae:	f000 fde3 	bl	8008e78 <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
 80082b2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80082b6:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80082c0:	4619      	mov	r1, r3
 80082c2:	4867      	ldr	r0, [pc, #412]	; (8008460 <http_process_handler+0x358>)
 80082c4:	f000 fdd8 	bl	8008e78 <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 80082c8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80082cc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	785b      	ldrb	r3, [r3, #1]
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d131      	bne.n	800833c <http_process_handler+0x234>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 80082d8:	4b62      	ldr	r3, [pc, #392]	; (8008464 <http_process_handler+0x35c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 80082e0:	4619      	mov	r1, r3
 80082e2:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80082e6:	f000 fa79 	bl	80087dc <http_get_cgi_handler>
 80082ea:	4603      	mov	r3, r0
 80082ec:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 80082f0:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d015      	beq.n	8008324 <http_process_handler+0x21c>
 80082f8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80082fc:	f240 72be 	movw	r2, #1982	; 0x7be
 8008300:	4293      	cmp	r3, r2
 8008302:	d80f      	bhi.n	8008324 <http_process_handler+0x21c>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 8008304:	4b4d      	ldr	r3, [pc, #308]	; (800843c <http_process_handler+0x334>)
 8008306:	6819      	ldr	r1, [r3, #0]
 8008308:	4b56      	ldr	r3, [pc, #344]	; (8008464 <http_process_handler+0x35c>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008310:	b29c      	uxth	r4, r3
 8008312:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8008316:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 800831a:	7818      	ldrb	r0, [r3, #0]
 800831c:	4623      	mov	r3, r4
 800831e:	f7ff fea1 	bl	8008064 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 8008322:	e158      	b.n	80085d6 <http_process_handler+0x4ce>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 8008324:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8008328:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 800832c:	7818      	ldrb	r0, [r3, #0]
 800832e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8008332:	2200      	movs	r2, #0
 8008334:	2108      	movs	r1, #8
 8008336:	f7ff fccd 	bl	8007cd4 <send_http_response_header>
			break;
 800833a:	e14c      	b.n	80085d6 <http_process_handler+0x4ce>
				if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 800833c:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8008340:	f207 2112 	addw	r1, r7, #530	; 0x212
 8008344:	f107 030c 	add.w	r3, r7, #12
 8008348:	4618      	mov	r0, r3
 800834a:	f000 f9cd 	bl	80086e8 <find_userReg_webContent>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d011      	beq.n	8008378 <http_process_handler+0x270>
					content_found = 1; // Web content found in code flash memory
 8008354:	2301      	movs	r3, #1
 8008356:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
					content_addr = (uint32_t)content_num;
 800835a:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 800835e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 8008362:	f997 3218 	ldrsb.w	r3, [r7, #536]	; 0x218
 8008366:	4a40      	ldr	r2, [pc, #256]	; (8008468 <http_process_handler+0x360>)
 8008368:	2194      	movs	r1, #148	; 0x94
 800836a:	fb01 f303 	mul.w	r3, r1, r3
 800836e:	4413      	add	r3, r2
 8008370:	3390      	adds	r3, #144	; 0x90
 8008372:	2201      	movs	r2, #1
 8008374:	701a      	strb	r2, [r3, #0]
 8008376:	e002      	b.n	800837e <http_process_handler+0x276>
					content_found = 0; // fail to find content
 8008378:	2300      	movs	r3, #0
 800837a:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
				if(!content_found)
 800837e:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10d      	bne.n	80083a2 <http_process_handler+0x29a>
					printf("> HTTPSocket[%d] : Unknown Page Request\r\n", s);
 8008386:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800838a:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	4619      	mov	r1, r3
 8008392:	4836      	ldr	r0, [pc, #216]	; (800846c <http_process_handler+0x364>)
 8008394:	f000 fd70 	bl	8008e78 <iprintf>
					http_status = STATUS_NOT_FOUND;
 8008398:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800839c:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
 80083a0:	e011      	b.n	80083c6 <http_process_handler+0x2be>
					printf("> HTTPSocket[%d] : Find Content [%s] ok - Start [%ld] len [ %ld ]byte\r\n", s, uri_name, content_addr, file_len);
 80083a2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80083a6:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80083aa:	7819      	ldrb	r1, [r3, #0]
 80083ac:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80083b6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80083ba:	482d      	ldr	r0, [pc, #180]	; (8008470 <http_process_handler+0x368>)
 80083bc:	f000 fd5c 	bl	8008e78 <iprintf>
					http_status = STATUS_OK;
 80083c0:	23c8      	movs	r3, #200	; 0xc8
 80083c2:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
				if(http_status)
 80083c6:	f8b7 321a 	ldrh.w	r3, [r7, #538]	; 0x21a
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d01c      	beq.n	8008408 <http_process_handler+0x300>
					printf("> HTTPSocket[%d] : Requested content len = [ %ld ]byte\r\n", s, file_len);
 80083ce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80083d2:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80083dc:	4619      	mov	r1, r3
 80083de:	4825      	ldr	r0, [pc, #148]	; (8008474 <http_process_handler+0x36c>)
 80083e0:	f000 fd4a 	bl	8008e78 <iprintf>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 80083e4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80083e8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	7859      	ldrb	r1, [r3, #1]
 80083f0:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80083f4:	f8b7 421a 	ldrh.w	r4, [r7, #538]	; 0x21a
 80083f8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80083fc:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8008400:	7818      	ldrb	r0, [r3, #0]
 8008402:	4623      	mov	r3, r4
 8008404:	f7ff fc66 	bl	8007cd4 <send_http_response_header>
				if(http_status == STATUS_OK)
 8008408:	f8b7 321a 	ldrh.w	r3, [r7, #538]	; 0x21a
 800840c:	2bc8      	cmp	r3, #200	; 0xc8
 800840e:	f040 80e2 	bne.w	80085d6 <http_process_handler+0x4ce>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 8008412:	4b0a      	ldr	r3, [pc, #40]	; (800843c <http_process_handler+0x334>)
 8008414:	6819      	ldr	r1, [r3, #0]
 8008416:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800841a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800841e:	f2a2 2219 	subw	r2, r2, #537	; 0x219
 8008422:	7810      	ldrb	r0, [r2, #0]
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800842a:	460a      	mov	r2, r1
 800842c:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8008430:	f7ff fcd4 	bl	8007ddc <send_http_response_body>
			break;
 8008434:	e0cf      	b.n	80085d6 <http_process_handler+0x4ce>
 8008436:	bf00      	nop
 8008438:	20002180 	.word	0x20002180
 800843c:	20001100 	.word	0x20001100
 8008440:	08018e40 	.word	0x08018e40
 8008444:	08018e44 	.word	0x08018e44
 8008448:	08018e50 	.word	0x08018e50
 800844c:	08018e54 	.word	0x08018e54
 8008450:	08018e64 	.word	0x08018e64
 8008454:	08018e6c 	.word	0x08018e6c
 8008458:	08018e80 	.word	0x08018e80
 800845c:	08018ea8 	.word	0x08018ea8
 8008460:	08018ed0 	.word	0x08018ed0
 8008464:	2000217c 	.word	0x2000217c
 8008468:	2000110c 	.word	0x2000110c
 800846c:	08018ef8 	.word	0x08018ef8
 8008470:	08018f24 	.word	0x08018f24
 8008474:	08018f6c 	.word	0x08018f6c

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 8008478:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800847c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	1c98      	adds	r0, r3, #2
 8008484:	f107 030c 	add.w	r3, r7, #12
 8008488:	4a55      	ldr	r2, [pc, #340]	; (80085e0 <http_process_handler+0x4d8>)
 800848a:	4956      	ldr	r1, [pc, #344]	; (80085e4 <http_process_handler+0x4dc>)
 800848c:	f7ff f949 	bl	8007722 <mid>
			uri_name = uri_buf;
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 8008498:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800849c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fe fe65 	bl	8007178 <find_http_uri_type>

#ifdef _HTTPSERVER_DEBUG_
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
 80084ae:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80084b2:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	4619      	mov	r1, r3
 80084ba:	484b      	ldr	r0, [pc, #300]	; (80085e8 <http_process_handler+0x4e0>)
 80084bc:	f000 fcdc 	bl	8008e78 <iprintf>
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
 80084c0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80084c4:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80084ce:	4619      	mov	r1, r3
 80084d0:	4846      	ldr	r0, [pc, #280]	; (80085ec <http_process_handler+0x4e4>)
 80084d2:	f000 fcd1 	bl	8008e78 <iprintf>
			printf("Type = %d\r\n", p_http_request->TYPE);
 80084d6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80084da:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	785b      	ldrb	r3, [r3, #1]
 80084e2:	4619      	mov	r1, r3
 80084e4:	4842      	ldr	r0, [pc, #264]	; (80085f0 <http_process_handler+0x4e8>)
 80084e6:	f000 fcc7 	bl	8008e78 <iprintf>
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 80084ea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80084ee:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	2b08      	cmp	r3, #8
 80084f8:	d14d      	bne.n	8008596 <http_process_handler+0x48e>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 80084fa:	4b3e      	ldr	r3, [pc, #248]	; (80085f4 <http_process_handler+0x4ec>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8008502:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008506:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 800850a:	6809      	ldr	r1, [r1, #0]
 800850c:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8008510:	f000 f990 	bl	8008834 <http_post_cgi_handler>
 8008514:	4603      	mov	r3, r0
 8008516:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
 800851a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800851e:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8008522:	7819      	ldrb	r1, [r3, #0]
 8008524:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <http_process_handler+0x428>
 800852c:	4a32      	ldr	r2, [pc, #200]	; (80085f8 <http_process_handler+0x4f0>)
 800852e:	e000      	b.n	8008532 <http_process_handler+0x42a>
 8008530:	4a32      	ldr	r2, [pc, #200]	; (80085fc <http_process_handler+0x4f4>)
 8008532:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008536:	4832      	ldr	r0, [pc, #200]	; (8008600 <http_process_handler+0x4f8>)
 8008538:	f000 fc9e 	bl	8008e78 <iprintf>
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 800853c:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8008540:	2b00      	cmp	r3, #0
 8008542:	d01c      	beq.n	800857e <http_process_handler+0x476>
 8008544:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008548:	f240 72be 	movw	r2, #1982	; 0x7be
 800854c:	4293      	cmp	r3, r2
 800854e:	d816      	bhi.n	800857e <http_process_handler+0x476>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 8008550:	4b2c      	ldr	r3, [pc, #176]	; (8008604 <http_process_handler+0x4fc>)
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	4b27      	ldr	r3, [pc, #156]	; (80085f4 <http_process_handler+0x4ec>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800855c:	b29c      	uxth	r4, r3
 800855e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8008562:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8008566:	7818      	ldrb	r0, [r3, #0]
 8008568:	4623      	mov	r3, r4
 800856a:	f7ff fd7b 	bl	8008064 <send_http_response_cgi>

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 800856e:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8008572:	2b02      	cmp	r3, #2
 8008574:	d11b      	bne.n	80085ae <http_process_handler+0x4a6>
 8008576:	4b24      	ldr	r3, [pc, #144]	; (8008608 <http_process_handler+0x500>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4798      	blx	r3
 800857c:	e017      	b.n	80085ae <http_process_handler+0x4a6>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 800857e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8008582:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8008586:	7818      	ldrb	r0, [r3, #0]
 8008588:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800858c:	2200      	movs	r2, #0
 800858e:	2108      	movs	r1, #8
 8008590:	f7ff fba0 	bl	8007cd4 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 8008594:	e020      	b.n	80085d8 <http_process_handler+0x4d0>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 8008596:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800859a:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 800859e:	7818      	ldrb	r0, [r3, #0]
 80085a0:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80085a4:	2200      	movs	r2, #0
 80085a6:	2100      	movs	r1, #0
 80085a8:	f7ff fb94 	bl	8007cd4 <send_http_response_header>
			break;
 80085ac:	e014      	b.n	80085d8 <http_process_handler+0x4d0>
 80085ae:	e013      	b.n	80085d8 <http_process_handler+0x4d0>

		default :
			http_status = STATUS_BAD_REQ;
 80085b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80085b4:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a
			send_http_response_header(s, 0, 0, http_status);
 80085b8:	f8b7 221a 	ldrh.w	r2, [r7, #538]	; 0x21a
 80085bc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80085c0:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80085c4:	7818      	ldrb	r0, [r3, #0]
 80085c6:	4613      	mov	r3, r2
 80085c8:	2200      	movs	r2, #0
 80085ca:	2100      	movs	r1, #0
 80085cc:	f7ff fb82 	bl	8007cd4 <send_http_response_header>
			break;
 80085d0:	e002      	b.n	80085d8 <http_process_handler+0x4d0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 80085d2:	bf00      	nop
 80085d4:	e000      	b.n	80085d8 <http_process_handler+0x4d0>
			break;
 80085d6:	bf00      	nop
	}
}
 80085d8:	f507 7708 	add.w	r7, r7, #544	; 0x220
 80085dc:	46bd      	mov	sp, r7
 80085de:	bdb0      	pop	{r4, r5, r7, pc}
 80085e0:	08018fa8 	.word	0x08018fa8
 80085e4:	08018e40 	.word	0x08018e40
 80085e8:	08018fb0 	.word	0x08018fb0
 80085ec:	08018fd8 	.word	0x08018fd8
 80085f0:	08019000 	.word	0x08019000
 80085f4:	20001100 	.word	0x20001100
 80085f8:	0801900c 	.word	0x0801900c
 80085fc:	0801901c 	.word	0x0801901c
 8008600:	08019030 	.word	0x08019030
 8008604:	2000217c 	.word	0x2000217c
 8008608:	20000040 	.word	0x20000040

0800860c <get_httpServer_timecount>:
{
	httpServer_tick_1s++;
}

uint32_t get_httpServer_timecount(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
	return httpServer_tick_1s;
 8008610:	4b03      	ldr	r3, [pc, #12]	; (8008620 <get_httpServer_timecount+0x14>)
 8008612:	681b      	ldr	r3, [r3, #0]
}
 8008614:	4618      	mov	r0, r3
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	20001108 	.word	0x20001108

08008624 <reg_httpServer_webContent>:

void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 8008624:	b590      	push	{r4, r7, lr}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d04e      	beq.n	80086d2 <reg_httpServer_webContent+0xae>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d04b      	beq.n	80086d2 <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 800863a:	4b29      	ldr	r3, [pc, #164]	; (80086e0 <reg_httpServer_webContent+0xbc>)
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	2b13      	cmp	r3, #19
 8008640:	d849      	bhi.n	80086d6 <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7f7 fdf6 	bl	8000234 <strlen>
 8008648:	4603      	mov	r3, r0
 800864a:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 800864c:	6838      	ldr	r0, [r7, #0]
 800864e:	f7f7 fdf1 	bl	8000234 <strlen>
 8008652:	60b8      	str	r0, [r7, #8]

	web_content[total_content_cnt].content_name = malloc(name_len+1);
 8008654:	89fb      	ldrh	r3, [r7, #14]
 8008656:	3301      	adds	r3, #1
 8008658:	461a      	mov	r2, r3
 800865a:	4b21      	ldr	r3, [pc, #132]	; (80086e0 <reg_httpServer_webContent+0xbc>)
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	461c      	mov	r4, r3
 8008660:	4610      	mov	r0, r2
 8008662:	f000 faa5 	bl	8008bb0 <malloc>
 8008666:	4603      	mov	r3, r0
 8008668:	4619      	mov	r1, r3
 800866a:	4a1e      	ldr	r2, [pc, #120]	; (80086e4 <reg_httpServer_webContent+0xc0>)
 800866c:	4623      	mov	r3, r4
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	4423      	add	r3, r4
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	6019      	str	r1, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 8008678:	4b19      	ldr	r3, [pc, #100]	; (80086e0 <reg_httpServer_webContent+0xbc>)
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	4619      	mov	r1, r3
 800867e:	4a19      	ldr	r2, [pc, #100]	; (80086e4 <reg_httpServer_webContent+0xc0>)
 8008680:	460b      	mov	r3, r1
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	440b      	add	r3, r1
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fe9e 	bl	80093d0 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 8008694:	4b12      	ldr	r3, [pc, #72]	; (80086e0 <reg_httpServer_webContent+0xbc>)
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	4619      	mov	r1, r3
 800869a:	4a12      	ldr	r2, [pc, #72]	; (80086e4 <reg_httpServer_webContent+0xc0>)
 800869c:	460b      	mov	r3, r1
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	440b      	add	r3, r1
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	3304      	adds	r3, #4
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 80086ac:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <reg_httpServer_webContent+0xbc>)
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	4619      	mov	r1, r3
 80086b2:	4a0c      	ldr	r2, [pc, #48]	; (80086e4 <reg_httpServer_webContent+0xc0>)
 80086b4:	460b      	mov	r3, r1
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	440b      	add	r3, r1
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	3308      	adds	r3, #8
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 80086c4:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <reg_httpServer_webContent+0xbc>)
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	3301      	adds	r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	4b04      	ldr	r3, [pc, #16]	; (80086e0 <reg_httpServer_webContent+0xbc>)
 80086ce:	801a      	strh	r2, [r3, #0]
 80086d0:	e002      	b.n	80086d8 <reg_httpServer_webContent+0xb4>
		return;
 80086d2:	bf00      	nop
 80086d4:	e000      	b.n	80086d8 <reg_httpServer_webContent+0xb4>
		return;
 80086d6:	bf00      	nop
}
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd90      	pop	{r4, r7, pc}
 80086de:	bf00      	nop
 80086e0:	20001104 	.word	0x20001104
 80086e4:	20002184 	.word	0x20002184

080086e8 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 80086f4:	2300      	movs	r3, #0
 80086f6:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 80086f8:	2300      	movs	r3, #0
 80086fa:	82fb      	strh	r3, [r7, #22]
 80086fc:	e022      	b.n	8008744 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 80086fe:	8afa      	ldrh	r2, [r7, #22]
 8008700:	4915      	ldr	r1, [pc, #84]	; (8008758 <find_userReg_webContent+0x70>)
 8008702:	4613      	mov	r3, r2
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4619      	mov	r1, r3
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7f7 fd85 	bl	8000220 <strcmp>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d110      	bne.n	800873e <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 800871c:	8afa      	ldrh	r2, [r7, #22]
 800871e:	490e      	ldr	r1, [pc, #56]	; (8008758 <find_userReg_webContent+0x70>)
 8008720:	4613      	mov	r3, r2
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	440b      	add	r3, r1
 800872a:	3304      	adds	r3, #4
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	601a      	str	r2, [r3, #0]
			*content_num = i;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	8afa      	ldrh	r2, [r7, #22]
 8008736:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 8008738:	2301      	movs	r3, #1
 800873a:	757b      	strb	r3, [r7, #21]
			break;
 800873c:	e007      	b.n	800874e <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 800873e:	8afb      	ldrh	r3, [r7, #22]
 8008740:	3301      	adds	r3, #1
 8008742:	82fb      	strh	r3, [r7, #22]
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <find_userReg_webContent+0x74>)
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	8afa      	ldrh	r2, [r7, #22]
 800874a:	429a      	cmp	r2, r3
 800874c:	d3d7      	bcc.n	80086fe <find_userReg_webContent+0x16>
		}
	}
	return ret;
 800874e:	7d7b      	ldrb	r3, [r7, #21]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	20002184 	.word	0x20002184
 800875c:	20001104 	.word	0x20001104

08008760 <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
 800876a:	461a      	mov	r2, r3
 800876c:	4603      	mov	r3, r0
 800876e:	81fb      	strh	r3, [r7, #14]
 8008770:	4613      	mov	r3, r2
 8008772:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 8008778:	4b16      	ldr	r3, [pc, #88]	; (80087d4 <read_userReg_webContent+0x74>)
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	89fa      	ldrh	r2, [r7, #14]
 800877e:	429a      	cmp	r2, r3
 8008780:	d901      	bls.n	8008786 <read_userReg_webContent+0x26>
 8008782:	2300      	movs	r3, #0
 8008784:	e021      	b.n	80087ca <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 8008786:	89fa      	ldrh	r2, [r7, #14]
 8008788:	4913      	ldr	r1, [pc, #76]	; (80087d8 <read_userReg_webContent+0x78>)
 800878a:	4613      	mov	r3, r2
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	3308      	adds	r3, #8
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <read_userReg_webContent+0x48>
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 80087a8:	89bb      	ldrh	r3, [r7, #12]
 80087aa:	461a      	mov	r2, r3
 80087ac:	6979      	ldr	r1, [r7, #20]
 80087ae:	68b8      	ldr	r0, [r7, #8]
 80087b0:	f000 fd06 	bl	80091c0 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 80087b4:	89bb      	ldrh	r3, [r7, #12]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	4413      	add	r3, r2
 80087ba:	2200      	movs	r2, #0
 80087bc:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 80087be:	68b8      	ldr	r0, [r7, #8]
 80087c0:	f7f7 fd38 	bl	8000234 <strlen>
 80087c4:	4603      	mov	r3, r0
 80087c6:	827b      	strh	r3, [r7, #18]
	return ret;
 80087c8:	8a7b      	ldrh	r3, [r7, #18]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20001104 	.word	0x20001104
 80087d8:	20002184 	.word	0x20002184

080087dc <http_get_cgi_handler>:
#include <string.h>
#include <stdlib.h>
#include "httpUtil.h"

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 80087e8:	2301      	movs	r3, #1
 80087ea:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 80087f0:	f107 0314 	add.w	r3, r7, #20
 80087f4:	461a      	mov	r2, r3
 80087f6:	68b9      	ldr	r1, [r7, #8]
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f7f7 ffcf 	bl	800079c <predefined_get_cgi_processor>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d108      	bne.n	8008816 <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 8008804:	490a      	ldr	r1, [pc, #40]	; (8008830 <http_get_cgi_handler+0x54>)
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7f7 fd0a 	bl	8000220 <strcmp>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 8008812:	2300      	movs	r3, #0
 8008814:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <http_get_cgi_handler+0x48>
 800881c:	8abb      	ldrh	r3, [r7, #20]
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	601a      	str	r2, [r3, #0]
	return ret;
 8008824:	7dfb      	ldrb	r3, [r7, #23]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	0801911c 	.word	0x0801911c

08008834 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 8008842:	2301      	movs	r3, #1
 8008844:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	1c99      	adds	r1, r3, #2
 8008852:	f107 0314 	add.w	r3, r7, #20
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7f8 f94d 	bl	8000af8 <predefined_set_cgi_processor>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d114      	bne.n	800888e <http_post_cgi_handler+0x5a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 8008864:	4910      	ldr	r1, [pc, #64]	; (80088a8 <http_post_cgi_handler+0x74>)
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7f7 fcda 	bl	8000220 <strcmp>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10b      	bne.n	800888a <http_post_cgi_handler+0x56>
	{
		// To do
		val = 1;
 8008872:	2301      	movs	r3, #1
 8008874:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 8008876:	7dbb      	ldrb	r3, [r7, #22]
 8008878:	461a      	mov	r2, r3
 800887a:	490c      	ldr	r1, [pc, #48]	; (80088ac <http_post_cgi_handler+0x78>)
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fb69 	bl	8008f54 <siprintf>
 8008882:	4603      	mov	r3, r0
 8008884:	b29b      	uxth	r3, r3
 8008886:	82bb      	strh	r3, [r7, #20]
 8008888:	e001      	b.n	800888e <http_post_cgi_handler+0x5a>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 800888a:	2300      	movs	r3, #0
 800888c:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <http_post_cgi_handler+0x68>
 8008894:	8abb      	ldrh	r3, [r7, #20]
 8008896:	461a      	mov	r2, r3
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	601a      	str	r2, [r3, #0]
	return ret;
 800889c:	7dfb      	ldrb	r3, [r7, #23]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	0801911c 	.word	0x0801911c
 80088ac:	08019128 	.word	0x08019128

080088b0 <wizchip_select>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
static inline void wizchip_select(void)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80088b4:	2200      	movs	r2, #0
 80088b6:	2180      	movs	r1, #128	; 0x80
 80088b8:	4802      	ldr	r0, [pc, #8]	; (80088c4 <wizchip_select+0x14>)
 80088ba:	f7f9 fd23 	bl	8002304 <HAL_GPIO_WritePin>
}
 80088be:	bf00      	nop
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	40020c00 	.word	0x40020c00

080088c8 <wizchip_deselect>:

static inline void wizchip_deselect(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80088cc:	2201      	movs	r2, #1
 80088ce:	2180      	movs	r1, #128	; 0x80
 80088d0:	4802      	ldr	r0, [pc, #8]	; (80088dc <wizchip_deselect+0x14>)
 80088d2:	f7f9 fd17 	bl	8002304 <HAL_GPIO_WritePin>
}
 80088d6:	bf00      	nop
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	40020c00 	.word	0x40020c00

080088e0 <wizchip_read>:

static inline uint16_t wizchip_read(uint32_t addr)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  return _W5300_DATA(addr);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <wizchip_write>:

static inline void wizchip_write(uint32_t addr, uint16_t tx_data)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	807b      	strh	r3, [r7, #2]
  _W5300_DATA(addr) = tx_data;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8008914:	461a      	mov	r2, r3
 8008916:	887b      	ldrh	r3, [r7, #2]
 8008918:	8013      	strh	r3, [r2, #0]
}
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
	...

08008928 <wizchip_initialize>:

void wizchip_initialize(void)
{
 8008928:	b590      	push	{r4, r7, lr}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
  /* Deselect the FLASH : chip select high */
  wizchip_deselect();
 800892e:	f7ff ffcb 	bl	80088c8 <wizchip_deselect>

  /* CS function register */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8008932:	490e      	ldr	r1, [pc, #56]	; (800896c <wizchip_initialize+0x44>)
 8008934:	480e      	ldr	r0, [pc, #56]	; (8008970 <wizchip_initialize+0x48>)
 8008936:	f7fd fe53 	bl	80065e0 <reg_wizchip_cs_cbfunc>

  /* BUS function register */
  reg_wizchip_bus_cbfunc(wizchip_read, wizchip_write);
 800893a:	490e      	ldr	r1, [pc, #56]	; (8008974 <wizchip_initialize+0x4c>)
 800893c:	480e      	ldr	r0, [pc, #56]	; (8008978 <wizchip_initialize+0x50>)
 800893e:	f7fd fe75 	bl	800662c <reg_wizchip_bus_cbfunc>

  /* W5x00 initialize */
#if (_WIZCHIP_ == W5100S)
  uint8_t memsize[2][4] = {{2, 2, 2, 2}, {2, 2, 2, 2}};
#elif (_WIZCHIP_ == W5300)
  uint8_t memsize[2][8] = {{8, 8, 8, 8, 8, 8, 8, 8}, {8, 8, 8, 8, 8, 8, 8, 8}};
 8008942:	4b0e      	ldr	r3, [pc, #56]	; (800897c <wizchip_initialize+0x54>)
 8008944:	463c      	mov	r4, r7
 8008946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#elif (_WIZCHIP_ == W5500)
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
#endif

  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 800894c:	463b      	mov	r3, r7
 800894e:	4619      	mov	r1, r3
 8008950:	2001      	movs	r0, #1
 8008952:	f7fd fe97 	bl	8006684 <ctlwizchip>
 8008956:	4603      	mov	r3, r0
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d102      	bne.n	8008964 <wizchip_initialize+0x3c>
  {
    printf(" W5x00 initialized fail\n");
 800895e:	4808      	ldr	r0, [pc, #32]	; (8008980 <wizchip_initialize+0x58>)
 8008960:	f000 faf0 	bl	8008f44 <puts>

      return;
    }
  } while (temp == PHY_LINK_OFF);
#endif
}
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	bd90      	pop	{r4, r7, pc}
 800896a:	bf00      	nop
 800896c:	080088c9 	.word	0x080088c9
 8008970:	080088b1 	.word	0x080088b1
 8008974:	08008901 	.word	0x08008901
 8008978:	080088e1 	.word	0x080088e1
 800897c:	08019144 	.word	0x08019144
 8008980:	0801912c 	.word	0x0801912c

08008984 <wizchip_reset>:

void wizchip_reset(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8008988:	2200      	movs	r2, #0
 800898a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800898e:	4808      	ldr	r0, [pc, #32]	; (80089b0 <wizchip_reset+0x2c>)
 8008990:	f7f9 fcb8 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008994:	2064      	movs	r0, #100	; 0x64
 8008996:	f7f8 ff31 	bl	80017fc <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800899a:	2201      	movs	r2, #1
 800899c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089a0:	4803      	ldr	r0, [pc, #12]	; (80089b0 <wizchip_reset+0x2c>)
 80089a2:	f7f9 fcaf 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80089a6:	2064      	movs	r0, #100	; 0x64
 80089a8:	f7f8 ff28 	bl	80017fc <HAL_Delay>
}
 80089ac:	bf00      	nop
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40020800 	.word	0x40020800

080089b4 <wizchip_check>:

void wizchip_check(void)
{
 80089b4:	b480      	push	{r7}
 80089b6:	af00      	add	r7, sp, #0

    while (1)
      ;
  }
#endif
}
 80089b8:	bf00      	nop
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <wizchip_network_initialize>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void wizchip_network_initialize(wiz_NetInfo *net_info)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b082      	sub	sp, #8
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  wizchip_initialize();
 80089ca:	f7ff ffad 	bl	8008928 <wizchip_initialize>
  wizchip_reset();
 80089ce:	f7ff ffd9 	bl	8008984 <wizchip_reset>
  wizchip_check();
 80089d2:	f7ff ffef 	bl	80089b4 <wizchip_check>

  ctlnetwork(CN_SET_NETINFO, (void *)net_info);
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	2000      	movs	r0, #0
 80089da:	f7fd fecf 	bl	800677c <ctlnetwork>
}
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <wizchip_network_information>:

void wizchip_network_information(wiz_NetInfo *net_info)
{
 80089e8:	b5b0      	push	{r4, r5, r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af04      	add	r7, sp, #16
 80089ee:	6078      	str	r0, [r7, #4]
  uint8_t tmp_str[8] = {
 80089f0:	2300      	movs	r3, #0
 80089f2:	60bb      	str	r3, [r7, #8]
 80089f4:	2300      	movs	r3, #0
 80089f6:	60fb      	str	r3, [r7, #12]
      0,
  };

  ctlnetwork(CN_GET_NETINFO, (void *)net_info);
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	2001      	movs	r0, #1
 80089fc:	f7fd febe 	bl	800677c <ctlnetwork>
  ctlwizchip(CW_GET_ID, (void *)tmp_str);
 8008a00:	f107 0308 	add.w	r3, r7, #8
 8008a04:	4619      	mov	r1, r3
 8008a06:	2008      	movs	r0, #8
 8008a08:	f7fd fe3c 	bl	8006684 <ctlwizchip>

  if (net_info->dhcp == NETINFO_DHCP)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7d9b      	ldrb	r3, [r3, #22]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d109      	bne.n	8008a28 <wizchip_network_information+0x40>
  {
    printf("====================================================================================================\n");
 8008a14:	4839      	ldr	r0, [pc, #228]	; (8008afc <wizchip_network_information+0x114>)
 8008a16:	f000 fa95 	bl	8008f44 <puts>
    printf(" %s network configuration : DHCP\n\n", (char *)tmp_str);
 8008a1a:	f107 0308 	add.w	r3, r7, #8
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4837      	ldr	r0, [pc, #220]	; (8008b00 <wizchip_network_information+0x118>)
 8008a22:	f000 fa29 	bl	8008e78 <iprintf>
 8008a26:	e008      	b.n	8008a3a <wizchip_network_information+0x52>
  }
  else
  {
    printf("====================================================================================================\n");
 8008a28:	4834      	ldr	r0, [pc, #208]	; (8008afc <wizchip_network_information+0x114>)
 8008a2a:	f000 fa8b 	bl	8008f44 <puts>
    printf(" %s network configuration : static\n\n", (char *)tmp_str);
 8008a2e:	f107 0308 	add.w	r3, r7, #8
 8008a32:	4619      	mov	r1, r3
 8008a34:	4833      	ldr	r0, [pc, #204]	; (8008b04 <wizchip_network_information+0x11c>)
 8008a36:	f000 fa1f 	bl	8008e78 <iprintf>
  }

  printf(" MAC         : %02X:%02X:%02X:%02X:%02X:%02X\n", net_info->mac[0], net_info->mac[1], net_info->mac[2], net_info->mac[3], net_info->mac[4], net_info->mac[5]);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	785b      	ldrb	r3, [r3, #1]
 8008a44:	461c      	mov	r4, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	789b      	ldrb	r3, [r3, #2]
 8008a4a:	461d      	mov	r5, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	78db      	ldrb	r3, [r3, #3]
 8008a50:	461a      	mov	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	791b      	ldrb	r3, [r3, #4]
 8008a56:	4619      	mov	r1, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	795b      	ldrb	r3, [r3, #5]
 8008a5c:	9302      	str	r3, [sp, #8]
 8008a5e:	9101      	str	r1, [sp, #4]
 8008a60:	9200      	str	r2, [sp, #0]
 8008a62:	462b      	mov	r3, r5
 8008a64:	4622      	mov	r2, r4
 8008a66:	4601      	mov	r1, r0
 8008a68:	4827      	ldr	r0, [pc, #156]	; (8008b08 <wizchip_network_information+0x120>)
 8008a6a:	f000 fa05 	bl	8008e78 <iprintf>
  printf(" IP          : %d.%d.%d.%d\n", net_info->ip[0], net_info->ip[1], net_info->ip[2], net_info->ip[3]);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	799b      	ldrb	r3, [r3, #6]
 8008a72:	4619      	mov	r1, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	79db      	ldrb	r3, [r3, #7]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	7a1b      	ldrb	r3, [r3, #8]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	7a5b      	ldrb	r3, [r3, #9]
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4603      	mov	r3, r0
 8008a88:	4820      	ldr	r0, [pc, #128]	; (8008b0c <wizchip_network_information+0x124>)
 8008a8a:	f000 f9f5 	bl	8008e78 <iprintf>
  printf(" Subnet Mask : %d.%d.%d.%d\n", net_info->sn[0], net_info->sn[1], net_info->sn[2], net_info->sn[3]);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	7a9b      	ldrb	r3, [r3, #10]
 8008a92:	4619      	mov	r1, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	7adb      	ldrb	r3, [r3, #11]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7b1b      	ldrb	r3, [r3, #12]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	7b5b      	ldrb	r3, [r3, #13]
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	4819      	ldr	r0, [pc, #100]	; (8008b10 <wizchip_network_information+0x128>)
 8008aaa:	f000 f9e5 	bl	8008e78 <iprintf>
  printf(" Gateway     : %d.%d.%d.%d\n", net_info->gw[0], net_info->gw[1], net_info->gw[2], net_info->gw[3]);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	7b9b      	ldrb	r3, [r3, #14]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	7bdb      	ldrb	r3, [r3, #15]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	7c1b      	ldrb	r3, [r3, #16]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	7c5b      	ldrb	r3, [r3, #17]
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	4812      	ldr	r0, [pc, #72]	; (8008b14 <wizchip_network_information+0x12c>)
 8008aca:	f000 f9d5 	bl	8008e78 <iprintf>
  printf(" DNS         : %d.%d.%d.%d\n", net_info->dns[0], net_info->dns[1], net_info->dns[2], net_info->dns[3]);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7c9b      	ldrb	r3, [r3, #18]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	7cdb      	ldrb	r3, [r3, #19]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	7d1b      	ldrb	r3, [r3, #20]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	7d5b      	ldrb	r3, [r3, #21]
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	480b      	ldr	r0, [pc, #44]	; (8008b18 <wizchip_network_information+0x130>)
 8008aea:	f000 f9c5 	bl	8008e78 <iprintf>
  printf("====================================================================================================\n\n");
 8008aee:	480b      	ldr	r0, [pc, #44]	; (8008b1c <wizchip_network_information+0x134>)
 8008af0:	f000 fa28 	bl	8008f44 <puts>
}
 8008af4:	bf00      	nop
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bdb0      	pop	{r4, r5, r7, pc}
 8008afc:	08019154 	.word	0x08019154
 8008b00:	080191bc 	.word	0x080191bc
 8008b04:	080191e0 	.word	0x080191e0
 8008b08:	08019208 	.word	0x08019208
 8008b0c:	08019238 	.word	0x08019238
 8008b10:	08019254 	.word	0x08019254
 8008b14:	08019270 	.word	0x08019270
 8008b18:	0801928c 	.word	0x0801928c
 8008b1c:	080192a8 	.word	0x080192a8

08008b20 <HAL_SYSTICK_Callback>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void HAL_SYSTICK_Callback(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  g_time_base++;
 8008b24:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <HAL_SYSTICK_Callback+0x48>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	4a0f      	ldr	r2, [pc, #60]	; (8008b68 <HAL_SYSTICK_Callback+0x48>)
 8008b2c:	6013      	str	r3, [r2, #0]

  if ((g_time_base % 1) == 0) // uint : 1 millisecond, repeat every millisecond
  {
    g_msec++;
 8008b2e:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <HAL_SYSTICK_Callback+0x4c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3301      	adds	r3, #1
 8008b34:	4a0d      	ldr	r2, [pc, #52]	; (8008b6c <HAL_SYSTICK_Callback+0x4c>)
 8008b36:	6013      	str	r3, [r2, #0]

    wizchip_1msec_timer_callback();
 8008b38:	f000 f81e 	bl	8008b78 <wizchip_1msec_timer_callback>
  }

  if ((g_time_base % 1000) == 0) // uint : 1 second, repeat every second
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <HAL_SYSTICK_Callback+0x48>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <HAL_SYSTICK_Callback+0x50>)
 8008b42:	fba3 1302 	umull	r1, r3, r3, r2
 8008b46:	099b      	lsrs	r3, r3, #6
 8008b48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b4c:	fb01 f303 	mul.w	r3, r1, r3
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <HAL_SYSTICK_Callback+0x44>
  {
    g_sec++;
 8008b56:	4b07      	ldr	r3, [pc, #28]	; (8008b74 <HAL_SYSTICK_Callback+0x54>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	4a05      	ldr	r2, [pc, #20]	; (8008b74 <HAL_SYSTICK_Callback+0x54>)
 8008b5e:	6013      	str	r3, [r2, #0]

    wizchip_1sec_timer_callback();
 8008b60:	f000 f818 	bl	8008b94 <wizchip_1sec_timer_callback>
  }
}
 8008b64:	bf00      	nop
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	200015ac 	.word	0x200015ac
 8008b6c:	200015b4 	.word	0x200015b4
 8008b70:	10624dd3 	.word	0x10624dd3
 8008b74:	200015b0 	.word	0x200015b0

08008b78 <wizchip_1msec_timer_callback>:
{
  msec_timer_callback_ptr = callback;
}

void wizchip_1msec_timer_callback(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  if (msec_timer_callback_ptr != NULL)
 8008b7c:	4b04      	ldr	r3, [pc, #16]	; (8008b90 <wizchip_1msec_timer_callback+0x18>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <wizchip_1msec_timer_callback+0x12>
  {
    msec_timer_callback_ptr();
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <wizchip_1msec_timer_callback+0x18>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4798      	blx	r3
  }
}
 8008b8a:	bf00      	nop
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20002274 	.word	0x20002274

08008b94 <wizchip_1sec_timer_callback>:
{
  sec_timer_callback_ptr = callback;
}

void wizchip_1sec_timer_callback(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  if (sec_timer_callback_ptr != NULL)
 8008b98:	4b04      	ldr	r3, [pc, #16]	; (8008bac <wizchip_1sec_timer_callback+0x18>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <wizchip_1sec_timer_callback+0x12>
  {
    sec_timer_callback_ptr();
 8008ba0:	4b02      	ldr	r3, [pc, #8]	; (8008bac <wizchip_1sec_timer_callback+0x18>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4798      	blx	r3
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20002278 	.word	0x20002278

08008bb0 <malloc>:
 8008bb0:	4b02      	ldr	r3, [pc, #8]	; (8008bbc <malloc+0xc>)
 8008bb2:	4601      	mov	r1, r0
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	f000 b823 	b.w	8008c00 <_malloc_r>
 8008bba:	bf00      	nop
 8008bbc:	2000009c 	.word	0x2000009c

08008bc0 <sbrk_aligned>:
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	4e0e      	ldr	r6, [pc, #56]	; (8008bfc <sbrk_aligned+0x3c>)
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	6831      	ldr	r1, [r6, #0]
 8008bc8:	4605      	mov	r5, r0
 8008bca:	b911      	cbnz	r1, 8008bd2 <sbrk_aligned+0x12>
 8008bcc:	f000 fbb2 	bl	8009334 <_sbrk_r>
 8008bd0:	6030      	str	r0, [r6, #0]
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	f000 fbad 	bl	8009334 <_sbrk_r>
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	d00a      	beq.n	8008bf4 <sbrk_aligned+0x34>
 8008bde:	1cc4      	adds	r4, r0, #3
 8008be0:	f024 0403 	bic.w	r4, r4, #3
 8008be4:	42a0      	cmp	r0, r4
 8008be6:	d007      	beq.n	8008bf8 <sbrk_aligned+0x38>
 8008be8:	1a21      	subs	r1, r4, r0
 8008bea:	4628      	mov	r0, r5
 8008bec:	f000 fba2 	bl	8009334 <_sbrk_r>
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d101      	bne.n	8008bf8 <sbrk_aligned+0x38>
 8008bf4:	f04f 34ff 	mov.w	r4, #4294967295
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
 8008bfc:	200015bc 	.word	0x200015bc

08008c00 <_malloc_r>:
 8008c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c04:	1ccd      	adds	r5, r1, #3
 8008c06:	f025 0503 	bic.w	r5, r5, #3
 8008c0a:	3508      	adds	r5, #8
 8008c0c:	2d0c      	cmp	r5, #12
 8008c0e:	bf38      	it	cc
 8008c10:	250c      	movcc	r5, #12
 8008c12:	2d00      	cmp	r5, #0
 8008c14:	4607      	mov	r7, r0
 8008c16:	db01      	blt.n	8008c1c <_malloc_r+0x1c>
 8008c18:	42a9      	cmp	r1, r5
 8008c1a:	d905      	bls.n	8008c28 <_malloc_r+0x28>
 8008c1c:	230c      	movs	r3, #12
 8008c1e:	603b      	str	r3, [r7, #0]
 8008c20:	2600      	movs	r6, #0
 8008c22:	4630      	mov	r0, r6
 8008c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008cfc <_malloc_r+0xfc>
 8008c2c:	f000 f868 	bl	8008d00 <__malloc_lock>
 8008c30:	f8d8 3000 	ldr.w	r3, [r8]
 8008c34:	461c      	mov	r4, r3
 8008c36:	bb5c      	cbnz	r4, 8008c90 <_malloc_r+0x90>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	f7ff ffc0 	bl	8008bc0 <sbrk_aligned>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	4604      	mov	r4, r0
 8008c44:	d155      	bne.n	8008cf2 <_malloc_r+0xf2>
 8008c46:	f8d8 4000 	ldr.w	r4, [r8]
 8008c4a:	4626      	mov	r6, r4
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	d145      	bne.n	8008cdc <_malloc_r+0xdc>
 8008c50:	2c00      	cmp	r4, #0
 8008c52:	d048      	beq.n	8008ce6 <_malloc_r+0xe6>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	4631      	mov	r1, r6
 8008c58:	4638      	mov	r0, r7
 8008c5a:	eb04 0903 	add.w	r9, r4, r3
 8008c5e:	f000 fb69 	bl	8009334 <_sbrk_r>
 8008c62:	4581      	cmp	r9, r0
 8008c64:	d13f      	bne.n	8008ce6 <_malloc_r+0xe6>
 8008c66:	6821      	ldr	r1, [r4, #0]
 8008c68:	1a6d      	subs	r5, r5, r1
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	f7ff ffa7 	bl	8008bc0 <sbrk_aligned>
 8008c72:	3001      	adds	r0, #1
 8008c74:	d037      	beq.n	8008ce6 <_malloc_r+0xe6>
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	442b      	add	r3, r5
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d038      	beq.n	8008cf6 <_malloc_r+0xf6>
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	42a2      	cmp	r2, r4
 8008c88:	d12b      	bne.n	8008ce2 <_malloc_r+0xe2>
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	605a      	str	r2, [r3, #4]
 8008c8e:	e00f      	b.n	8008cb0 <_malloc_r+0xb0>
 8008c90:	6822      	ldr	r2, [r4, #0]
 8008c92:	1b52      	subs	r2, r2, r5
 8008c94:	d41f      	bmi.n	8008cd6 <_malloc_r+0xd6>
 8008c96:	2a0b      	cmp	r2, #11
 8008c98:	d917      	bls.n	8008cca <_malloc_r+0xca>
 8008c9a:	1961      	adds	r1, r4, r5
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	6025      	str	r5, [r4, #0]
 8008ca0:	bf18      	it	ne
 8008ca2:	6059      	strne	r1, [r3, #4]
 8008ca4:	6863      	ldr	r3, [r4, #4]
 8008ca6:	bf08      	it	eq
 8008ca8:	f8c8 1000 	streq.w	r1, [r8]
 8008cac:	5162      	str	r2, [r4, r5]
 8008cae:	604b      	str	r3, [r1, #4]
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f104 060b 	add.w	r6, r4, #11
 8008cb6:	f000 f829 	bl	8008d0c <__malloc_unlock>
 8008cba:	f026 0607 	bic.w	r6, r6, #7
 8008cbe:	1d23      	adds	r3, r4, #4
 8008cc0:	1af2      	subs	r2, r6, r3
 8008cc2:	d0ae      	beq.n	8008c22 <_malloc_r+0x22>
 8008cc4:	1b9b      	subs	r3, r3, r6
 8008cc6:	50a3      	str	r3, [r4, r2]
 8008cc8:	e7ab      	b.n	8008c22 <_malloc_r+0x22>
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	6862      	ldr	r2, [r4, #4]
 8008cce:	d1dd      	bne.n	8008c8c <_malloc_r+0x8c>
 8008cd0:	f8c8 2000 	str.w	r2, [r8]
 8008cd4:	e7ec      	b.n	8008cb0 <_malloc_r+0xb0>
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	6864      	ldr	r4, [r4, #4]
 8008cda:	e7ac      	b.n	8008c36 <_malloc_r+0x36>
 8008cdc:	4634      	mov	r4, r6
 8008cde:	6876      	ldr	r6, [r6, #4]
 8008ce0:	e7b4      	b.n	8008c4c <_malloc_r+0x4c>
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	e7cc      	b.n	8008c80 <_malloc_r+0x80>
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	603b      	str	r3, [r7, #0]
 8008cea:	4638      	mov	r0, r7
 8008cec:	f000 f80e 	bl	8008d0c <__malloc_unlock>
 8008cf0:	e797      	b.n	8008c22 <_malloc_r+0x22>
 8008cf2:	6025      	str	r5, [r4, #0]
 8008cf4:	e7dc      	b.n	8008cb0 <_malloc_r+0xb0>
 8008cf6:	605b      	str	r3, [r3, #4]
 8008cf8:	deff      	udf	#255	; 0xff
 8008cfa:	bf00      	nop
 8008cfc:	200015b8 	.word	0x200015b8

08008d00 <__malloc_lock>:
 8008d00:	4801      	ldr	r0, [pc, #4]	; (8008d08 <__malloc_lock+0x8>)
 8008d02:	f000 bb63 	b.w	80093cc <__retarget_lock_acquire_recursive>
 8008d06:	bf00      	nop
 8008d08:	20001700 	.word	0x20001700

08008d0c <__malloc_unlock>:
 8008d0c:	4801      	ldr	r0, [pc, #4]	; (8008d14 <__malloc_unlock+0x8>)
 8008d0e:	f000 bb5e 	b.w	80093ce <__retarget_lock_release_recursive>
 8008d12:	bf00      	nop
 8008d14:	20001700 	.word	0x20001700

08008d18 <std>:
 8008d18:	2300      	movs	r3, #0
 8008d1a:	b510      	push	{r4, lr}
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d26:	6083      	str	r3, [r0, #8]
 8008d28:	8181      	strh	r1, [r0, #12]
 8008d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d2c:	81c2      	strh	r2, [r0, #14]
 8008d2e:	6183      	str	r3, [r0, #24]
 8008d30:	4619      	mov	r1, r3
 8008d32:	2208      	movs	r2, #8
 8008d34:	305c      	adds	r0, #92	; 0x5c
 8008d36:	f000 fa1f 	bl	8009178 <memset>
 8008d3a:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <std+0x38>)
 8008d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <std+0x3c>)
 8008d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d42:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <std+0x40>)
 8008d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d46:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <std+0x44>)
 8008d48:	6224      	str	r4, [r4, #32]
 8008d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d4c:	bd10      	pop	{r4, pc}
 8008d4e:	bf00      	nop
 8008d50:	08008f95 	.word	0x08008f95
 8008d54:	08008fb7 	.word	0x08008fb7
 8008d58:	08008fef 	.word	0x08008fef
 8008d5c:	08009013 	.word	0x08009013

08008d60 <stdio_exit_handler>:
 8008d60:	4a02      	ldr	r2, [pc, #8]	; (8008d6c <stdio_exit_handler+0xc>)
 8008d62:	4903      	ldr	r1, [pc, #12]	; (8008d70 <stdio_exit_handler+0x10>)
 8008d64:	4803      	ldr	r0, [pc, #12]	; (8008d74 <stdio_exit_handler+0x14>)
 8008d66:	f000 b869 	b.w	8008e3c <_fwalk_sglue>
 8008d6a:	bf00      	nop
 8008d6c:	20000044 	.word	0x20000044
 8008d70:	08009e35 	.word	0x08009e35
 8008d74:	20000050 	.word	0x20000050

08008d78 <cleanup_stdio>:
 8008d78:	6841      	ldr	r1, [r0, #4]
 8008d7a:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <cleanup_stdio+0x34>)
 8008d7c:	4299      	cmp	r1, r3
 8008d7e:	b510      	push	{r4, lr}
 8008d80:	4604      	mov	r4, r0
 8008d82:	d001      	beq.n	8008d88 <cleanup_stdio+0x10>
 8008d84:	f001 f856 	bl	8009e34 <_fflush_r>
 8008d88:	68a1      	ldr	r1, [r4, #8]
 8008d8a:	4b09      	ldr	r3, [pc, #36]	; (8008db0 <cleanup_stdio+0x38>)
 8008d8c:	4299      	cmp	r1, r3
 8008d8e:	d002      	beq.n	8008d96 <cleanup_stdio+0x1e>
 8008d90:	4620      	mov	r0, r4
 8008d92:	f001 f84f 	bl	8009e34 <_fflush_r>
 8008d96:	68e1      	ldr	r1, [r4, #12]
 8008d98:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <cleanup_stdio+0x3c>)
 8008d9a:	4299      	cmp	r1, r3
 8008d9c:	d004      	beq.n	8008da8 <cleanup_stdio+0x30>
 8008d9e:	4620      	mov	r0, r4
 8008da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da4:	f001 b846 	b.w	8009e34 <_fflush_r>
 8008da8:	bd10      	pop	{r4, pc}
 8008daa:	bf00      	nop
 8008dac:	200015c0 	.word	0x200015c0
 8008db0:	20001628 	.word	0x20001628
 8008db4:	20001690 	.word	0x20001690

08008db8 <global_stdio_init.part.0>:
 8008db8:	b510      	push	{r4, lr}
 8008dba:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <global_stdio_init.part.0+0x30>)
 8008dbc:	4c0b      	ldr	r4, [pc, #44]	; (8008dec <global_stdio_init.part.0+0x34>)
 8008dbe:	4a0c      	ldr	r2, [pc, #48]	; (8008df0 <global_stdio_init.part.0+0x38>)
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2104      	movs	r1, #4
 8008dc8:	f7ff ffa6 	bl	8008d18 <std>
 8008dcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	2109      	movs	r1, #9
 8008dd4:	f7ff ffa0 	bl	8008d18 <std>
 8008dd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008ddc:	2202      	movs	r2, #2
 8008dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de2:	2112      	movs	r1, #18
 8008de4:	f7ff bf98 	b.w	8008d18 <std>
 8008de8:	200016f8 	.word	0x200016f8
 8008dec:	200015c0 	.word	0x200015c0
 8008df0:	08008d61 	.word	0x08008d61

08008df4 <__sfp_lock_acquire>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__sfp_lock_acquire+0x8>)
 8008df6:	f000 bae9 	b.w	80093cc <__retarget_lock_acquire_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20001701 	.word	0x20001701

08008e00 <__sfp_lock_release>:
 8008e00:	4801      	ldr	r0, [pc, #4]	; (8008e08 <__sfp_lock_release+0x8>)
 8008e02:	f000 bae4 	b.w	80093ce <__retarget_lock_release_recursive>
 8008e06:	bf00      	nop
 8008e08:	20001701 	.word	0x20001701

08008e0c <__sinit>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	4604      	mov	r4, r0
 8008e10:	f7ff fff0 	bl	8008df4 <__sfp_lock_acquire>
 8008e14:	6a23      	ldr	r3, [r4, #32]
 8008e16:	b11b      	cbz	r3, 8008e20 <__sinit+0x14>
 8008e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e1c:	f7ff bff0 	b.w	8008e00 <__sfp_lock_release>
 8008e20:	4b04      	ldr	r3, [pc, #16]	; (8008e34 <__sinit+0x28>)
 8008e22:	6223      	str	r3, [r4, #32]
 8008e24:	4b04      	ldr	r3, [pc, #16]	; (8008e38 <__sinit+0x2c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1f5      	bne.n	8008e18 <__sinit+0xc>
 8008e2c:	f7ff ffc4 	bl	8008db8 <global_stdio_init.part.0>
 8008e30:	e7f2      	b.n	8008e18 <__sinit+0xc>
 8008e32:	bf00      	nop
 8008e34:	08008d79 	.word	0x08008d79
 8008e38:	200016f8 	.word	0x200016f8

08008e3c <_fwalk_sglue>:
 8008e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e40:	4607      	mov	r7, r0
 8008e42:	4688      	mov	r8, r1
 8008e44:	4614      	mov	r4, r2
 8008e46:	2600      	movs	r6, #0
 8008e48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e4c:	f1b9 0901 	subs.w	r9, r9, #1
 8008e50:	d505      	bpl.n	8008e5e <_fwalk_sglue+0x22>
 8008e52:	6824      	ldr	r4, [r4, #0]
 8008e54:	2c00      	cmp	r4, #0
 8008e56:	d1f7      	bne.n	8008e48 <_fwalk_sglue+0xc>
 8008e58:	4630      	mov	r0, r6
 8008e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e5e:	89ab      	ldrh	r3, [r5, #12]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d907      	bls.n	8008e74 <_fwalk_sglue+0x38>
 8008e64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	d003      	beq.n	8008e74 <_fwalk_sglue+0x38>
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4638      	mov	r0, r7
 8008e70:	47c0      	blx	r8
 8008e72:	4306      	orrs	r6, r0
 8008e74:	3568      	adds	r5, #104	; 0x68
 8008e76:	e7e9      	b.n	8008e4c <_fwalk_sglue+0x10>

08008e78 <iprintf>:
 8008e78:	b40f      	push	{r0, r1, r2, r3}
 8008e7a:	b507      	push	{r0, r1, r2, lr}
 8008e7c:	4906      	ldr	r1, [pc, #24]	; (8008e98 <iprintf+0x20>)
 8008e7e:	ab04      	add	r3, sp, #16
 8008e80:	6808      	ldr	r0, [r1, #0]
 8008e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e86:	6881      	ldr	r1, [r0, #8]
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	f000 fca3 	bl	80097d4 <_vfiprintf_r>
 8008e8e:	b003      	add	sp, #12
 8008e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e94:	b004      	add	sp, #16
 8008e96:	4770      	bx	lr
 8008e98:	2000009c 	.word	0x2000009c

08008e9c <_puts_r>:
 8008e9c:	6a03      	ldr	r3, [r0, #32]
 8008e9e:	b570      	push	{r4, r5, r6, lr}
 8008ea0:	6884      	ldr	r4, [r0, #8]
 8008ea2:	4605      	mov	r5, r0
 8008ea4:	460e      	mov	r6, r1
 8008ea6:	b90b      	cbnz	r3, 8008eac <_puts_r+0x10>
 8008ea8:	f7ff ffb0 	bl	8008e0c <__sinit>
 8008eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eae:	07db      	lsls	r3, r3, #31
 8008eb0:	d405      	bmi.n	8008ebe <_puts_r+0x22>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	0598      	lsls	r0, r3, #22
 8008eb6:	d402      	bmi.n	8008ebe <_puts_r+0x22>
 8008eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eba:	f000 fa87 	bl	80093cc <__retarget_lock_acquire_recursive>
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	0719      	lsls	r1, r3, #28
 8008ec2:	d513      	bpl.n	8008eec <_puts_r+0x50>
 8008ec4:	6923      	ldr	r3, [r4, #16]
 8008ec6:	b18b      	cbz	r3, 8008eec <_puts_r+0x50>
 8008ec8:	3e01      	subs	r6, #1
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	60a3      	str	r3, [r4, #8]
 8008ed4:	b9e9      	cbnz	r1, 8008f12 <_puts_r+0x76>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	da2e      	bge.n	8008f38 <_puts_r+0x9c>
 8008eda:	4622      	mov	r2, r4
 8008edc:	210a      	movs	r1, #10
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f000 f89b 	bl	800901a <__swbuf_r>
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d007      	beq.n	8008ef8 <_puts_r+0x5c>
 8008ee8:	250a      	movs	r5, #10
 8008eea:	e007      	b.n	8008efc <_puts_r+0x60>
 8008eec:	4621      	mov	r1, r4
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 f8d0 	bl	8009094 <__swsetup_r>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d0e7      	beq.n	8008ec8 <_puts_r+0x2c>
 8008ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8008efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008efe:	07da      	lsls	r2, r3, #31
 8008f00:	d405      	bmi.n	8008f0e <_puts_r+0x72>
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	059b      	lsls	r3, r3, #22
 8008f06:	d402      	bmi.n	8008f0e <_puts_r+0x72>
 8008f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f0a:	f000 fa60 	bl	80093ce <__retarget_lock_release_recursive>
 8008f0e:	4628      	mov	r0, r5
 8008f10:	bd70      	pop	{r4, r5, r6, pc}
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	da04      	bge.n	8008f20 <_puts_r+0x84>
 8008f16:	69a2      	ldr	r2, [r4, #24]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	dc06      	bgt.n	8008f2a <_puts_r+0x8e>
 8008f1c:	290a      	cmp	r1, #10
 8008f1e:	d004      	beq.n	8008f2a <_puts_r+0x8e>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	6022      	str	r2, [r4, #0]
 8008f26:	7019      	strb	r1, [r3, #0]
 8008f28:	e7cf      	b.n	8008eca <_puts_r+0x2e>
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f000 f874 	bl	800901a <__swbuf_r>
 8008f32:	3001      	adds	r0, #1
 8008f34:	d1c9      	bne.n	8008eca <_puts_r+0x2e>
 8008f36:	e7df      	b.n	8008ef8 <_puts_r+0x5c>
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	250a      	movs	r5, #10
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	6022      	str	r2, [r4, #0]
 8008f40:	701d      	strb	r5, [r3, #0]
 8008f42:	e7db      	b.n	8008efc <_puts_r+0x60>

08008f44 <puts>:
 8008f44:	4b02      	ldr	r3, [pc, #8]	; (8008f50 <puts+0xc>)
 8008f46:	4601      	mov	r1, r0
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	f7ff bfa7 	b.w	8008e9c <_puts_r>
 8008f4e:	bf00      	nop
 8008f50:	2000009c 	.word	0x2000009c

08008f54 <siprintf>:
 8008f54:	b40e      	push	{r1, r2, r3}
 8008f56:	b500      	push	{lr}
 8008f58:	b09c      	sub	sp, #112	; 0x70
 8008f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8008f5c:	9002      	str	r0, [sp, #8]
 8008f5e:	9006      	str	r0, [sp, #24]
 8008f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f64:	4809      	ldr	r0, [pc, #36]	; (8008f8c <siprintf+0x38>)
 8008f66:	9107      	str	r1, [sp, #28]
 8008f68:	9104      	str	r1, [sp, #16]
 8008f6a:	4909      	ldr	r1, [pc, #36]	; (8008f90 <siprintf+0x3c>)
 8008f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f70:	9105      	str	r1, [sp, #20]
 8008f72:	6800      	ldr	r0, [r0, #0]
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	a902      	add	r1, sp, #8
 8008f78:	f000 fb04 	bl	8009584 <_svfiprintf_r>
 8008f7c:	9b02      	ldr	r3, [sp, #8]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
 8008f82:	b01c      	add	sp, #112	; 0x70
 8008f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f88:	b003      	add	sp, #12
 8008f8a:	4770      	bx	lr
 8008f8c:	2000009c 	.word	0x2000009c
 8008f90:	ffff0208 	.word	0xffff0208

08008f94 <__sread>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	460c      	mov	r4, r1
 8008f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9c:	f000 f9b8 	bl	8009310 <_read_r>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	bfab      	itete	ge
 8008fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8008fa8:	181b      	addge	r3, r3, r0
 8008faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fae:	bfac      	ite	ge
 8008fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fb2:	81a3      	strhlt	r3, [r4, #12]
 8008fb4:	bd10      	pop	{r4, pc}

08008fb6 <__swrite>:
 8008fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fba:	461f      	mov	r7, r3
 8008fbc:	898b      	ldrh	r3, [r1, #12]
 8008fbe:	05db      	lsls	r3, r3, #23
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	4616      	mov	r6, r2
 8008fc6:	d505      	bpl.n	8008fd4 <__swrite+0x1e>
 8008fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fcc:	2302      	movs	r3, #2
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f000 f98c 	bl	80092ec <_lseek_r>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fea:	f000 b9b3 	b.w	8009354 <_write_r>

08008fee <__sseek>:
 8008fee:	b510      	push	{r4, lr}
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff6:	f000 f979 	bl	80092ec <_lseek_r>
 8008ffa:	1c43      	adds	r3, r0, #1
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	bf15      	itete	ne
 8009000:	6560      	strne	r0, [r4, #84]	; 0x54
 8009002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800900a:	81a3      	strheq	r3, [r4, #12]
 800900c:	bf18      	it	ne
 800900e:	81a3      	strhne	r3, [r4, #12]
 8009010:	bd10      	pop	{r4, pc}

08009012 <__sclose>:
 8009012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009016:	f000 b959 	b.w	80092cc <_close_r>

0800901a <__swbuf_r>:
 800901a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901c:	460e      	mov	r6, r1
 800901e:	4614      	mov	r4, r2
 8009020:	4605      	mov	r5, r0
 8009022:	b118      	cbz	r0, 800902c <__swbuf_r+0x12>
 8009024:	6a03      	ldr	r3, [r0, #32]
 8009026:	b90b      	cbnz	r3, 800902c <__swbuf_r+0x12>
 8009028:	f7ff fef0 	bl	8008e0c <__sinit>
 800902c:	69a3      	ldr	r3, [r4, #24]
 800902e:	60a3      	str	r3, [r4, #8]
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	071a      	lsls	r2, r3, #28
 8009034:	d525      	bpl.n	8009082 <__swbuf_r+0x68>
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	b31b      	cbz	r3, 8009082 <__swbuf_r+0x68>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	6922      	ldr	r2, [r4, #16]
 800903e:	1a98      	subs	r0, r3, r2
 8009040:	6963      	ldr	r3, [r4, #20]
 8009042:	b2f6      	uxtb	r6, r6
 8009044:	4283      	cmp	r3, r0
 8009046:	4637      	mov	r7, r6
 8009048:	dc04      	bgt.n	8009054 <__swbuf_r+0x3a>
 800904a:	4621      	mov	r1, r4
 800904c:	4628      	mov	r0, r5
 800904e:	f000 fef1 	bl	8009e34 <_fflush_r>
 8009052:	b9e0      	cbnz	r0, 800908e <__swbuf_r+0x74>
 8009054:	68a3      	ldr	r3, [r4, #8]
 8009056:	3b01      	subs	r3, #1
 8009058:	60a3      	str	r3, [r4, #8]
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	6022      	str	r2, [r4, #0]
 8009060:	701e      	strb	r6, [r3, #0]
 8009062:	6962      	ldr	r2, [r4, #20]
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	429a      	cmp	r2, r3
 8009068:	d004      	beq.n	8009074 <__swbuf_r+0x5a>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	07db      	lsls	r3, r3, #31
 800906e:	d506      	bpl.n	800907e <__swbuf_r+0x64>
 8009070:	2e0a      	cmp	r6, #10
 8009072:	d104      	bne.n	800907e <__swbuf_r+0x64>
 8009074:	4621      	mov	r1, r4
 8009076:	4628      	mov	r0, r5
 8009078:	f000 fedc 	bl	8009e34 <_fflush_r>
 800907c:	b938      	cbnz	r0, 800908e <__swbuf_r+0x74>
 800907e:	4638      	mov	r0, r7
 8009080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009082:	4621      	mov	r1, r4
 8009084:	4628      	mov	r0, r5
 8009086:	f000 f805 	bl	8009094 <__swsetup_r>
 800908a:	2800      	cmp	r0, #0
 800908c:	d0d5      	beq.n	800903a <__swbuf_r+0x20>
 800908e:	f04f 37ff 	mov.w	r7, #4294967295
 8009092:	e7f4      	b.n	800907e <__swbuf_r+0x64>

08009094 <__swsetup_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4b2a      	ldr	r3, [pc, #168]	; (8009140 <__swsetup_r+0xac>)
 8009098:	4605      	mov	r5, r0
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	460c      	mov	r4, r1
 800909e:	b118      	cbz	r0, 80090a8 <__swsetup_r+0x14>
 80090a0:	6a03      	ldr	r3, [r0, #32]
 80090a2:	b90b      	cbnz	r3, 80090a8 <__swsetup_r+0x14>
 80090a4:	f7ff feb2 	bl	8008e0c <__sinit>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090ae:	0718      	lsls	r0, r3, #28
 80090b0:	d422      	bmi.n	80090f8 <__swsetup_r+0x64>
 80090b2:	06d9      	lsls	r1, r3, #27
 80090b4:	d407      	bmi.n	80090c6 <__swsetup_r+0x32>
 80090b6:	2309      	movs	r3, #9
 80090b8:	602b      	str	r3, [r5, #0]
 80090ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295
 80090c4:	e034      	b.n	8009130 <__swsetup_r+0x9c>
 80090c6:	0758      	lsls	r0, r3, #29
 80090c8:	d512      	bpl.n	80090f0 <__swsetup_r+0x5c>
 80090ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090cc:	b141      	cbz	r1, 80090e0 <__swsetup_r+0x4c>
 80090ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d2:	4299      	cmp	r1, r3
 80090d4:	d002      	beq.n	80090dc <__swsetup_r+0x48>
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 f9ae 	bl	8009438 <_free_r>
 80090dc:	2300      	movs	r3, #0
 80090de:	6363      	str	r3, [r4, #52]	; 0x34
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	2300      	movs	r3, #0
 80090ea:	6063      	str	r3, [r4, #4]
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	6023      	str	r3, [r4, #0]
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	f043 0308 	orr.w	r3, r3, #8
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	b94b      	cbnz	r3, 8009110 <__swsetup_r+0x7c>
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009106:	d003      	beq.n	8009110 <__swsetup_r+0x7c>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 fef2 	bl	8009ef4 <__smakebuf_r>
 8009110:	89a0      	ldrh	r0, [r4, #12]
 8009112:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009116:	f010 0301 	ands.w	r3, r0, #1
 800911a:	d00a      	beq.n	8009132 <__swsetup_r+0x9e>
 800911c:	2300      	movs	r3, #0
 800911e:	60a3      	str	r3, [r4, #8]
 8009120:	6963      	ldr	r3, [r4, #20]
 8009122:	425b      	negs	r3, r3
 8009124:	61a3      	str	r3, [r4, #24]
 8009126:	6923      	ldr	r3, [r4, #16]
 8009128:	b943      	cbnz	r3, 800913c <__swsetup_r+0xa8>
 800912a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800912e:	d1c4      	bne.n	80090ba <__swsetup_r+0x26>
 8009130:	bd38      	pop	{r3, r4, r5, pc}
 8009132:	0781      	lsls	r1, r0, #30
 8009134:	bf58      	it	pl
 8009136:	6963      	ldrpl	r3, [r4, #20]
 8009138:	60a3      	str	r3, [r4, #8]
 800913a:	e7f4      	b.n	8009126 <__swsetup_r+0x92>
 800913c:	2000      	movs	r0, #0
 800913e:	e7f7      	b.n	8009130 <__swsetup_r+0x9c>
 8009140:	2000009c 	.word	0x2000009c

08009144 <memmove>:
 8009144:	4288      	cmp	r0, r1
 8009146:	b510      	push	{r4, lr}
 8009148:	eb01 0402 	add.w	r4, r1, r2
 800914c:	d902      	bls.n	8009154 <memmove+0x10>
 800914e:	4284      	cmp	r4, r0
 8009150:	4623      	mov	r3, r4
 8009152:	d807      	bhi.n	8009164 <memmove+0x20>
 8009154:	1e43      	subs	r3, r0, #1
 8009156:	42a1      	cmp	r1, r4
 8009158:	d008      	beq.n	800916c <memmove+0x28>
 800915a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800915e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009162:	e7f8      	b.n	8009156 <memmove+0x12>
 8009164:	4402      	add	r2, r0
 8009166:	4601      	mov	r1, r0
 8009168:	428a      	cmp	r2, r1
 800916a:	d100      	bne.n	800916e <memmove+0x2a>
 800916c:	bd10      	pop	{r4, pc}
 800916e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009176:	e7f7      	b.n	8009168 <memmove+0x24>

08009178 <memset>:
 8009178:	4402      	add	r2, r0
 800917a:	4603      	mov	r3, r0
 800917c:	4293      	cmp	r3, r2
 800917e:	d100      	bne.n	8009182 <memset+0xa>
 8009180:	4770      	bx	lr
 8009182:	f803 1b01 	strb.w	r1, [r3], #1
 8009186:	e7f9      	b.n	800917c <memset+0x4>

08009188 <strcat>:
 8009188:	b510      	push	{r4, lr}
 800918a:	4602      	mov	r2, r0
 800918c:	7814      	ldrb	r4, [r2, #0]
 800918e:	4613      	mov	r3, r2
 8009190:	3201      	adds	r2, #1
 8009192:	2c00      	cmp	r4, #0
 8009194:	d1fa      	bne.n	800918c <strcat+0x4>
 8009196:	3b01      	subs	r3, #1
 8009198:	f811 2b01 	ldrb.w	r2, [r1], #1
 800919c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091a0:	2a00      	cmp	r2, #0
 80091a2:	d1f9      	bne.n	8009198 <strcat+0x10>
 80091a4:	bd10      	pop	{r4, pc}

080091a6 <strchr>:
 80091a6:	b2c9      	uxtb	r1, r1
 80091a8:	4603      	mov	r3, r0
 80091aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ae:	b11a      	cbz	r2, 80091b8 <strchr+0x12>
 80091b0:	428a      	cmp	r2, r1
 80091b2:	d1f9      	bne.n	80091a8 <strchr+0x2>
 80091b4:	4618      	mov	r0, r3
 80091b6:	4770      	bx	lr
 80091b8:	2900      	cmp	r1, #0
 80091ba:	bf18      	it	ne
 80091bc:	2300      	movne	r3, #0
 80091be:	e7f9      	b.n	80091b4 <strchr+0xe>

080091c0 <strncpy>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	3901      	subs	r1, #1
 80091c4:	4603      	mov	r3, r0
 80091c6:	b132      	cbz	r2, 80091d6 <strncpy+0x16>
 80091c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80091cc:	f803 4b01 	strb.w	r4, [r3], #1
 80091d0:	3a01      	subs	r2, #1
 80091d2:	2c00      	cmp	r4, #0
 80091d4:	d1f7      	bne.n	80091c6 <strncpy+0x6>
 80091d6:	441a      	add	r2, r3
 80091d8:	2100      	movs	r1, #0
 80091da:	4293      	cmp	r3, r2
 80091dc:	d100      	bne.n	80091e0 <strncpy+0x20>
 80091de:	bd10      	pop	{r4, pc}
 80091e0:	f803 1b01 	strb.w	r1, [r3], #1
 80091e4:	e7f9      	b.n	80091da <strncpy+0x1a>
	...

080091e8 <strtok>:
 80091e8:	4b16      	ldr	r3, [pc, #88]	; (8009244 <strtok+0x5c>)
 80091ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091ec:	681e      	ldr	r6, [r3, #0]
 80091ee:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80091f0:	4605      	mov	r5, r0
 80091f2:	b9fc      	cbnz	r4, 8009234 <strtok+0x4c>
 80091f4:	2050      	movs	r0, #80	; 0x50
 80091f6:	9101      	str	r1, [sp, #4]
 80091f8:	f7ff fcda 	bl	8008bb0 <malloc>
 80091fc:	9901      	ldr	r1, [sp, #4]
 80091fe:	6470      	str	r0, [r6, #68]	; 0x44
 8009200:	4602      	mov	r2, r0
 8009202:	b920      	cbnz	r0, 800920e <strtok+0x26>
 8009204:	4b10      	ldr	r3, [pc, #64]	; (8009248 <strtok+0x60>)
 8009206:	4811      	ldr	r0, [pc, #68]	; (800924c <strtok+0x64>)
 8009208:	215b      	movs	r1, #91	; 0x5b
 800920a:	f000 f8f7 	bl	80093fc <__assert_func>
 800920e:	e9c0 4400 	strd	r4, r4, [r0]
 8009212:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009216:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800921a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800921e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009222:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009226:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800922a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800922e:	6184      	str	r4, [r0, #24]
 8009230:	7704      	strb	r4, [r0, #28]
 8009232:	6244      	str	r4, [r0, #36]	; 0x24
 8009234:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009236:	2301      	movs	r3, #1
 8009238:	4628      	mov	r0, r5
 800923a:	b002      	add	sp, #8
 800923c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009240:	f000 b806 	b.w	8009250 <__strtok_r>
 8009244:	2000009c 	.word	0x2000009c
 8009248:	0801943a 	.word	0x0801943a
 800924c:	08019451 	.word	0x08019451

08009250 <__strtok_r>:
 8009250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009252:	b908      	cbnz	r0, 8009258 <__strtok_r+0x8>
 8009254:	6810      	ldr	r0, [r2, #0]
 8009256:	b188      	cbz	r0, 800927c <__strtok_r+0x2c>
 8009258:	4604      	mov	r4, r0
 800925a:	4620      	mov	r0, r4
 800925c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009260:	460f      	mov	r7, r1
 8009262:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009266:	b91e      	cbnz	r6, 8009270 <__strtok_r+0x20>
 8009268:	b965      	cbnz	r5, 8009284 <__strtok_r+0x34>
 800926a:	6015      	str	r5, [r2, #0]
 800926c:	4628      	mov	r0, r5
 800926e:	e005      	b.n	800927c <__strtok_r+0x2c>
 8009270:	42b5      	cmp	r5, r6
 8009272:	d1f6      	bne.n	8009262 <__strtok_r+0x12>
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1f0      	bne.n	800925a <__strtok_r+0xa>
 8009278:	6014      	str	r4, [r2, #0]
 800927a:	7003      	strb	r3, [r0, #0]
 800927c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800927e:	461c      	mov	r4, r3
 8009280:	e00c      	b.n	800929c <__strtok_r+0x4c>
 8009282:	b915      	cbnz	r5, 800928a <__strtok_r+0x3a>
 8009284:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009288:	460e      	mov	r6, r1
 800928a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800928e:	42ab      	cmp	r3, r5
 8009290:	d1f7      	bne.n	8009282 <__strtok_r+0x32>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0f3      	beq.n	800927e <__strtok_r+0x2e>
 8009296:	2300      	movs	r3, #0
 8009298:	f804 3c01 	strb.w	r3, [r4, #-1]
 800929c:	6014      	str	r4, [r2, #0]
 800929e:	e7ed      	b.n	800927c <__strtok_r+0x2c>

080092a0 <strstr>:
 80092a0:	780a      	ldrb	r2, [r1, #0]
 80092a2:	b570      	push	{r4, r5, r6, lr}
 80092a4:	b96a      	cbnz	r2, 80092c2 <strstr+0x22>
 80092a6:	bd70      	pop	{r4, r5, r6, pc}
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d109      	bne.n	80092c0 <strstr+0x20>
 80092ac:	460c      	mov	r4, r1
 80092ae:	4605      	mov	r5, r0
 80092b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d0f6      	beq.n	80092a6 <strstr+0x6>
 80092b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80092bc:	429e      	cmp	r6, r3
 80092be:	d0f7      	beq.n	80092b0 <strstr+0x10>
 80092c0:	3001      	adds	r0, #1
 80092c2:	7803      	ldrb	r3, [r0, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1ef      	bne.n	80092a8 <strstr+0x8>
 80092c8:	4618      	mov	r0, r3
 80092ca:	e7ec      	b.n	80092a6 <strstr+0x6>

080092cc <_close_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4d06      	ldr	r5, [pc, #24]	; (80092e8 <_close_r+0x1c>)
 80092d0:	2300      	movs	r3, #0
 80092d2:	4604      	mov	r4, r0
 80092d4:	4608      	mov	r0, r1
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	f7f8 f98b 	bl	80015f2 <_close>
 80092dc:	1c43      	adds	r3, r0, #1
 80092de:	d102      	bne.n	80092e6 <_close_r+0x1a>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	b103      	cbz	r3, 80092e6 <_close_r+0x1a>
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	bd38      	pop	{r3, r4, r5, pc}
 80092e8:	200016fc 	.word	0x200016fc

080092ec <_lseek_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d07      	ldr	r5, [pc, #28]	; (800930c <_lseek_r+0x20>)
 80092f0:	4604      	mov	r4, r0
 80092f2:	4608      	mov	r0, r1
 80092f4:	4611      	mov	r1, r2
 80092f6:	2200      	movs	r2, #0
 80092f8:	602a      	str	r2, [r5, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	f7f8 f9a0 	bl	8001640 <_lseek>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d102      	bne.n	800930a <_lseek_r+0x1e>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b103      	cbz	r3, 800930a <_lseek_r+0x1e>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	200016fc 	.word	0x200016fc

08009310 <_read_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4d07      	ldr	r5, [pc, #28]	; (8009330 <_read_r+0x20>)
 8009314:	4604      	mov	r4, r0
 8009316:	4608      	mov	r0, r1
 8009318:	4611      	mov	r1, r2
 800931a:	2200      	movs	r2, #0
 800931c:	602a      	str	r2, [r5, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	f7f8 f92e 	bl	8001580 <_read>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_read_r+0x1e>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_read_r+0x1e>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	200016fc 	.word	0x200016fc

08009334 <_sbrk_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4d06      	ldr	r5, [pc, #24]	; (8009350 <_sbrk_r+0x1c>)
 8009338:	2300      	movs	r3, #0
 800933a:	4604      	mov	r4, r0
 800933c:	4608      	mov	r0, r1
 800933e:	602b      	str	r3, [r5, #0]
 8009340:	f7f8 f98c 	bl	800165c <_sbrk>
 8009344:	1c43      	adds	r3, r0, #1
 8009346:	d102      	bne.n	800934e <_sbrk_r+0x1a>
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	b103      	cbz	r3, 800934e <_sbrk_r+0x1a>
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	200016fc 	.word	0x200016fc

08009354 <_write_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4d07      	ldr	r5, [pc, #28]	; (8009374 <_write_r+0x20>)
 8009358:	4604      	mov	r4, r0
 800935a:	4608      	mov	r0, r1
 800935c:	4611      	mov	r1, r2
 800935e:	2200      	movs	r2, #0
 8009360:	602a      	str	r2, [r5, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	f7f8 f929 	bl	80015ba <_write>
 8009368:	1c43      	adds	r3, r0, #1
 800936a:	d102      	bne.n	8009372 <_write_r+0x1e>
 800936c:	682b      	ldr	r3, [r5, #0]
 800936e:	b103      	cbz	r3, 8009372 <_write_r+0x1e>
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	bd38      	pop	{r3, r4, r5, pc}
 8009374:	200016fc 	.word	0x200016fc

08009378 <__errno>:
 8009378:	4b01      	ldr	r3, [pc, #4]	; (8009380 <__errno+0x8>)
 800937a:	6818      	ldr	r0, [r3, #0]
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	2000009c 	.word	0x2000009c

08009384 <__libc_init_array>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	4d0d      	ldr	r5, [pc, #52]	; (80093bc <__libc_init_array+0x38>)
 8009388:	4c0d      	ldr	r4, [pc, #52]	; (80093c0 <__libc_init_array+0x3c>)
 800938a:	1b64      	subs	r4, r4, r5
 800938c:	10a4      	asrs	r4, r4, #2
 800938e:	2600      	movs	r6, #0
 8009390:	42a6      	cmp	r6, r4
 8009392:	d109      	bne.n	80093a8 <__libc_init_array+0x24>
 8009394:	4d0b      	ldr	r5, [pc, #44]	; (80093c4 <__libc_init_array+0x40>)
 8009396:	4c0c      	ldr	r4, [pc, #48]	; (80093c8 <__libc_init_array+0x44>)
 8009398:	f000 fe8c 	bl	800a0b4 <_init>
 800939c:	1b64      	subs	r4, r4, r5
 800939e:	10a4      	asrs	r4, r4, #2
 80093a0:	2600      	movs	r6, #0
 80093a2:	42a6      	cmp	r6, r4
 80093a4:	d105      	bne.n	80093b2 <__libc_init_array+0x2e>
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
 80093a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ac:	4798      	blx	r3
 80093ae:	3601      	adds	r6, #1
 80093b0:	e7ee      	b.n	8009390 <__libc_init_array+0xc>
 80093b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b6:	4798      	blx	r3
 80093b8:	3601      	adds	r6, #1
 80093ba:	e7f2      	b.n	80093a2 <__libc_init_array+0x1e>
 80093bc:	08019524 	.word	0x08019524
 80093c0:	08019524 	.word	0x08019524
 80093c4:	08019524 	.word	0x08019524
 80093c8:	08019528 	.word	0x08019528

080093cc <__retarget_lock_acquire_recursive>:
 80093cc:	4770      	bx	lr

080093ce <__retarget_lock_release_recursive>:
 80093ce:	4770      	bx	lr

080093d0 <strcpy>:
 80093d0:	4603      	mov	r3, r0
 80093d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093d6:	f803 2b01 	strb.w	r2, [r3], #1
 80093da:	2a00      	cmp	r2, #0
 80093dc:	d1f9      	bne.n	80093d2 <strcpy+0x2>
 80093de:	4770      	bx	lr

080093e0 <memcpy>:
 80093e0:	440a      	add	r2, r1
 80093e2:	4291      	cmp	r1, r2
 80093e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093e8:	d100      	bne.n	80093ec <memcpy+0xc>
 80093ea:	4770      	bx	lr
 80093ec:	b510      	push	{r4, lr}
 80093ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093f6:	4291      	cmp	r1, r2
 80093f8:	d1f9      	bne.n	80093ee <memcpy+0xe>
 80093fa:	bd10      	pop	{r4, pc}

080093fc <__assert_func>:
 80093fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093fe:	4614      	mov	r4, r2
 8009400:	461a      	mov	r2, r3
 8009402:	4b09      	ldr	r3, [pc, #36]	; (8009428 <__assert_func+0x2c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4605      	mov	r5, r0
 8009408:	68d8      	ldr	r0, [r3, #12]
 800940a:	b14c      	cbz	r4, 8009420 <__assert_func+0x24>
 800940c:	4b07      	ldr	r3, [pc, #28]	; (800942c <__assert_func+0x30>)
 800940e:	9100      	str	r1, [sp, #0]
 8009410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009414:	4906      	ldr	r1, [pc, #24]	; (8009430 <__assert_func+0x34>)
 8009416:	462b      	mov	r3, r5
 8009418:	f000 fd34 	bl	8009e84 <fiprintf>
 800941c:	f000 fdc8 	bl	8009fb0 <abort>
 8009420:	4b04      	ldr	r3, [pc, #16]	; (8009434 <__assert_func+0x38>)
 8009422:	461c      	mov	r4, r3
 8009424:	e7f3      	b.n	800940e <__assert_func+0x12>
 8009426:	bf00      	nop
 8009428:	2000009c 	.word	0x2000009c
 800942c:	080194ab 	.word	0x080194ab
 8009430:	080194b8 	.word	0x080194b8
 8009434:	080194e6 	.word	0x080194e6

08009438 <_free_r>:
 8009438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800943a:	2900      	cmp	r1, #0
 800943c:	d044      	beq.n	80094c8 <_free_r+0x90>
 800943e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009442:	9001      	str	r0, [sp, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	f1a1 0404 	sub.w	r4, r1, #4
 800944a:	bfb8      	it	lt
 800944c:	18e4      	addlt	r4, r4, r3
 800944e:	f7ff fc57 	bl	8008d00 <__malloc_lock>
 8009452:	4a1e      	ldr	r2, [pc, #120]	; (80094cc <_free_r+0x94>)
 8009454:	9801      	ldr	r0, [sp, #4]
 8009456:	6813      	ldr	r3, [r2, #0]
 8009458:	b933      	cbnz	r3, 8009468 <_free_r+0x30>
 800945a:	6063      	str	r3, [r4, #4]
 800945c:	6014      	str	r4, [r2, #0]
 800945e:	b003      	add	sp, #12
 8009460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009464:	f7ff bc52 	b.w	8008d0c <__malloc_unlock>
 8009468:	42a3      	cmp	r3, r4
 800946a:	d908      	bls.n	800947e <_free_r+0x46>
 800946c:	6825      	ldr	r5, [r4, #0]
 800946e:	1961      	adds	r1, r4, r5
 8009470:	428b      	cmp	r3, r1
 8009472:	bf01      	itttt	eq
 8009474:	6819      	ldreq	r1, [r3, #0]
 8009476:	685b      	ldreq	r3, [r3, #4]
 8009478:	1949      	addeq	r1, r1, r5
 800947a:	6021      	streq	r1, [r4, #0]
 800947c:	e7ed      	b.n	800945a <_free_r+0x22>
 800947e:	461a      	mov	r2, r3
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	b10b      	cbz	r3, 8009488 <_free_r+0x50>
 8009484:	42a3      	cmp	r3, r4
 8009486:	d9fa      	bls.n	800947e <_free_r+0x46>
 8009488:	6811      	ldr	r1, [r2, #0]
 800948a:	1855      	adds	r5, r2, r1
 800948c:	42a5      	cmp	r5, r4
 800948e:	d10b      	bne.n	80094a8 <_free_r+0x70>
 8009490:	6824      	ldr	r4, [r4, #0]
 8009492:	4421      	add	r1, r4
 8009494:	1854      	adds	r4, r2, r1
 8009496:	42a3      	cmp	r3, r4
 8009498:	6011      	str	r1, [r2, #0]
 800949a:	d1e0      	bne.n	800945e <_free_r+0x26>
 800949c:	681c      	ldr	r4, [r3, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	6053      	str	r3, [r2, #4]
 80094a2:	440c      	add	r4, r1
 80094a4:	6014      	str	r4, [r2, #0]
 80094a6:	e7da      	b.n	800945e <_free_r+0x26>
 80094a8:	d902      	bls.n	80094b0 <_free_r+0x78>
 80094aa:	230c      	movs	r3, #12
 80094ac:	6003      	str	r3, [r0, #0]
 80094ae:	e7d6      	b.n	800945e <_free_r+0x26>
 80094b0:	6825      	ldr	r5, [r4, #0]
 80094b2:	1961      	adds	r1, r4, r5
 80094b4:	428b      	cmp	r3, r1
 80094b6:	bf04      	itt	eq
 80094b8:	6819      	ldreq	r1, [r3, #0]
 80094ba:	685b      	ldreq	r3, [r3, #4]
 80094bc:	6063      	str	r3, [r4, #4]
 80094be:	bf04      	itt	eq
 80094c0:	1949      	addeq	r1, r1, r5
 80094c2:	6021      	streq	r1, [r4, #0]
 80094c4:	6054      	str	r4, [r2, #4]
 80094c6:	e7ca      	b.n	800945e <_free_r+0x26>
 80094c8:	b003      	add	sp, #12
 80094ca:	bd30      	pop	{r4, r5, pc}
 80094cc:	200015b8 	.word	0x200015b8

080094d0 <__ssputs_r>:
 80094d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d4:	688e      	ldr	r6, [r1, #8]
 80094d6:	461f      	mov	r7, r3
 80094d8:	42be      	cmp	r6, r7
 80094da:	680b      	ldr	r3, [r1, #0]
 80094dc:	4682      	mov	sl, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	4690      	mov	r8, r2
 80094e2:	d82c      	bhi.n	800953e <__ssputs_r+0x6e>
 80094e4:	898a      	ldrh	r2, [r1, #12]
 80094e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094ea:	d026      	beq.n	800953a <__ssputs_r+0x6a>
 80094ec:	6965      	ldr	r5, [r4, #20]
 80094ee:	6909      	ldr	r1, [r1, #16]
 80094f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094f4:	eba3 0901 	sub.w	r9, r3, r1
 80094f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094fc:	1c7b      	adds	r3, r7, #1
 80094fe:	444b      	add	r3, r9
 8009500:	106d      	asrs	r5, r5, #1
 8009502:	429d      	cmp	r5, r3
 8009504:	bf38      	it	cc
 8009506:	461d      	movcc	r5, r3
 8009508:	0553      	lsls	r3, r2, #21
 800950a:	d527      	bpl.n	800955c <__ssputs_r+0x8c>
 800950c:	4629      	mov	r1, r5
 800950e:	f7ff fb77 	bl	8008c00 <_malloc_r>
 8009512:	4606      	mov	r6, r0
 8009514:	b360      	cbz	r0, 8009570 <__ssputs_r+0xa0>
 8009516:	6921      	ldr	r1, [r4, #16]
 8009518:	464a      	mov	r2, r9
 800951a:	f7ff ff61 	bl	80093e0 <memcpy>
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	6126      	str	r6, [r4, #16]
 800952c:	6165      	str	r5, [r4, #20]
 800952e:	444e      	add	r6, r9
 8009530:	eba5 0509 	sub.w	r5, r5, r9
 8009534:	6026      	str	r6, [r4, #0]
 8009536:	60a5      	str	r5, [r4, #8]
 8009538:	463e      	mov	r6, r7
 800953a:	42be      	cmp	r6, r7
 800953c:	d900      	bls.n	8009540 <__ssputs_r+0x70>
 800953e:	463e      	mov	r6, r7
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	4632      	mov	r2, r6
 8009544:	4641      	mov	r1, r8
 8009546:	f7ff fdfd 	bl	8009144 <memmove>
 800954a:	68a3      	ldr	r3, [r4, #8]
 800954c:	1b9b      	subs	r3, r3, r6
 800954e:	60a3      	str	r3, [r4, #8]
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	4433      	add	r3, r6
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	2000      	movs	r0, #0
 8009558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955c:	462a      	mov	r2, r5
 800955e:	f000 fd2e 	bl	8009fbe <_realloc_r>
 8009562:	4606      	mov	r6, r0
 8009564:	2800      	cmp	r0, #0
 8009566:	d1e0      	bne.n	800952a <__ssputs_r+0x5a>
 8009568:	6921      	ldr	r1, [r4, #16]
 800956a:	4650      	mov	r0, sl
 800956c:	f7ff ff64 	bl	8009438 <_free_r>
 8009570:	230c      	movs	r3, #12
 8009572:	f8ca 3000 	str.w	r3, [sl]
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800957c:	81a3      	strh	r3, [r4, #12]
 800957e:	f04f 30ff 	mov.w	r0, #4294967295
 8009582:	e7e9      	b.n	8009558 <__ssputs_r+0x88>

08009584 <_svfiprintf_r>:
 8009584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	4698      	mov	r8, r3
 800958a:	898b      	ldrh	r3, [r1, #12]
 800958c:	061b      	lsls	r3, r3, #24
 800958e:	b09d      	sub	sp, #116	; 0x74
 8009590:	4607      	mov	r7, r0
 8009592:	460d      	mov	r5, r1
 8009594:	4614      	mov	r4, r2
 8009596:	d50e      	bpl.n	80095b6 <_svfiprintf_r+0x32>
 8009598:	690b      	ldr	r3, [r1, #16]
 800959a:	b963      	cbnz	r3, 80095b6 <_svfiprintf_r+0x32>
 800959c:	2140      	movs	r1, #64	; 0x40
 800959e:	f7ff fb2f 	bl	8008c00 <_malloc_r>
 80095a2:	6028      	str	r0, [r5, #0]
 80095a4:	6128      	str	r0, [r5, #16]
 80095a6:	b920      	cbnz	r0, 80095b2 <_svfiprintf_r+0x2e>
 80095a8:	230c      	movs	r3, #12
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	f04f 30ff 	mov.w	r0, #4294967295
 80095b0:	e0d0      	b.n	8009754 <_svfiprintf_r+0x1d0>
 80095b2:	2340      	movs	r3, #64	; 0x40
 80095b4:	616b      	str	r3, [r5, #20]
 80095b6:	2300      	movs	r3, #0
 80095b8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ba:	2320      	movs	r3, #32
 80095bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095c4:	2330      	movs	r3, #48	; 0x30
 80095c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800976c <_svfiprintf_r+0x1e8>
 80095ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ce:	f04f 0901 	mov.w	r9, #1
 80095d2:	4623      	mov	r3, r4
 80095d4:	469a      	mov	sl, r3
 80095d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095da:	b10a      	cbz	r2, 80095e0 <_svfiprintf_r+0x5c>
 80095dc:	2a25      	cmp	r2, #37	; 0x25
 80095de:	d1f9      	bne.n	80095d4 <_svfiprintf_r+0x50>
 80095e0:	ebba 0b04 	subs.w	fp, sl, r4
 80095e4:	d00b      	beq.n	80095fe <_svfiprintf_r+0x7a>
 80095e6:	465b      	mov	r3, fp
 80095e8:	4622      	mov	r2, r4
 80095ea:	4629      	mov	r1, r5
 80095ec:	4638      	mov	r0, r7
 80095ee:	f7ff ff6f 	bl	80094d0 <__ssputs_r>
 80095f2:	3001      	adds	r0, #1
 80095f4:	f000 80a9 	beq.w	800974a <_svfiprintf_r+0x1c6>
 80095f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fa:	445a      	add	r2, fp
 80095fc:	9209      	str	r2, [sp, #36]	; 0x24
 80095fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 80a1 	beq.w	800974a <_svfiprintf_r+0x1c6>
 8009608:	2300      	movs	r3, #0
 800960a:	f04f 32ff 	mov.w	r2, #4294967295
 800960e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009612:	f10a 0a01 	add.w	sl, sl, #1
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	9307      	str	r3, [sp, #28]
 800961a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800961e:	931a      	str	r3, [sp, #104]	; 0x68
 8009620:	4654      	mov	r4, sl
 8009622:	2205      	movs	r2, #5
 8009624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009628:	4850      	ldr	r0, [pc, #320]	; (800976c <_svfiprintf_r+0x1e8>)
 800962a:	f7f6 fe11 	bl	8000250 <memchr>
 800962e:	9a04      	ldr	r2, [sp, #16]
 8009630:	b9d8      	cbnz	r0, 800966a <_svfiprintf_r+0xe6>
 8009632:	06d0      	lsls	r0, r2, #27
 8009634:	bf44      	itt	mi
 8009636:	2320      	movmi	r3, #32
 8009638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800963c:	0711      	lsls	r1, r2, #28
 800963e:	bf44      	itt	mi
 8009640:	232b      	movmi	r3, #43	; 0x2b
 8009642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009646:	f89a 3000 	ldrb.w	r3, [sl]
 800964a:	2b2a      	cmp	r3, #42	; 0x2a
 800964c:	d015      	beq.n	800967a <_svfiprintf_r+0xf6>
 800964e:	9a07      	ldr	r2, [sp, #28]
 8009650:	4654      	mov	r4, sl
 8009652:	2000      	movs	r0, #0
 8009654:	f04f 0c0a 	mov.w	ip, #10
 8009658:	4621      	mov	r1, r4
 800965a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800965e:	3b30      	subs	r3, #48	; 0x30
 8009660:	2b09      	cmp	r3, #9
 8009662:	d94d      	bls.n	8009700 <_svfiprintf_r+0x17c>
 8009664:	b1b0      	cbz	r0, 8009694 <_svfiprintf_r+0x110>
 8009666:	9207      	str	r2, [sp, #28]
 8009668:	e014      	b.n	8009694 <_svfiprintf_r+0x110>
 800966a:	eba0 0308 	sub.w	r3, r0, r8
 800966e:	fa09 f303 	lsl.w	r3, r9, r3
 8009672:	4313      	orrs	r3, r2
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	46a2      	mov	sl, r4
 8009678:	e7d2      	b.n	8009620 <_svfiprintf_r+0x9c>
 800967a:	9b03      	ldr	r3, [sp, #12]
 800967c:	1d19      	adds	r1, r3, #4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	9103      	str	r1, [sp, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	bfbb      	ittet	lt
 8009686:	425b      	neglt	r3, r3
 8009688:	f042 0202 	orrlt.w	r2, r2, #2
 800968c:	9307      	strge	r3, [sp, #28]
 800968e:	9307      	strlt	r3, [sp, #28]
 8009690:	bfb8      	it	lt
 8009692:	9204      	strlt	r2, [sp, #16]
 8009694:	7823      	ldrb	r3, [r4, #0]
 8009696:	2b2e      	cmp	r3, #46	; 0x2e
 8009698:	d10c      	bne.n	80096b4 <_svfiprintf_r+0x130>
 800969a:	7863      	ldrb	r3, [r4, #1]
 800969c:	2b2a      	cmp	r3, #42	; 0x2a
 800969e:	d134      	bne.n	800970a <_svfiprintf_r+0x186>
 80096a0:	9b03      	ldr	r3, [sp, #12]
 80096a2:	1d1a      	adds	r2, r3, #4
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	9203      	str	r2, [sp, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	bfb8      	it	lt
 80096ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80096b0:	3402      	adds	r4, #2
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800977c <_svfiprintf_r+0x1f8>
 80096b8:	7821      	ldrb	r1, [r4, #0]
 80096ba:	2203      	movs	r2, #3
 80096bc:	4650      	mov	r0, sl
 80096be:	f7f6 fdc7 	bl	8000250 <memchr>
 80096c2:	b138      	cbz	r0, 80096d4 <_svfiprintf_r+0x150>
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	eba0 000a 	sub.w	r0, r0, sl
 80096ca:	2240      	movs	r2, #64	; 0x40
 80096cc:	4082      	lsls	r2, r0
 80096ce:	4313      	orrs	r3, r2
 80096d0:	3401      	adds	r4, #1
 80096d2:	9304      	str	r3, [sp, #16]
 80096d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d8:	4825      	ldr	r0, [pc, #148]	; (8009770 <_svfiprintf_r+0x1ec>)
 80096da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096de:	2206      	movs	r2, #6
 80096e0:	f7f6 fdb6 	bl	8000250 <memchr>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d038      	beq.n	800975a <_svfiprintf_r+0x1d6>
 80096e8:	4b22      	ldr	r3, [pc, #136]	; (8009774 <_svfiprintf_r+0x1f0>)
 80096ea:	bb1b      	cbnz	r3, 8009734 <_svfiprintf_r+0x1b0>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	3307      	adds	r3, #7
 80096f0:	f023 0307 	bic.w	r3, r3, #7
 80096f4:	3308      	adds	r3, #8
 80096f6:	9303      	str	r3, [sp, #12]
 80096f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fa:	4433      	add	r3, r6
 80096fc:	9309      	str	r3, [sp, #36]	; 0x24
 80096fe:	e768      	b.n	80095d2 <_svfiprintf_r+0x4e>
 8009700:	fb0c 3202 	mla	r2, ip, r2, r3
 8009704:	460c      	mov	r4, r1
 8009706:	2001      	movs	r0, #1
 8009708:	e7a6      	b.n	8009658 <_svfiprintf_r+0xd4>
 800970a:	2300      	movs	r3, #0
 800970c:	3401      	adds	r4, #1
 800970e:	9305      	str	r3, [sp, #20]
 8009710:	4619      	mov	r1, r3
 8009712:	f04f 0c0a 	mov.w	ip, #10
 8009716:	4620      	mov	r0, r4
 8009718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800971c:	3a30      	subs	r2, #48	; 0x30
 800971e:	2a09      	cmp	r2, #9
 8009720:	d903      	bls.n	800972a <_svfiprintf_r+0x1a6>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0c6      	beq.n	80096b4 <_svfiprintf_r+0x130>
 8009726:	9105      	str	r1, [sp, #20]
 8009728:	e7c4      	b.n	80096b4 <_svfiprintf_r+0x130>
 800972a:	fb0c 2101 	mla	r1, ip, r1, r2
 800972e:	4604      	mov	r4, r0
 8009730:	2301      	movs	r3, #1
 8009732:	e7f0      	b.n	8009716 <_svfiprintf_r+0x192>
 8009734:	ab03      	add	r3, sp, #12
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	462a      	mov	r2, r5
 800973a:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <_svfiprintf_r+0x1f4>)
 800973c:	a904      	add	r1, sp, #16
 800973e:	4638      	mov	r0, r7
 8009740:	f3af 8000 	nop.w
 8009744:	1c42      	adds	r2, r0, #1
 8009746:	4606      	mov	r6, r0
 8009748:	d1d6      	bne.n	80096f8 <_svfiprintf_r+0x174>
 800974a:	89ab      	ldrh	r3, [r5, #12]
 800974c:	065b      	lsls	r3, r3, #25
 800974e:	f53f af2d 	bmi.w	80095ac <_svfiprintf_r+0x28>
 8009752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009754:	b01d      	add	sp, #116	; 0x74
 8009756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975a:	ab03      	add	r3, sp, #12
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	462a      	mov	r2, r5
 8009760:	4b05      	ldr	r3, [pc, #20]	; (8009778 <_svfiprintf_r+0x1f4>)
 8009762:	a904      	add	r1, sp, #16
 8009764:	4638      	mov	r0, r7
 8009766:	f000 f9bd 	bl	8009ae4 <_printf_i>
 800976a:	e7eb      	b.n	8009744 <_svfiprintf_r+0x1c0>
 800976c:	080194e7 	.word	0x080194e7
 8009770:	080194f1 	.word	0x080194f1
 8009774:	00000000 	.word	0x00000000
 8009778:	080094d1 	.word	0x080094d1
 800977c:	080194ed 	.word	0x080194ed

08009780 <__sfputc_r>:
 8009780:	6893      	ldr	r3, [r2, #8]
 8009782:	3b01      	subs	r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	b410      	push	{r4}
 8009788:	6093      	str	r3, [r2, #8]
 800978a:	da08      	bge.n	800979e <__sfputc_r+0x1e>
 800978c:	6994      	ldr	r4, [r2, #24]
 800978e:	42a3      	cmp	r3, r4
 8009790:	db01      	blt.n	8009796 <__sfputc_r+0x16>
 8009792:	290a      	cmp	r1, #10
 8009794:	d103      	bne.n	800979e <__sfputc_r+0x1e>
 8009796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979a:	f7ff bc3e 	b.w	800901a <__swbuf_r>
 800979e:	6813      	ldr	r3, [r2, #0]
 80097a0:	1c58      	adds	r0, r3, #1
 80097a2:	6010      	str	r0, [r2, #0]
 80097a4:	7019      	strb	r1, [r3, #0]
 80097a6:	4608      	mov	r0, r1
 80097a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <__sfputs_r>:
 80097ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b0:	4606      	mov	r6, r0
 80097b2:	460f      	mov	r7, r1
 80097b4:	4614      	mov	r4, r2
 80097b6:	18d5      	adds	r5, r2, r3
 80097b8:	42ac      	cmp	r4, r5
 80097ba:	d101      	bne.n	80097c0 <__sfputs_r+0x12>
 80097bc:	2000      	movs	r0, #0
 80097be:	e007      	b.n	80097d0 <__sfputs_r+0x22>
 80097c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c4:	463a      	mov	r2, r7
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7ff ffda 	bl	8009780 <__sfputc_r>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d1f3      	bne.n	80097b8 <__sfputs_r+0xa>
 80097d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097d4 <_vfiprintf_r>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	460d      	mov	r5, r1
 80097da:	b09d      	sub	sp, #116	; 0x74
 80097dc:	4614      	mov	r4, r2
 80097de:	4698      	mov	r8, r3
 80097e0:	4606      	mov	r6, r0
 80097e2:	b118      	cbz	r0, 80097ec <_vfiprintf_r+0x18>
 80097e4:	6a03      	ldr	r3, [r0, #32]
 80097e6:	b90b      	cbnz	r3, 80097ec <_vfiprintf_r+0x18>
 80097e8:	f7ff fb10 	bl	8008e0c <__sinit>
 80097ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097ee:	07d9      	lsls	r1, r3, #31
 80097f0:	d405      	bmi.n	80097fe <_vfiprintf_r+0x2a>
 80097f2:	89ab      	ldrh	r3, [r5, #12]
 80097f4:	059a      	lsls	r2, r3, #22
 80097f6:	d402      	bmi.n	80097fe <_vfiprintf_r+0x2a>
 80097f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097fa:	f7ff fde7 	bl	80093cc <__retarget_lock_acquire_recursive>
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	071b      	lsls	r3, r3, #28
 8009802:	d501      	bpl.n	8009808 <_vfiprintf_r+0x34>
 8009804:	692b      	ldr	r3, [r5, #16]
 8009806:	b99b      	cbnz	r3, 8009830 <_vfiprintf_r+0x5c>
 8009808:	4629      	mov	r1, r5
 800980a:	4630      	mov	r0, r6
 800980c:	f7ff fc42 	bl	8009094 <__swsetup_r>
 8009810:	b170      	cbz	r0, 8009830 <_vfiprintf_r+0x5c>
 8009812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009814:	07dc      	lsls	r4, r3, #31
 8009816:	d504      	bpl.n	8009822 <_vfiprintf_r+0x4e>
 8009818:	f04f 30ff 	mov.w	r0, #4294967295
 800981c:	b01d      	add	sp, #116	; 0x74
 800981e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	0598      	lsls	r0, r3, #22
 8009826:	d4f7      	bmi.n	8009818 <_vfiprintf_r+0x44>
 8009828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800982a:	f7ff fdd0 	bl	80093ce <__retarget_lock_release_recursive>
 800982e:	e7f3      	b.n	8009818 <_vfiprintf_r+0x44>
 8009830:	2300      	movs	r3, #0
 8009832:	9309      	str	r3, [sp, #36]	; 0x24
 8009834:	2320      	movs	r3, #32
 8009836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800983a:	f8cd 800c 	str.w	r8, [sp, #12]
 800983e:	2330      	movs	r3, #48	; 0x30
 8009840:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80099f4 <_vfiprintf_r+0x220>
 8009844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009848:	f04f 0901 	mov.w	r9, #1
 800984c:	4623      	mov	r3, r4
 800984e:	469a      	mov	sl, r3
 8009850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009854:	b10a      	cbz	r2, 800985a <_vfiprintf_r+0x86>
 8009856:	2a25      	cmp	r2, #37	; 0x25
 8009858:	d1f9      	bne.n	800984e <_vfiprintf_r+0x7a>
 800985a:	ebba 0b04 	subs.w	fp, sl, r4
 800985e:	d00b      	beq.n	8009878 <_vfiprintf_r+0xa4>
 8009860:	465b      	mov	r3, fp
 8009862:	4622      	mov	r2, r4
 8009864:	4629      	mov	r1, r5
 8009866:	4630      	mov	r0, r6
 8009868:	f7ff ffa1 	bl	80097ae <__sfputs_r>
 800986c:	3001      	adds	r0, #1
 800986e:	f000 80a9 	beq.w	80099c4 <_vfiprintf_r+0x1f0>
 8009872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009874:	445a      	add	r2, fp
 8009876:	9209      	str	r2, [sp, #36]	; 0x24
 8009878:	f89a 3000 	ldrb.w	r3, [sl]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 80a1 	beq.w	80099c4 <_vfiprintf_r+0x1f0>
 8009882:	2300      	movs	r3, #0
 8009884:	f04f 32ff 	mov.w	r2, #4294967295
 8009888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800988c:	f10a 0a01 	add.w	sl, sl, #1
 8009890:	9304      	str	r3, [sp, #16]
 8009892:	9307      	str	r3, [sp, #28]
 8009894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009898:	931a      	str	r3, [sp, #104]	; 0x68
 800989a:	4654      	mov	r4, sl
 800989c:	2205      	movs	r2, #5
 800989e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a2:	4854      	ldr	r0, [pc, #336]	; (80099f4 <_vfiprintf_r+0x220>)
 80098a4:	f7f6 fcd4 	bl	8000250 <memchr>
 80098a8:	9a04      	ldr	r2, [sp, #16]
 80098aa:	b9d8      	cbnz	r0, 80098e4 <_vfiprintf_r+0x110>
 80098ac:	06d1      	lsls	r1, r2, #27
 80098ae:	bf44      	itt	mi
 80098b0:	2320      	movmi	r3, #32
 80098b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b6:	0713      	lsls	r3, r2, #28
 80098b8:	bf44      	itt	mi
 80098ba:	232b      	movmi	r3, #43	; 0x2b
 80098bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c0:	f89a 3000 	ldrb.w	r3, [sl]
 80098c4:	2b2a      	cmp	r3, #42	; 0x2a
 80098c6:	d015      	beq.n	80098f4 <_vfiprintf_r+0x120>
 80098c8:	9a07      	ldr	r2, [sp, #28]
 80098ca:	4654      	mov	r4, sl
 80098cc:	2000      	movs	r0, #0
 80098ce:	f04f 0c0a 	mov.w	ip, #10
 80098d2:	4621      	mov	r1, r4
 80098d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098d8:	3b30      	subs	r3, #48	; 0x30
 80098da:	2b09      	cmp	r3, #9
 80098dc:	d94d      	bls.n	800997a <_vfiprintf_r+0x1a6>
 80098de:	b1b0      	cbz	r0, 800990e <_vfiprintf_r+0x13a>
 80098e0:	9207      	str	r2, [sp, #28]
 80098e2:	e014      	b.n	800990e <_vfiprintf_r+0x13a>
 80098e4:	eba0 0308 	sub.w	r3, r0, r8
 80098e8:	fa09 f303 	lsl.w	r3, r9, r3
 80098ec:	4313      	orrs	r3, r2
 80098ee:	9304      	str	r3, [sp, #16]
 80098f0:	46a2      	mov	sl, r4
 80098f2:	e7d2      	b.n	800989a <_vfiprintf_r+0xc6>
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	1d19      	adds	r1, r3, #4
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	9103      	str	r1, [sp, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bfbb      	ittet	lt
 8009900:	425b      	neglt	r3, r3
 8009902:	f042 0202 	orrlt.w	r2, r2, #2
 8009906:	9307      	strge	r3, [sp, #28]
 8009908:	9307      	strlt	r3, [sp, #28]
 800990a:	bfb8      	it	lt
 800990c:	9204      	strlt	r2, [sp, #16]
 800990e:	7823      	ldrb	r3, [r4, #0]
 8009910:	2b2e      	cmp	r3, #46	; 0x2e
 8009912:	d10c      	bne.n	800992e <_vfiprintf_r+0x15a>
 8009914:	7863      	ldrb	r3, [r4, #1]
 8009916:	2b2a      	cmp	r3, #42	; 0x2a
 8009918:	d134      	bne.n	8009984 <_vfiprintf_r+0x1b0>
 800991a:	9b03      	ldr	r3, [sp, #12]
 800991c:	1d1a      	adds	r2, r3, #4
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	9203      	str	r2, [sp, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	bfb8      	it	lt
 8009926:	f04f 33ff 	movlt.w	r3, #4294967295
 800992a:	3402      	adds	r4, #2
 800992c:	9305      	str	r3, [sp, #20]
 800992e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009a04 <_vfiprintf_r+0x230>
 8009932:	7821      	ldrb	r1, [r4, #0]
 8009934:	2203      	movs	r2, #3
 8009936:	4650      	mov	r0, sl
 8009938:	f7f6 fc8a 	bl	8000250 <memchr>
 800993c:	b138      	cbz	r0, 800994e <_vfiprintf_r+0x17a>
 800993e:	9b04      	ldr	r3, [sp, #16]
 8009940:	eba0 000a 	sub.w	r0, r0, sl
 8009944:	2240      	movs	r2, #64	; 0x40
 8009946:	4082      	lsls	r2, r0
 8009948:	4313      	orrs	r3, r2
 800994a:	3401      	adds	r4, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009952:	4829      	ldr	r0, [pc, #164]	; (80099f8 <_vfiprintf_r+0x224>)
 8009954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009958:	2206      	movs	r2, #6
 800995a:	f7f6 fc79 	bl	8000250 <memchr>
 800995e:	2800      	cmp	r0, #0
 8009960:	d03f      	beq.n	80099e2 <_vfiprintf_r+0x20e>
 8009962:	4b26      	ldr	r3, [pc, #152]	; (80099fc <_vfiprintf_r+0x228>)
 8009964:	bb1b      	cbnz	r3, 80099ae <_vfiprintf_r+0x1da>
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	3307      	adds	r3, #7
 800996a:	f023 0307 	bic.w	r3, r3, #7
 800996e:	3308      	adds	r3, #8
 8009970:	9303      	str	r3, [sp, #12]
 8009972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009974:	443b      	add	r3, r7
 8009976:	9309      	str	r3, [sp, #36]	; 0x24
 8009978:	e768      	b.n	800984c <_vfiprintf_r+0x78>
 800997a:	fb0c 3202 	mla	r2, ip, r2, r3
 800997e:	460c      	mov	r4, r1
 8009980:	2001      	movs	r0, #1
 8009982:	e7a6      	b.n	80098d2 <_vfiprintf_r+0xfe>
 8009984:	2300      	movs	r3, #0
 8009986:	3401      	adds	r4, #1
 8009988:	9305      	str	r3, [sp, #20]
 800998a:	4619      	mov	r1, r3
 800998c:	f04f 0c0a 	mov.w	ip, #10
 8009990:	4620      	mov	r0, r4
 8009992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009996:	3a30      	subs	r2, #48	; 0x30
 8009998:	2a09      	cmp	r2, #9
 800999a:	d903      	bls.n	80099a4 <_vfiprintf_r+0x1d0>
 800999c:	2b00      	cmp	r3, #0
 800999e:	d0c6      	beq.n	800992e <_vfiprintf_r+0x15a>
 80099a0:	9105      	str	r1, [sp, #20]
 80099a2:	e7c4      	b.n	800992e <_vfiprintf_r+0x15a>
 80099a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099a8:	4604      	mov	r4, r0
 80099aa:	2301      	movs	r3, #1
 80099ac:	e7f0      	b.n	8009990 <_vfiprintf_r+0x1bc>
 80099ae:	ab03      	add	r3, sp, #12
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	462a      	mov	r2, r5
 80099b4:	4b12      	ldr	r3, [pc, #72]	; (8009a00 <_vfiprintf_r+0x22c>)
 80099b6:	a904      	add	r1, sp, #16
 80099b8:	4630      	mov	r0, r6
 80099ba:	f3af 8000 	nop.w
 80099be:	4607      	mov	r7, r0
 80099c0:	1c78      	adds	r0, r7, #1
 80099c2:	d1d6      	bne.n	8009972 <_vfiprintf_r+0x19e>
 80099c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c6:	07d9      	lsls	r1, r3, #31
 80099c8:	d405      	bmi.n	80099d6 <_vfiprintf_r+0x202>
 80099ca:	89ab      	ldrh	r3, [r5, #12]
 80099cc:	059a      	lsls	r2, r3, #22
 80099ce:	d402      	bmi.n	80099d6 <_vfiprintf_r+0x202>
 80099d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099d2:	f7ff fcfc 	bl	80093ce <__retarget_lock_release_recursive>
 80099d6:	89ab      	ldrh	r3, [r5, #12]
 80099d8:	065b      	lsls	r3, r3, #25
 80099da:	f53f af1d 	bmi.w	8009818 <_vfiprintf_r+0x44>
 80099de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099e0:	e71c      	b.n	800981c <_vfiprintf_r+0x48>
 80099e2:	ab03      	add	r3, sp, #12
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	462a      	mov	r2, r5
 80099e8:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <_vfiprintf_r+0x22c>)
 80099ea:	a904      	add	r1, sp, #16
 80099ec:	4630      	mov	r0, r6
 80099ee:	f000 f879 	bl	8009ae4 <_printf_i>
 80099f2:	e7e4      	b.n	80099be <_vfiprintf_r+0x1ea>
 80099f4:	080194e7 	.word	0x080194e7
 80099f8:	080194f1 	.word	0x080194f1
 80099fc:	00000000 	.word	0x00000000
 8009a00:	080097af 	.word	0x080097af
 8009a04:	080194ed 	.word	0x080194ed

08009a08 <_printf_common>:
 8009a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a0c:	4616      	mov	r6, r2
 8009a0e:	4699      	mov	r9, r3
 8009a10:	688a      	ldr	r2, [r1, #8]
 8009a12:	690b      	ldr	r3, [r1, #16]
 8009a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	bfb8      	it	lt
 8009a1c:	4613      	movlt	r3, r2
 8009a1e:	6033      	str	r3, [r6, #0]
 8009a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a24:	4607      	mov	r7, r0
 8009a26:	460c      	mov	r4, r1
 8009a28:	b10a      	cbz	r2, 8009a2e <_printf_common+0x26>
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	6033      	str	r3, [r6, #0]
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	0699      	lsls	r1, r3, #26
 8009a32:	bf42      	ittt	mi
 8009a34:	6833      	ldrmi	r3, [r6, #0]
 8009a36:	3302      	addmi	r3, #2
 8009a38:	6033      	strmi	r3, [r6, #0]
 8009a3a:	6825      	ldr	r5, [r4, #0]
 8009a3c:	f015 0506 	ands.w	r5, r5, #6
 8009a40:	d106      	bne.n	8009a50 <_printf_common+0x48>
 8009a42:	f104 0a19 	add.w	sl, r4, #25
 8009a46:	68e3      	ldr	r3, [r4, #12]
 8009a48:	6832      	ldr	r2, [r6, #0]
 8009a4a:	1a9b      	subs	r3, r3, r2
 8009a4c:	42ab      	cmp	r3, r5
 8009a4e:	dc26      	bgt.n	8009a9e <_printf_common+0x96>
 8009a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a54:	1e13      	subs	r3, r2, #0
 8009a56:	6822      	ldr	r2, [r4, #0]
 8009a58:	bf18      	it	ne
 8009a5a:	2301      	movne	r3, #1
 8009a5c:	0692      	lsls	r2, r2, #26
 8009a5e:	d42b      	bmi.n	8009ab8 <_printf_common+0xb0>
 8009a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a64:	4649      	mov	r1, r9
 8009a66:	4638      	mov	r0, r7
 8009a68:	47c0      	blx	r8
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	d01e      	beq.n	8009aac <_printf_common+0xa4>
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	6922      	ldr	r2, [r4, #16]
 8009a72:	f003 0306 	and.w	r3, r3, #6
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	bf02      	ittt	eq
 8009a7a:	68e5      	ldreq	r5, [r4, #12]
 8009a7c:	6833      	ldreq	r3, [r6, #0]
 8009a7e:	1aed      	subeq	r5, r5, r3
 8009a80:	68a3      	ldr	r3, [r4, #8]
 8009a82:	bf0c      	ite	eq
 8009a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a88:	2500      	movne	r5, #0
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	bfc4      	itt	gt
 8009a8e:	1a9b      	subgt	r3, r3, r2
 8009a90:	18ed      	addgt	r5, r5, r3
 8009a92:	2600      	movs	r6, #0
 8009a94:	341a      	adds	r4, #26
 8009a96:	42b5      	cmp	r5, r6
 8009a98:	d11a      	bne.n	8009ad0 <_printf_common+0xc8>
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	e008      	b.n	8009ab0 <_printf_common+0xa8>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	4652      	mov	r2, sl
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	47c0      	blx	r8
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d103      	bne.n	8009ab4 <_printf_common+0xac>
 8009aac:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	e7c6      	b.n	8009a46 <_printf_common+0x3e>
 8009ab8:	18e1      	adds	r1, r4, r3
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	2030      	movs	r0, #48	; 0x30
 8009abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ac2:	4422      	add	r2, r4
 8009ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009acc:	3302      	adds	r3, #2
 8009ace:	e7c7      	b.n	8009a60 <_printf_common+0x58>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	4649      	mov	r1, r9
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	47c0      	blx	r8
 8009ada:	3001      	adds	r0, #1
 8009adc:	d0e6      	beq.n	8009aac <_printf_common+0xa4>
 8009ade:	3601      	adds	r6, #1
 8009ae0:	e7d9      	b.n	8009a96 <_printf_common+0x8e>
	...

08009ae4 <_printf_i>:
 8009ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae8:	7e0f      	ldrb	r7, [r1, #24]
 8009aea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009aec:	2f78      	cmp	r7, #120	; 0x78
 8009aee:	4691      	mov	r9, r2
 8009af0:	4680      	mov	r8, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	469a      	mov	sl, r3
 8009af6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009afa:	d807      	bhi.n	8009b0c <_printf_i+0x28>
 8009afc:	2f62      	cmp	r7, #98	; 0x62
 8009afe:	d80a      	bhi.n	8009b16 <_printf_i+0x32>
 8009b00:	2f00      	cmp	r7, #0
 8009b02:	f000 80d4 	beq.w	8009cae <_printf_i+0x1ca>
 8009b06:	2f58      	cmp	r7, #88	; 0x58
 8009b08:	f000 80c0 	beq.w	8009c8c <_printf_i+0x1a8>
 8009b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b14:	e03a      	b.n	8009b8c <_printf_i+0xa8>
 8009b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b1a:	2b15      	cmp	r3, #21
 8009b1c:	d8f6      	bhi.n	8009b0c <_printf_i+0x28>
 8009b1e:	a101      	add	r1, pc, #4	; (adr r1, 8009b24 <_printf_i+0x40>)
 8009b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b24:	08009b7d 	.word	0x08009b7d
 8009b28:	08009b91 	.word	0x08009b91
 8009b2c:	08009b0d 	.word	0x08009b0d
 8009b30:	08009b0d 	.word	0x08009b0d
 8009b34:	08009b0d 	.word	0x08009b0d
 8009b38:	08009b0d 	.word	0x08009b0d
 8009b3c:	08009b91 	.word	0x08009b91
 8009b40:	08009b0d 	.word	0x08009b0d
 8009b44:	08009b0d 	.word	0x08009b0d
 8009b48:	08009b0d 	.word	0x08009b0d
 8009b4c:	08009b0d 	.word	0x08009b0d
 8009b50:	08009c95 	.word	0x08009c95
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009c4f 	.word	0x08009c4f
 8009b5c:	08009b0d 	.word	0x08009b0d
 8009b60:	08009b0d 	.word	0x08009b0d
 8009b64:	08009cb7 	.word	0x08009cb7
 8009b68:	08009b0d 	.word	0x08009b0d
 8009b6c:	08009bbd 	.word	0x08009bbd
 8009b70:	08009b0d 	.word	0x08009b0d
 8009b74:	08009b0d 	.word	0x08009b0d
 8009b78:	08009c57 	.word	0x08009c57
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	1d1a      	adds	r2, r3, #4
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	602a      	str	r2, [r5, #0]
 8009b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e09f      	b.n	8009cd0 <_printf_i+0x1ec>
 8009b90:	6820      	ldr	r0, [r4, #0]
 8009b92:	682b      	ldr	r3, [r5, #0]
 8009b94:	0607      	lsls	r7, r0, #24
 8009b96:	f103 0104 	add.w	r1, r3, #4
 8009b9a:	6029      	str	r1, [r5, #0]
 8009b9c:	d501      	bpl.n	8009ba2 <_printf_i+0xbe>
 8009b9e:	681e      	ldr	r6, [r3, #0]
 8009ba0:	e003      	b.n	8009baa <_printf_i+0xc6>
 8009ba2:	0646      	lsls	r6, r0, #25
 8009ba4:	d5fb      	bpl.n	8009b9e <_printf_i+0xba>
 8009ba6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009baa:	2e00      	cmp	r6, #0
 8009bac:	da03      	bge.n	8009bb6 <_printf_i+0xd2>
 8009bae:	232d      	movs	r3, #45	; 0x2d
 8009bb0:	4276      	negs	r6, r6
 8009bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb6:	485a      	ldr	r0, [pc, #360]	; (8009d20 <_printf_i+0x23c>)
 8009bb8:	230a      	movs	r3, #10
 8009bba:	e012      	b.n	8009be2 <_printf_i+0xfe>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	6820      	ldr	r0, [r4, #0]
 8009bc0:	1d19      	adds	r1, r3, #4
 8009bc2:	6029      	str	r1, [r5, #0]
 8009bc4:	0605      	lsls	r5, r0, #24
 8009bc6:	d501      	bpl.n	8009bcc <_printf_i+0xe8>
 8009bc8:	681e      	ldr	r6, [r3, #0]
 8009bca:	e002      	b.n	8009bd2 <_printf_i+0xee>
 8009bcc:	0641      	lsls	r1, r0, #25
 8009bce:	d5fb      	bpl.n	8009bc8 <_printf_i+0xe4>
 8009bd0:	881e      	ldrh	r6, [r3, #0]
 8009bd2:	4853      	ldr	r0, [pc, #332]	; (8009d20 <_printf_i+0x23c>)
 8009bd4:	2f6f      	cmp	r7, #111	; 0x6f
 8009bd6:	bf0c      	ite	eq
 8009bd8:	2308      	moveq	r3, #8
 8009bda:	230a      	movne	r3, #10
 8009bdc:	2100      	movs	r1, #0
 8009bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009be2:	6865      	ldr	r5, [r4, #4]
 8009be4:	60a5      	str	r5, [r4, #8]
 8009be6:	2d00      	cmp	r5, #0
 8009be8:	bfa2      	ittt	ge
 8009bea:	6821      	ldrge	r1, [r4, #0]
 8009bec:	f021 0104 	bicge.w	r1, r1, #4
 8009bf0:	6021      	strge	r1, [r4, #0]
 8009bf2:	b90e      	cbnz	r6, 8009bf8 <_printf_i+0x114>
 8009bf4:	2d00      	cmp	r5, #0
 8009bf6:	d04b      	beq.n	8009c90 <_printf_i+0x1ac>
 8009bf8:	4615      	mov	r5, r2
 8009bfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bfe:	fb03 6711 	mls	r7, r3, r1, r6
 8009c02:	5dc7      	ldrb	r7, [r0, r7]
 8009c04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c08:	4637      	mov	r7, r6
 8009c0a:	42bb      	cmp	r3, r7
 8009c0c:	460e      	mov	r6, r1
 8009c0e:	d9f4      	bls.n	8009bfa <_printf_i+0x116>
 8009c10:	2b08      	cmp	r3, #8
 8009c12:	d10b      	bne.n	8009c2c <_printf_i+0x148>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	07de      	lsls	r6, r3, #31
 8009c18:	d508      	bpl.n	8009c2c <_printf_i+0x148>
 8009c1a:	6923      	ldr	r3, [r4, #16]
 8009c1c:	6861      	ldr	r1, [r4, #4]
 8009c1e:	4299      	cmp	r1, r3
 8009c20:	bfde      	ittt	le
 8009c22:	2330      	movle	r3, #48	; 0x30
 8009c24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c2c:	1b52      	subs	r2, r2, r5
 8009c2e:	6122      	str	r2, [r4, #16]
 8009c30:	f8cd a000 	str.w	sl, [sp]
 8009c34:	464b      	mov	r3, r9
 8009c36:	aa03      	add	r2, sp, #12
 8009c38:	4621      	mov	r1, r4
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	f7ff fee4 	bl	8009a08 <_printf_common>
 8009c40:	3001      	adds	r0, #1
 8009c42:	d14a      	bne.n	8009cda <_printf_i+0x1f6>
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295
 8009c48:	b004      	add	sp, #16
 8009c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	f043 0320 	orr.w	r3, r3, #32
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	4833      	ldr	r0, [pc, #204]	; (8009d24 <_printf_i+0x240>)
 8009c58:	2778      	movs	r7, #120	; 0x78
 8009c5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	6829      	ldr	r1, [r5, #0]
 8009c62:	061f      	lsls	r7, r3, #24
 8009c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c68:	d402      	bmi.n	8009c70 <_printf_i+0x18c>
 8009c6a:	065f      	lsls	r7, r3, #25
 8009c6c:	bf48      	it	mi
 8009c6e:	b2b6      	uxthmi	r6, r6
 8009c70:	07df      	lsls	r7, r3, #31
 8009c72:	bf48      	it	mi
 8009c74:	f043 0320 	orrmi.w	r3, r3, #32
 8009c78:	6029      	str	r1, [r5, #0]
 8009c7a:	bf48      	it	mi
 8009c7c:	6023      	strmi	r3, [r4, #0]
 8009c7e:	b91e      	cbnz	r6, 8009c88 <_printf_i+0x1a4>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	f023 0320 	bic.w	r3, r3, #32
 8009c86:	6023      	str	r3, [r4, #0]
 8009c88:	2310      	movs	r3, #16
 8009c8a:	e7a7      	b.n	8009bdc <_printf_i+0xf8>
 8009c8c:	4824      	ldr	r0, [pc, #144]	; (8009d20 <_printf_i+0x23c>)
 8009c8e:	e7e4      	b.n	8009c5a <_printf_i+0x176>
 8009c90:	4615      	mov	r5, r2
 8009c92:	e7bd      	b.n	8009c10 <_printf_i+0x12c>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	6826      	ldr	r6, [r4, #0]
 8009c98:	6961      	ldr	r1, [r4, #20]
 8009c9a:	1d18      	adds	r0, r3, #4
 8009c9c:	6028      	str	r0, [r5, #0]
 8009c9e:	0635      	lsls	r5, r6, #24
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	d501      	bpl.n	8009ca8 <_printf_i+0x1c4>
 8009ca4:	6019      	str	r1, [r3, #0]
 8009ca6:	e002      	b.n	8009cae <_printf_i+0x1ca>
 8009ca8:	0670      	lsls	r0, r6, #25
 8009caa:	d5fb      	bpl.n	8009ca4 <_printf_i+0x1c0>
 8009cac:	8019      	strh	r1, [r3, #0]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6123      	str	r3, [r4, #16]
 8009cb2:	4615      	mov	r5, r2
 8009cb4:	e7bc      	b.n	8009c30 <_printf_i+0x14c>
 8009cb6:	682b      	ldr	r3, [r5, #0]
 8009cb8:	1d1a      	adds	r2, r3, #4
 8009cba:	602a      	str	r2, [r5, #0]
 8009cbc:	681d      	ldr	r5, [r3, #0]
 8009cbe:	6862      	ldr	r2, [r4, #4]
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f7f6 fac4 	bl	8000250 <memchr>
 8009cc8:	b108      	cbz	r0, 8009cce <_printf_i+0x1ea>
 8009cca:	1b40      	subs	r0, r0, r5
 8009ccc:	6060      	str	r0, [r4, #4]
 8009cce:	6863      	ldr	r3, [r4, #4]
 8009cd0:	6123      	str	r3, [r4, #16]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd8:	e7aa      	b.n	8009c30 <_printf_i+0x14c>
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	462a      	mov	r2, r5
 8009cde:	4649      	mov	r1, r9
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	47d0      	blx	sl
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d0ad      	beq.n	8009c44 <_printf_i+0x160>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	079b      	lsls	r3, r3, #30
 8009cec:	d413      	bmi.n	8009d16 <_printf_i+0x232>
 8009cee:	68e0      	ldr	r0, [r4, #12]
 8009cf0:	9b03      	ldr	r3, [sp, #12]
 8009cf2:	4298      	cmp	r0, r3
 8009cf4:	bfb8      	it	lt
 8009cf6:	4618      	movlt	r0, r3
 8009cf8:	e7a6      	b.n	8009c48 <_printf_i+0x164>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	4649      	mov	r1, r9
 8009d00:	4640      	mov	r0, r8
 8009d02:	47d0      	blx	sl
 8009d04:	3001      	adds	r0, #1
 8009d06:	d09d      	beq.n	8009c44 <_printf_i+0x160>
 8009d08:	3501      	adds	r5, #1
 8009d0a:	68e3      	ldr	r3, [r4, #12]
 8009d0c:	9903      	ldr	r1, [sp, #12]
 8009d0e:	1a5b      	subs	r3, r3, r1
 8009d10:	42ab      	cmp	r3, r5
 8009d12:	dcf2      	bgt.n	8009cfa <_printf_i+0x216>
 8009d14:	e7eb      	b.n	8009cee <_printf_i+0x20a>
 8009d16:	2500      	movs	r5, #0
 8009d18:	f104 0619 	add.w	r6, r4, #25
 8009d1c:	e7f5      	b.n	8009d0a <_printf_i+0x226>
 8009d1e:	bf00      	nop
 8009d20:	080194f8 	.word	0x080194f8
 8009d24:	08019509 	.word	0x08019509

08009d28 <__sflush_r>:
 8009d28:	898a      	ldrh	r2, [r1, #12]
 8009d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2e:	4605      	mov	r5, r0
 8009d30:	0710      	lsls	r0, r2, #28
 8009d32:	460c      	mov	r4, r1
 8009d34:	d458      	bmi.n	8009de8 <__sflush_r+0xc0>
 8009d36:	684b      	ldr	r3, [r1, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	dc05      	bgt.n	8009d48 <__sflush_r+0x20>
 8009d3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	dc02      	bgt.n	8009d48 <__sflush_r+0x20>
 8009d42:	2000      	movs	r0, #0
 8009d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d4a:	2e00      	cmp	r6, #0
 8009d4c:	d0f9      	beq.n	8009d42 <__sflush_r+0x1a>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d54:	682f      	ldr	r7, [r5, #0]
 8009d56:	6a21      	ldr	r1, [r4, #32]
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	d032      	beq.n	8009dc2 <__sflush_r+0x9a>
 8009d5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	075a      	lsls	r2, r3, #29
 8009d62:	d505      	bpl.n	8009d70 <__sflush_r+0x48>
 8009d64:	6863      	ldr	r3, [r4, #4]
 8009d66:	1ac0      	subs	r0, r0, r3
 8009d68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d6a:	b10b      	cbz	r3, 8009d70 <__sflush_r+0x48>
 8009d6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d6e:	1ac0      	subs	r0, r0, r3
 8009d70:	2300      	movs	r3, #0
 8009d72:	4602      	mov	r2, r0
 8009d74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d76:	6a21      	ldr	r1, [r4, #32]
 8009d78:	4628      	mov	r0, r5
 8009d7a:	47b0      	blx	r6
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	d106      	bne.n	8009d90 <__sflush_r+0x68>
 8009d82:	6829      	ldr	r1, [r5, #0]
 8009d84:	291d      	cmp	r1, #29
 8009d86:	d82b      	bhi.n	8009de0 <__sflush_r+0xb8>
 8009d88:	4a29      	ldr	r2, [pc, #164]	; (8009e30 <__sflush_r+0x108>)
 8009d8a:	410a      	asrs	r2, r1
 8009d8c:	07d6      	lsls	r6, r2, #31
 8009d8e:	d427      	bmi.n	8009de0 <__sflush_r+0xb8>
 8009d90:	2200      	movs	r2, #0
 8009d92:	6062      	str	r2, [r4, #4]
 8009d94:	04d9      	lsls	r1, r3, #19
 8009d96:	6922      	ldr	r2, [r4, #16]
 8009d98:	6022      	str	r2, [r4, #0]
 8009d9a:	d504      	bpl.n	8009da6 <__sflush_r+0x7e>
 8009d9c:	1c42      	adds	r2, r0, #1
 8009d9e:	d101      	bne.n	8009da4 <__sflush_r+0x7c>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	b903      	cbnz	r3, 8009da6 <__sflush_r+0x7e>
 8009da4:	6560      	str	r0, [r4, #84]	; 0x54
 8009da6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009da8:	602f      	str	r7, [r5, #0]
 8009daa:	2900      	cmp	r1, #0
 8009dac:	d0c9      	beq.n	8009d42 <__sflush_r+0x1a>
 8009dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009db2:	4299      	cmp	r1, r3
 8009db4:	d002      	beq.n	8009dbc <__sflush_r+0x94>
 8009db6:	4628      	mov	r0, r5
 8009db8:	f7ff fb3e 	bl	8009438 <_free_r>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	6360      	str	r0, [r4, #52]	; 0x34
 8009dc0:	e7c0      	b.n	8009d44 <__sflush_r+0x1c>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	47b0      	blx	r6
 8009dc8:	1c41      	adds	r1, r0, #1
 8009dca:	d1c8      	bne.n	8009d5e <__sflush_r+0x36>
 8009dcc:	682b      	ldr	r3, [r5, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d0c5      	beq.n	8009d5e <__sflush_r+0x36>
 8009dd2:	2b1d      	cmp	r3, #29
 8009dd4:	d001      	beq.n	8009dda <__sflush_r+0xb2>
 8009dd6:	2b16      	cmp	r3, #22
 8009dd8:	d101      	bne.n	8009dde <__sflush_r+0xb6>
 8009dda:	602f      	str	r7, [r5, #0]
 8009ddc:	e7b1      	b.n	8009d42 <__sflush_r+0x1a>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	e7ad      	b.n	8009d44 <__sflush_r+0x1c>
 8009de8:	690f      	ldr	r7, [r1, #16]
 8009dea:	2f00      	cmp	r7, #0
 8009dec:	d0a9      	beq.n	8009d42 <__sflush_r+0x1a>
 8009dee:	0793      	lsls	r3, r2, #30
 8009df0:	680e      	ldr	r6, [r1, #0]
 8009df2:	bf08      	it	eq
 8009df4:	694b      	ldreq	r3, [r1, #20]
 8009df6:	600f      	str	r7, [r1, #0]
 8009df8:	bf18      	it	ne
 8009dfa:	2300      	movne	r3, #0
 8009dfc:	eba6 0807 	sub.w	r8, r6, r7
 8009e00:	608b      	str	r3, [r1, #8]
 8009e02:	f1b8 0f00 	cmp.w	r8, #0
 8009e06:	dd9c      	ble.n	8009d42 <__sflush_r+0x1a>
 8009e08:	6a21      	ldr	r1, [r4, #32]
 8009e0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e0c:	4643      	mov	r3, r8
 8009e0e:	463a      	mov	r2, r7
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b0      	blx	r6
 8009e14:	2800      	cmp	r0, #0
 8009e16:	dc06      	bgt.n	8009e26 <__sflush_r+0xfe>
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e1e:	81a3      	strh	r3, [r4, #12]
 8009e20:	f04f 30ff 	mov.w	r0, #4294967295
 8009e24:	e78e      	b.n	8009d44 <__sflush_r+0x1c>
 8009e26:	4407      	add	r7, r0
 8009e28:	eba8 0800 	sub.w	r8, r8, r0
 8009e2c:	e7e9      	b.n	8009e02 <__sflush_r+0xda>
 8009e2e:	bf00      	nop
 8009e30:	dfbffffe 	.word	0xdfbffffe

08009e34 <_fflush_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	690b      	ldr	r3, [r1, #16]
 8009e38:	4605      	mov	r5, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	b913      	cbnz	r3, 8009e44 <_fflush_r+0x10>
 8009e3e:	2500      	movs	r5, #0
 8009e40:	4628      	mov	r0, r5
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	b118      	cbz	r0, 8009e4e <_fflush_r+0x1a>
 8009e46:	6a03      	ldr	r3, [r0, #32]
 8009e48:	b90b      	cbnz	r3, 8009e4e <_fflush_r+0x1a>
 8009e4a:	f7fe ffdf 	bl	8008e0c <__sinit>
 8009e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0f3      	beq.n	8009e3e <_fflush_r+0xa>
 8009e56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e58:	07d0      	lsls	r0, r2, #31
 8009e5a:	d404      	bmi.n	8009e66 <_fflush_r+0x32>
 8009e5c:	0599      	lsls	r1, r3, #22
 8009e5e:	d402      	bmi.n	8009e66 <_fflush_r+0x32>
 8009e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e62:	f7ff fab3 	bl	80093cc <__retarget_lock_acquire_recursive>
 8009e66:	4628      	mov	r0, r5
 8009e68:	4621      	mov	r1, r4
 8009e6a:	f7ff ff5d 	bl	8009d28 <__sflush_r>
 8009e6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e70:	07da      	lsls	r2, r3, #31
 8009e72:	4605      	mov	r5, r0
 8009e74:	d4e4      	bmi.n	8009e40 <_fflush_r+0xc>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	059b      	lsls	r3, r3, #22
 8009e7a:	d4e1      	bmi.n	8009e40 <_fflush_r+0xc>
 8009e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e7e:	f7ff faa6 	bl	80093ce <__retarget_lock_release_recursive>
 8009e82:	e7dd      	b.n	8009e40 <_fflush_r+0xc>

08009e84 <fiprintf>:
 8009e84:	b40e      	push	{r1, r2, r3}
 8009e86:	b503      	push	{r0, r1, lr}
 8009e88:	4601      	mov	r1, r0
 8009e8a:	ab03      	add	r3, sp, #12
 8009e8c:	4805      	ldr	r0, [pc, #20]	; (8009ea4 <fiprintf+0x20>)
 8009e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e92:	6800      	ldr	r0, [r0, #0]
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	f7ff fc9d 	bl	80097d4 <_vfiprintf_r>
 8009e9a:	b002      	add	sp, #8
 8009e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ea0:	b003      	add	sp, #12
 8009ea2:	4770      	bx	lr
 8009ea4:	2000009c 	.word	0x2000009c

08009ea8 <__swhatbuf_r>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	460c      	mov	r4, r1
 8009eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb0:	2900      	cmp	r1, #0
 8009eb2:	b096      	sub	sp, #88	; 0x58
 8009eb4:	4615      	mov	r5, r2
 8009eb6:	461e      	mov	r6, r3
 8009eb8:	da0d      	bge.n	8009ed6 <__swhatbuf_r+0x2e>
 8009eba:	89a3      	ldrh	r3, [r4, #12]
 8009ebc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ec0:	f04f 0100 	mov.w	r1, #0
 8009ec4:	bf0c      	ite	eq
 8009ec6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009eca:	2340      	movne	r3, #64	; 0x40
 8009ecc:	2000      	movs	r0, #0
 8009ece:	6031      	str	r1, [r6, #0]
 8009ed0:	602b      	str	r3, [r5, #0]
 8009ed2:	b016      	add	sp, #88	; 0x58
 8009ed4:	bd70      	pop	{r4, r5, r6, pc}
 8009ed6:	466a      	mov	r2, sp
 8009ed8:	f000 f848 	bl	8009f6c <_fstat_r>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	dbec      	blt.n	8009eba <__swhatbuf_r+0x12>
 8009ee0:	9901      	ldr	r1, [sp, #4]
 8009ee2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009ee6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009eea:	4259      	negs	r1, r3
 8009eec:	4159      	adcs	r1, r3
 8009eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ef2:	e7eb      	b.n	8009ecc <__swhatbuf_r+0x24>

08009ef4 <__smakebuf_r>:
 8009ef4:	898b      	ldrh	r3, [r1, #12]
 8009ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ef8:	079d      	lsls	r5, r3, #30
 8009efa:	4606      	mov	r6, r0
 8009efc:	460c      	mov	r4, r1
 8009efe:	d507      	bpl.n	8009f10 <__smakebuf_r+0x1c>
 8009f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	6123      	str	r3, [r4, #16]
 8009f08:	2301      	movs	r3, #1
 8009f0a:	6163      	str	r3, [r4, #20]
 8009f0c:	b002      	add	sp, #8
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	ab01      	add	r3, sp, #4
 8009f12:	466a      	mov	r2, sp
 8009f14:	f7ff ffc8 	bl	8009ea8 <__swhatbuf_r>
 8009f18:	9900      	ldr	r1, [sp, #0]
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7fe fe6f 	bl	8008c00 <_malloc_r>
 8009f22:	b948      	cbnz	r0, 8009f38 <__smakebuf_r+0x44>
 8009f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f28:	059a      	lsls	r2, r3, #22
 8009f2a:	d4ef      	bmi.n	8009f0c <__smakebuf_r+0x18>
 8009f2c:	f023 0303 	bic.w	r3, r3, #3
 8009f30:	f043 0302 	orr.w	r3, r3, #2
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	e7e3      	b.n	8009f00 <__smakebuf_r+0xc>
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	6020      	str	r0, [r4, #0]
 8009f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f40:	81a3      	strh	r3, [r4, #12]
 8009f42:	9b00      	ldr	r3, [sp, #0]
 8009f44:	6163      	str	r3, [r4, #20]
 8009f46:	9b01      	ldr	r3, [sp, #4]
 8009f48:	6120      	str	r0, [r4, #16]
 8009f4a:	b15b      	cbz	r3, 8009f64 <__smakebuf_r+0x70>
 8009f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f50:	4630      	mov	r0, r6
 8009f52:	f000 f81d 	bl	8009f90 <_isatty_r>
 8009f56:	b128      	cbz	r0, 8009f64 <__smakebuf_r+0x70>
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	f023 0303 	bic.w	r3, r3, #3
 8009f5e:	f043 0301 	orr.w	r3, r3, #1
 8009f62:	81a3      	strh	r3, [r4, #12]
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	431d      	orrs	r5, r3
 8009f68:	81a5      	strh	r5, [r4, #12]
 8009f6a:	e7cf      	b.n	8009f0c <__smakebuf_r+0x18>

08009f6c <_fstat_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d07      	ldr	r5, [pc, #28]	; (8009f8c <_fstat_r+0x20>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	4611      	mov	r1, r2
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	f7f7 fb46 	bl	800160a <_fstat>
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	d102      	bne.n	8009f88 <_fstat_r+0x1c>
 8009f82:	682b      	ldr	r3, [r5, #0]
 8009f84:	b103      	cbz	r3, 8009f88 <_fstat_r+0x1c>
 8009f86:	6023      	str	r3, [r4, #0]
 8009f88:	bd38      	pop	{r3, r4, r5, pc}
 8009f8a:	bf00      	nop
 8009f8c:	200016fc 	.word	0x200016fc

08009f90 <_isatty_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4d06      	ldr	r5, [pc, #24]	; (8009fac <_isatty_r+0x1c>)
 8009f94:	2300      	movs	r3, #0
 8009f96:	4604      	mov	r4, r0
 8009f98:	4608      	mov	r0, r1
 8009f9a:	602b      	str	r3, [r5, #0]
 8009f9c:	f7f7 fb45 	bl	800162a <_isatty>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d102      	bne.n	8009faa <_isatty_r+0x1a>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	b103      	cbz	r3, 8009faa <_isatty_r+0x1a>
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	200016fc 	.word	0x200016fc

08009fb0 <abort>:
 8009fb0:	b508      	push	{r3, lr}
 8009fb2:	2006      	movs	r0, #6
 8009fb4:	f000 f85a 	bl	800a06c <raise>
 8009fb8:	2001      	movs	r0, #1
 8009fba:	f7f7 fad7 	bl	800156c <_exit>

08009fbe <_realloc_r>:
 8009fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc2:	4680      	mov	r8, r0
 8009fc4:	4614      	mov	r4, r2
 8009fc6:	460e      	mov	r6, r1
 8009fc8:	b921      	cbnz	r1, 8009fd4 <_realloc_r+0x16>
 8009fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fce:	4611      	mov	r1, r2
 8009fd0:	f7fe be16 	b.w	8008c00 <_malloc_r>
 8009fd4:	b92a      	cbnz	r2, 8009fe2 <_realloc_r+0x24>
 8009fd6:	f7ff fa2f 	bl	8009438 <_free_r>
 8009fda:	4625      	mov	r5, r4
 8009fdc:	4628      	mov	r0, r5
 8009fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe2:	f000 f85f 	bl	800a0a4 <_malloc_usable_size_r>
 8009fe6:	4284      	cmp	r4, r0
 8009fe8:	4607      	mov	r7, r0
 8009fea:	d802      	bhi.n	8009ff2 <_realloc_r+0x34>
 8009fec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ff0:	d812      	bhi.n	800a018 <_realloc_r+0x5a>
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	f7fe fe03 	bl	8008c00 <_malloc_r>
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d0ed      	beq.n	8009fdc <_realloc_r+0x1e>
 800a000:	42bc      	cmp	r4, r7
 800a002:	4622      	mov	r2, r4
 800a004:	4631      	mov	r1, r6
 800a006:	bf28      	it	cs
 800a008:	463a      	movcs	r2, r7
 800a00a:	f7ff f9e9 	bl	80093e0 <memcpy>
 800a00e:	4631      	mov	r1, r6
 800a010:	4640      	mov	r0, r8
 800a012:	f7ff fa11 	bl	8009438 <_free_r>
 800a016:	e7e1      	b.n	8009fdc <_realloc_r+0x1e>
 800a018:	4635      	mov	r5, r6
 800a01a:	e7df      	b.n	8009fdc <_realloc_r+0x1e>

0800a01c <_raise_r>:
 800a01c:	291f      	cmp	r1, #31
 800a01e:	b538      	push	{r3, r4, r5, lr}
 800a020:	4604      	mov	r4, r0
 800a022:	460d      	mov	r5, r1
 800a024:	d904      	bls.n	800a030 <_raise_r+0x14>
 800a026:	2316      	movs	r3, #22
 800a028:	6003      	str	r3, [r0, #0]
 800a02a:	f04f 30ff 	mov.w	r0, #4294967295
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a032:	b112      	cbz	r2, 800a03a <_raise_r+0x1e>
 800a034:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a038:	b94b      	cbnz	r3, 800a04e <_raise_r+0x32>
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 f830 	bl	800a0a0 <_getpid_r>
 800a040:	462a      	mov	r2, r5
 800a042:	4601      	mov	r1, r0
 800a044:	4620      	mov	r0, r4
 800a046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a04a:	f000 b817 	b.w	800a07c <_kill_r>
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d00a      	beq.n	800a068 <_raise_r+0x4c>
 800a052:	1c59      	adds	r1, r3, #1
 800a054:	d103      	bne.n	800a05e <_raise_r+0x42>
 800a056:	2316      	movs	r3, #22
 800a058:	6003      	str	r3, [r0, #0]
 800a05a:	2001      	movs	r0, #1
 800a05c:	e7e7      	b.n	800a02e <_raise_r+0x12>
 800a05e:	2400      	movs	r4, #0
 800a060:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a064:	4628      	mov	r0, r5
 800a066:	4798      	blx	r3
 800a068:	2000      	movs	r0, #0
 800a06a:	e7e0      	b.n	800a02e <_raise_r+0x12>

0800a06c <raise>:
 800a06c:	4b02      	ldr	r3, [pc, #8]	; (800a078 <raise+0xc>)
 800a06e:	4601      	mov	r1, r0
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	f7ff bfd3 	b.w	800a01c <_raise_r>
 800a076:	bf00      	nop
 800a078:	2000009c 	.word	0x2000009c

0800a07c <_kill_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d07      	ldr	r5, [pc, #28]	; (800a09c <_kill_r+0x20>)
 800a080:	2300      	movs	r3, #0
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	4611      	mov	r1, r2
 800a088:	602b      	str	r3, [r5, #0]
 800a08a:	f7f7 fa5f 	bl	800154c <_kill>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	d102      	bne.n	800a098 <_kill_r+0x1c>
 800a092:	682b      	ldr	r3, [r5, #0]
 800a094:	b103      	cbz	r3, 800a098 <_kill_r+0x1c>
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	bd38      	pop	{r3, r4, r5, pc}
 800a09a:	bf00      	nop
 800a09c:	200016fc 	.word	0x200016fc

0800a0a0 <_getpid_r>:
 800a0a0:	f7f7 ba4c 	b.w	800153c <_getpid>

0800a0a4 <_malloc_usable_size_r>:
 800a0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a8:	1f18      	subs	r0, r3, #4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bfbc      	itt	lt
 800a0ae:	580b      	ldrlt	r3, [r1, r0]
 800a0b0:	18c0      	addlt	r0, r0, r3
 800a0b2:	4770      	bx	lr

0800a0b4 <_init>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	bf00      	nop
 800a0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ba:	bc08      	pop	{r3}
 800a0bc:	469e      	mov	lr, r3
 800a0be:	4770      	bx	lr

0800a0c0 <_fini>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr
